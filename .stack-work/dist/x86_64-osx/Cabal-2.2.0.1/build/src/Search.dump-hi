
==================== FINAL INTERFACE ====================
2018-09-17 06:30:44.033042 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:Search 8043
  interface hash: 4aa77e74a385a2ce131f2e51141a208b
  ABI hash: cb84cda664d00c7b7a40978fdc141371
  export-list hash: 838d17a553d997f253f3adfdfd432788
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 8f52f5e5828eb5661f405d8d9ca450ec
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Search.searchMin
module dependencies:
package dependencies: base-4.11.1.0* ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0
orphans: base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity base-4.11.1.0:Data.Monoid
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:GHC.Generics
                         base-4.11.1.0:GHC.IO.Exception
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Float 99c69d365bb2607725a22530ce1ca4b4
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
8aa67502036e22367edfac69dd0f9117
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Search.$trModule3
                   Search.$trModule1) -}
976edbdd756cc750cdc7102006ac9bc4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Search.$trModule2) -}
27f6a5d39cdc73f2832fb29e5b2b7971
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Search"#) -}
30ad8474f404139c324731df6a89663e
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Search.$trModule4) -}
62a63bfb99d8f1421794ba59aed9734b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
d57c243ec3fb079d4d1cc7873444f07c
  $wsearchMin ::
    GHC.Prim.Double#
    -> (Search.X -> Search.Y)
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
    -> GHC.Prim.Double#
  {- Arity: 4, Strictness: <S,U><L,C(U(U))><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#)
                   (w :: Search.X -> Search.Y)
                   (ww1 :: GHC.Prim.Double#)
                   (ww2 :: GHC.Prim.Double#) ->
                 case Search.phi of wild { GHC.Types.D# x ->
                 case GHC.Prim./##
                        (GHC.Prim.+## ww1 (GHC.Prim.*## x ww2))
                        (GHC.Prim.+## x 1.0##) of wild2 { DEFAULT ->
                 letrec {
                   $wgo :: GHC.Types.Bool
                           -> GHC.Prim.Double#
                           -> Search.Y
                           -> (Search.X -> Search.Y)
                           -> GHC.Prim.Double#
                           -> GHC.Prim.Double#
                           -> GHC.Prim.Double#
                     <join 6> {- Arity: 6,
                                 Strictness: <L,1*U><S,U><L,1*U(U)><L,C(U(U))><S,U><S,U>,
                                 Inline: [0] -}
                   = \ (w1 :: GHC.Types.Bool)
                       (ww3 :: GHC.Prim.Double#)
                       (w2 :: Search.Y)
                       (w3 :: Search.X -> Search.Y)
                       (ww4 :: GHC.Prim.Double#)
                       (ww5 :: GHC.Prim.Double#) ->
                     case GHC.Prim.<##
                            (GHC.Prim.fabsDouble# (GHC.Prim.-## ww5 ww4))
                            ww of lwild {
                       DEFAULT
                       -> case w1 of wild1 {
                            GHC.Types.False
                            -> case GHC.Prim./##
                                      (GHC.Prim.+## (GHC.Prim.*## x ww4) ww5)
                                      (GHC.Prim.+## 1.0## x) of wild3 { DEFAULT ->
                               case w3 (GHC.Types.D# wild3) of wild4 { GHC.Types.D# x1 ->
                               case w2 of wild5 { GHC.Types.D# y ->
                               case GHC.Prim.<## x1 y of lwild1 {
                                 DEFAULT -> $wgo GHC.Types.True ww3 wild5 w3 wild3 ww5
                                 1# -> $wgo GHC.Types.False wild3 wild4 w3 ww4 ww3 } } } }
                            GHC.Types.True
                            -> case GHC.Prim./##
                                      (GHC.Prim.+## ww4 (GHC.Prim.*## x ww5))
                                      (GHC.Prim.+## x 1.0##) of wild3 { DEFAULT ->
                               case w3 (GHC.Types.D# wild3) of wild4 { GHC.Types.D# x1 ->
                               case w2 of wild5 { GHC.Types.D# y ->
                               case GHC.Prim.<## x1 y of lwild1 {
                                 DEFAULT -> $wgo GHC.Types.False ww3 wild5 w3 ww4 wild3
                                 1# -> $wgo GHC.Types.True wild3 wild4 w3 ww3 ww5 } } } } }
                       1# -> ww3 }
                 } in
                 $wgo
                   GHC.Types.False
                   wild2
                   (w (GHC.Types.D# wild2))
                   w
                   ww1
                   ww2 } }) -}
502cc0301f68216140088233d736aca4
  type Range = (Search.X, Search.X)
cc8195777b0ac81f66e17fc00ed64510
  type Tolerance = GHC.Types.Double
a2ec579ec7a1a57b8bf59cb4a137e20a
  type X = GHC.Types.Double
84d244d0109dcd15c6217bd2987e1cd4
  type Y = GHC.Types.Double
123e00c7189cddf07eddef42615cac96
  phi :: GHC.Types.Double
  {- Strictness: m,
     Unfolding: (let {
                   wild2 :: GHC.Prim.Double#
                   = GHC.Prim./##
                       (GHC.Prim.+## 1.0## (GHC.Prim.sqrtDouble# 5.0##))
                       2.0##
                 } in
                 GHC.Types.D# wild2) -}
590bb9a849a10e842225fc3470905432
  searchMin ::
    Search.Tolerance
    -> (Search.X -> Search.Y) -> Search.Range -> Search.X
  {- Arity: 3,
     Strictness: <S(S),1*U(U)><L,C(U(U))><S(S(S)S(S)),1*U(1*U(U),1*U(U))>m,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Search.Tolerance)
                   (w1 :: Search.X -> Search.Y)
                   (w2 :: Search.Range) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 case w2 of ww2 { (,) ww3 ww4 ->
                 case ww3 of ww5 { GHC.Types.D# ww6 ->
                 case ww4 of ww7 { GHC.Types.D# ww8 ->
                 case Search.$wsearchMin ww1 w1 ww6 ww8 of ww9 { DEFAULT ->
                 GHC.Types.D# ww9 } } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

