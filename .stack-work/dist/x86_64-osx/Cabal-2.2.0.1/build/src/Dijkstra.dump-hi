
==================== FINAL INTERFACE ====================
2018-09-17 03:26:50.013679 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:Dijkstra 8043
  interface hash: ab648268afbc08dabf6d716356f754cc
  ABI hash: eab0ca222d634201c6687dfb5736ce79
  export-list hash: 3af0dbcdbdbc9cc4cb8d2bdfe08aecc0
  orphan hash: 656c455889c21103f7e2f605616066fe
  flag hash: b915cbf2202f4d4daacdd8d907262cdd
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Dijkstra.compose
  Dijkstra.insertLink
  Dijkstra.inverseNetwork
  Dijkstra.invertOD
  Dijkstra.isNextGraph
  Dijkstra.isNextLink
  Dijkstra.isNextOD
  Dijkstra.networkFromList
  Dijkstra.nodeSet
  Dijkstra.shortestPath
  Dijkstra.Cost
  Dijkstra.Graph{Dijkstra.Edge Dijkstra.Graph}
  Dijkstra.Link{Dijkstra.Link}
  Dijkstra.Network
  Dijkstra.Node
  Dijkstra.OD{Dijkstra.:->:}
  Dijkstra.Path
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 transformers-0.5.5.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.Semigroup 6cec65b3e80c1fda845c902576adfbbd
import  -/  base-4.11.1.0:Debug.Trace 3062f7167e3b4d38ffd41be499676d90
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Err 5e26aa744981f14e0f1e4d29c44ac52e
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  containers-0.5.11.0:Data.Set.Internal 93fa3ef95853aa2a7aadf32d693bd451
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  vector-0.12.0.1:Data.Vector a3a00743437ee8354b7b63f8638591df
fixities infixr 5 :->:
3011a53e19a81efe738ac996767dd6f8
  $fEqGraph :: GHC.Classes.Eq Dijkstra.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.Graph Dijkstra.$fEqGraph_$c== Dijkstra.$fEqGraph_$c/= -}
3011a53e19a81efe738ac996767dd6f8
  $fEqGraph_$c/= ::
    Dijkstra.Graph -> Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Dijkstra.Graph) (y :: Dijkstra.Graph) ->
                 case Dijkstra.$fEqGraph_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
3011a53e19a81efe738ac996767dd6f8
  $fEqGraph_$c== ::
    Dijkstra.Graph -> Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (g1 :: Dijkstra.Graph) (g2 :: Dijkstra.Graph) ->
                 case Dijkstra.compose g1 of wild { Dijkstra.:->: n1 n2 ->
                 case Dijkstra.compose g2 of wild1 { Dijkstra.:->: n3 n4 ->
                 case n1 of wild2 { GHC.Types.I# x ->
                 case n3 of wild3 { GHC.Types.I# y ->
                 case GHC.Prim.==# x y of lwild {
                   DEFAULT -> GHC.Types.False
                   1# -> GHC.Classes.eqInt n2 n4 } } } } }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fEqLink :: GHC.Classes.Eq Dijkstra.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.Link Dijkstra.$fEqLink_$c== Dijkstra.$fEqLink_$c/= -}
361a600031b2ec73e64cd355c3fd06ee
  $fEqLink_$c/= :: Dijkstra.Link -> Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Dijkstra.Link) (y :: Dijkstra.Link) ->
                 case x of wild { Dijkstra.Link g1 c1 ->
                 case y of wild1 { Dijkstra.Link g2 c2 ->
                 case Dijkstra.$fEqGraph_$c== g1 g2 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqDouble c1 c2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fEqLink_$c== :: Dijkstra.Link -> Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.Link) (w1 :: Dijkstra.Link) ->
                 case w of ww { Dijkstra.Link ww1 ww2 ->
                 case w1 of ww3 { Dijkstra.Link ww4 ww5 ->
                 Dijkstra.$w$c== ww1 ww2 ww4 ww5 } }) -}
efda809a1126d783a7fa26c274810661
  $fEqOD :: GHC.Classes.Eq Dijkstra.OD
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.OD Dijkstra.$fEqOD_$c== Dijkstra.$fEqOD_$c/= -}
efda809a1126d783a7fa26c274810661
  $fEqOD_$c/= :: Dijkstra.OD -> Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Dijkstra.OD) (y :: Dijkstra.OD) ->
                 case x of wild { Dijkstra.:->: n1 n2 ->
                 case y of wild1 { Dijkstra.:->: n3 n4 ->
                 case GHC.Classes.eqInt n1 n3 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt n2 n4 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
efda809a1126d783a7fa26c274810661
  $fEqOD_$c== :: Dijkstra.OD -> Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.OD) (w1 :: Dijkstra.OD) ->
                 case w of ww { Dijkstra.:->: ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Dijkstra.:->: ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Dijkstra.$w$c==1 ww4 ww2 ww9 ww7 } } } }) -}
3011a53e19a81efe738ac996767dd6f8
  $fOrdGraph :: GHC.Classes.Ord Dijkstra.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.Graph
                  Dijkstra.$fEqGraph
                  Dijkstra.$fOrdGraph_$ccompare
                  Dijkstra.$fOrdGraph_$c<
                  Dijkstra.$fOrdGraph_$c<=
                  Dijkstra.$fOrdGraph_$c>
                  Dijkstra.$fOrdGraph_$c>=
                  Dijkstra.$fOrdGraph_$cmax
                  Dijkstra.$fOrdGraph_$cmin -}
3011a53e19a81efe738ac996767dd6f8
  $fOrdGraph_$c< ::
    Dijkstra.Graph -> Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Graph) (y :: Dijkstra.Graph) ->
                 case Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
3011a53e19a81efe738ac996767dd6f8
  $fOrdGraph_$c<= ::
    Dijkstra.Graph -> Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Graph) (y :: Dijkstra.Graph) ->
                 case Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
3011a53e19a81efe738ac996767dd6f8
  $fOrdGraph_$c> ::
    Dijkstra.Graph -> Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Graph) (y :: Dijkstra.Graph) ->
                 case Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
3011a53e19a81efe738ac996767dd6f8
  $fOrdGraph_$c>= ::
    Dijkstra.Graph -> Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Graph) (y :: Dijkstra.Graph) ->
                 case Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
3011a53e19a81efe738ac996767dd6f8
  $fOrdGraph_$ccompare ::
    Dijkstra.Graph -> Dijkstra.Graph -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (g1 :: Dijkstra.Graph) (g2 :: Dijkstra.Graph) ->
                 case Dijkstra.$fEqGraph_$c== g1 g2 of wild {
                   GHC.Types.False
                   -> case Dijkstra.compose g1 of ww { Dijkstra.:->: ww1 ww2 ->
                      case ww1 of ww3 { GHC.Types.I# ww4 ->
                      case Dijkstra.compose g2 of ww5 { Dijkstra.:->: ww6 ww7 ->
                      case ww6 of ww8 { GHC.Types.I# ww9 ->
                      case Dijkstra.$w$ccompare ww4 ww2 ww9 ww7 of wild1 {
                        DEFAULT -> GHC.Types.GT GHC.Types.LT -> GHC.Types.LT } } } } }
                   GHC.Types.True -> GHC.Types.EQ }) -}
3011a53e19a81efe738ac996767dd6f8
  $fOrdGraph_$cmax ::
    Dijkstra.Graph -> Dijkstra.Graph -> Dijkstra.Graph
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Graph) (y :: Dijkstra.Graph) ->
                 case Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
3011a53e19a81efe738ac996767dd6f8
  $fOrdGraph_$cmin ::
    Dijkstra.Graph -> Dijkstra.Graph -> Dijkstra.Graph
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Graph) (y :: Dijkstra.Graph) ->
                 case Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fOrdLink :: GHC.Classes.Ord Dijkstra.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.Link
                  Dijkstra.$fEqLink
                  Dijkstra.$fOrdLink_$ccompare
                  Dijkstra.$fOrdLink_$c<
                  Dijkstra.$fOrdLink_$c<=
                  Dijkstra.$fOrdLink_$c>
                  Dijkstra.$fOrdLink_$c>=
                  Dijkstra.$fOrdLink_$cmax
                  Dijkstra.$fOrdLink_$cmin -}
361a600031b2ec73e64cd355c3fd06ee
  $fOrdLink_$c< :: Dijkstra.Link -> Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Link) (y :: Dijkstra.Link) ->
                 case Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fOrdLink_$c<= :: Dijkstra.Link -> Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Link) (y :: Dijkstra.Link) ->
                 case Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fOrdLink_$c> :: Dijkstra.Link -> Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Link) (y :: Dijkstra.Link) ->
                 case Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fOrdLink_$c>= :: Dijkstra.Link -> Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Link) (y :: Dijkstra.Link) ->
                 case Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fOrdLink_$ccompare ::
    Dijkstra.Link -> Dijkstra.Link -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.Link) (w1 :: Dijkstra.Link) ->
                 case w of ww { Dijkstra.Link ww1 ww2 ->
                 case ww2 of ww3 { GHC.Types.D# ww4 ->
                 case w1 of ww5 { Dijkstra.Link ww6 ww7 ->
                 case ww7 of ww8 { GHC.Types.D# ww9 ->
                 Dijkstra.$w$ccompare1 ww1 ww4 ww6 ww9 } } } }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fOrdLink_$cmax :: Dijkstra.Link -> Dijkstra.Link -> Dijkstra.Link
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,U(U))><S(SS(S)),1*U(U,U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Link) (y :: Dijkstra.Link) ->
                 case Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fOrdLink_$cmin :: Dijkstra.Link -> Dijkstra.Link -> Dijkstra.Link
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,U(U))><S(SS(S)),1*U(U,U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.Link) (y :: Dijkstra.Link) ->
                 case Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
efda809a1126d783a7fa26c274810661
  $fOrdOD :: GHC.Classes.Ord Dijkstra.OD
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.OD
                  Dijkstra.$fEqOD
                  Dijkstra.$fOrdOD_$ccompare
                  Dijkstra.$fOrdOD_$c<
                  Dijkstra.$fOrdOD_$c<=
                  Dijkstra.$fOrdOD_$c>
                  Dijkstra.$fOrdOD_$c>=
                  Dijkstra.$fOrdOD_$cmax
                  Dijkstra.$fOrdOD_$cmin -}
efda809a1126d783a7fa26c274810661
  $fOrdOD_$c< :: Dijkstra.OD -> Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.OD) (y :: Dijkstra.OD) ->
                 case Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
efda809a1126d783a7fa26c274810661
  $fOrdOD_$c<= :: Dijkstra.OD -> Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.OD) (y :: Dijkstra.OD) ->
                 case Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
efda809a1126d783a7fa26c274810661
  $fOrdOD_$c> :: Dijkstra.OD -> Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.OD) (y :: Dijkstra.OD) ->
                 case Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
efda809a1126d783a7fa26c274810661
  $fOrdOD_$c>= :: Dijkstra.OD -> Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.OD) (y :: Dijkstra.OD) ->
                 case Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
efda809a1126d783a7fa26c274810661
  $fOrdOD_$ccompare ::
    Dijkstra.OD -> Dijkstra.OD -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.OD) (w1 :: Dijkstra.OD) ->
                 case w of ww { Dijkstra.:->: ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Dijkstra.:->: ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Dijkstra.$w$ccompare ww4 ww2 ww9 ww7 } } } }) -}
efda809a1126d783a7fa26c274810661
  $fOrdOD_$cmax :: Dijkstra.OD -> Dijkstra.OD -> Dijkstra.OD
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.OD) (y :: Dijkstra.OD) ->
                 case Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
efda809a1126d783a7fa26c274810661
  $fOrdOD_$cmin :: Dijkstra.OD -> Dijkstra.OD -> Dijkstra.OD
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Dijkstra.OD) (y :: Dijkstra.OD) ->
                 case Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
3011a53e19a81efe738ac996767dd6f8
  $fSemigroupGraph :: GHC.Base.Semigroup Dijkstra.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.Graph
                  Dijkstra.$fSemigroupGraph_$c<>
                  Dijkstra.$fSemigroupGraph_$csconcat
                  Dijkstra.$fSemigroupGraph_$cstimes -}
3011a53e19a81efe738ac996767dd6f8
  $fSemigroupGraph_$c<> ::
    Dijkstra.Graph -> Dijkstra.Graph -> Dijkstra.Graph
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.Graph) (w1 :: Dijkstra.Graph) ->
                 case Dijkstra.$w$c<> w w1 of ww { Unit# ww1 ->
                 Dijkstra.Graph ww1 }) -}
3011a53e19a81efe738ac996767dd6f8
  $fSemigroupGraph_$csconcat ::
    GHC.Base.NonEmpty Dijkstra.Graph -> Dijkstra.Graph
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty Dijkstra.Graph) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Dijkstra.$fSemigroupGraph_go a1 as }) -}
3011a53e19a81efe738ac996767dd6f8
  $fSemigroupGraph_$cstimes ::
    GHC.Real.Integral b => b -> Dijkstra.Graph -> Dijkstra.Graph
  {- Arity: 1, Strictness: <L,U> -}
3011a53e19a81efe738ac996767dd6f8
  $fSemigroupGraph_go ::
    Dijkstra.Graph -> [Dijkstra.Graph] -> Dijkstra.Graph
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
361a600031b2ec73e64cd355c3fd06ee
  $fSemigroupLink :: GHC.Base.Semigroup Dijkstra.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.Link
                  Dijkstra.$fSemigroupLink_$c<>
                  Dijkstra.$fSemigroupLink_$csconcat
                  Dijkstra.$fSemigroupLink_$cstimes -}
361a600031b2ec73e64cd355c3fd06ee
  $fSemigroupLink_$c<> ::
    Dijkstra.Link -> Dijkstra.Link -> Dijkstra.Link
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U(U))><S,1*U(1*U,1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Dijkstra.Link) (ds1 :: Dijkstra.Link) ->
                 case ds of wild { Dijkstra.Link g1 c1 ->
                 case ds1 of wild1 { Dijkstra.Link g2 c2 ->
                 Dijkstra.Link
                   (Dijkstra.$fSemigroupGraph_$c<> g1 g2)
                   (GHC.Float.plusDouble c1 c2) } }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fSemigroupLink_$csconcat ::
    GHC.Base.NonEmpty Dijkstra.Link -> Dijkstra.Link
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U,U(U)),1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty Dijkstra.Link) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Dijkstra.$fSemigroupLink_go a1 as }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fSemigroupLink_$cstimes ::
    GHC.Real.Integral b => b -> Dijkstra.Link -> Dijkstra.Link
  {- Arity: 1, Strictness: <L,U> -}
361a600031b2ec73e64cd355c3fd06ee
  $fSemigroupLink_go ::
    Dijkstra.Link -> [Dijkstra.Link] -> Dijkstra.Link
  {- Arity: 2, Strictness: <S,1*U(U,U(U))><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.Link) (w1 :: [Dijkstra.Link]) ->
                 case w of ww { Dijkstra.Link ww1 ww2 ->
                 case Dijkstra.$wgo ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Dijkstra.Link ww4 ww5 } }) -}
efda809a1126d783a7fa26c274810661
  $fSemigroupOD :: GHC.Base.Semigroup Dijkstra.OD
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.OD
                  Dijkstra.$fSemigroupOD_$c<>
                  Dijkstra.$fSemigroupOD_$csconcat
                  Dijkstra.$fSemigroupOD_$cstimes -}
efda809a1126d783a7fa26c274810661
  $fSemigroupOD_$c<> :: Dijkstra.OD -> Dijkstra.OD -> Dijkstra.OD
  {- Arity: 2,
     Strictness: <S(LS(S)),1*U(U,1*U(U))><S(S(S)L),1*U(1*U(U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Dijkstra.OD) (ds1 :: Dijkstra.OD) ->
                 case ds of wild { Dijkstra.:->: n1 n2 ->
                 case ds1 of wild1 { Dijkstra.:->: n3 n4 ->
                 case n2 of wild2 { GHC.Types.I# x ->
                 case n3 of wild3 { GHC.Types.I# y ->
                 case GHC.Prim.==# x y of lwild {
                   DEFAULT -> Dijkstra.compose2
                   1# -> Dijkstra.:->: n1 n4 } } } } }) -}
efda809a1126d783a7fa26c274810661
  $fSemigroupOD_$csconcat ::
    GHC.Base.NonEmpty Dijkstra.OD -> Dijkstra.OD
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U,U(U)),1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty Dijkstra.OD) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Dijkstra.$fSemigroupOD_go a1 as }) -}
efda809a1126d783a7fa26c274810661
  $fSemigroupOD_$cstimes ::
    GHC.Real.Integral b => b -> Dijkstra.OD -> Dijkstra.OD
  {- Arity: 1, Strictness: <L,U> -}
efda809a1126d783a7fa26c274810661
  $fSemigroupOD_go :: Dijkstra.OD -> [Dijkstra.OD] -> Dijkstra.OD
  {- Arity: 2, Strictness: <S,1*U(U,U(U))><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.OD) (w1 :: [Dijkstra.OD]) ->
                 case w of ww { Dijkstra.:->: ww1 ww2 ->
                 case Dijkstra.$wgo1 ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Dijkstra.:->: ww4 ww5 } }) -}
3011a53e19a81efe738ac996767dd6f8
  $fShowGraph :: GHC.Show.Show Dijkstra.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.Graph
                  Dijkstra.$fShowGraph_$cshowsPrec
                  Dijkstra.$fShowGraph_$cshow
                  Dijkstra.$fShowGraph_$cshowList -}
3011a53e19a81efe738ac996767dd6f8
  $fShowGraph1 :: Dijkstra.Graph -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Dijkstra.Graph) ->
                 Dijkstra.$w$cshowsPrec 0# w) -}
529996341d9932fbf0cbbaa3d1ded289
  $fShowGraph2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
3011a53e19a81efe738ac996767dd6f8
  $fShowGraph_$cshow :: Dijkstra.Graph -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Dijkstra.Graph) ->
                 Dijkstra.$fShowGraph_$cshowsPrec
                   Dijkstra.$fShowGraph2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3011a53e19a81efe738ac996767dd6f8
  $fShowGraph_$cshowList :: [Dijkstra.Graph] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Dijkstra.Graph]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Dijkstra.Graph Dijkstra.$fShowGraph1 ls s) -}
3011a53e19a81efe738ac996767dd6f8
  $fShowGraph_$cshowsPrec ::
    GHC.Types.Int -> Dijkstra.Graph -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Dijkstra.Graph) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Dijkstra.$w$cshowsPrec ww1 w1 }) -}
361a600031b2ec73e64cd355c3fd06ee
  $fShowLink :: GHC.Show.Show Dijkstra.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.Link
                  Dijkstra.$fShowLink_$cshowsPrec
                  Dijkstra.$fShowLink_$cshow
                  Dijkstra.$fShowLink_$cshowList -}
361a600031b2ec73e64cd355c3fd06ee
  $fShowLink1 :: Dijkstra.Link -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: (\ (w :: Dijkstra.Link) ->
                 case w of ww { Dijkstra.Link ww1 ww2 ->
                 Dijkstra.$w$cshowsPrec1 0# ww1 ww2 }) -}
7902a51548cbb27cb248d3730d7ea685
  $fShowLink2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Link "#) -}
33a28aaf145fb4c576fa445a638c2521
  $fShowLink3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
361a600031b2ec73e64cd355c3fd06ee
  $fShowLink_$cshow :: Dijkstra.Link -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Dijkstra.Link) ->
                 Dijkstra.$fShowLink_$cshowsPrec
                   Dijkstra.$fShowGraph2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
361a600031b2ec73e64cd355c3fd06ee
  $fShowLink_$cshowList :: [Dijkstra.Link] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Dijkstra.Link]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Dijkstra.Link Dijkstra.$fShowLink1 ls s) -}
361a600031b2ec73e64cd355c3fd06ee
  $fShowLink_$cshowsPrec ::
    GHC.Types.Int -> Dijkstra.Link -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Dijkstra.Link) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Dijkstra.Link ww3 ww4 ->
                 Dijkstra.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
efda809a1126d783a7fa26c274810661
  $fShowOD :: GHC.Show.Show Dijkstra.OD
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Dijkstra.OD
                  Dijkstra.$fShowOD_$cshowsPrec
                  Dijkstra.$fShowOD_$cshow
                  Dijkstra.$fShowOD_$cshowList -}
efda809a1126d783a7fa26c274810661
  $fShowOD1 :: Dijkstra.OD -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U>m2,
     Unfolding: (\ (w :: Dijkstra.OD) (w1 :: GHC.Base.String) ->
                 case w of ww { Dijkstra.:->: ww1 ww2 ->
                 case Dijkstra.$w$cshowsPrec2
                        0#
                        ww1
                        ww2
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ GHC.Types.Char ww4 ww5 } }) -}
83bd61539b04d236ccaa2d30e6b76e56
  $fShowOD2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" :->: "#) -}
efda809a1126d783a7fa26c274810661
  $fShowOD_$cshow :: Dijkstra.OD -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Dijkstra.OD) ->
                 case w of ww { Dijkstra.:->: ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case Dijkstra.$w$cshow ww4 ww2 of ww5 { (#,#) ww6 ww7 ->
                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } } }) -}
efda809a1126d783a7fa26c274810661
  $fShowOD_$cshowList :: [Dijkstra.OD] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Dijkstra.OD]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Dijkstra.OD Dijkstra.$fShowOD1 ls s) -}
efda809a1126d783a7fa26c274810661
  $fShowOD_$cshowsPrec ::
    GHC.Types.Int -> Dijkstra.OD -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Dijkstra.OD)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Dijkstra.:->: ww3 ww4 ->
                 case Dijkstra.$w$cshowsPrec2
                        ww1
                        ww3
                        ww4
                        w2 of ww5 { (#,#) ww6 ww7 ->
                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } } }) -}
81638fd1829a3f99fd06a465734a141c
  $sfromList ::
    [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Types.Int
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { GHC.Types.I# ipv ->
                           Data.Set.Internal.Bin
                             @ GHC.Types.Int
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Types.Int)
                             (Data.Set.Internal.Tip @ GHC.Types.Int) }
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case ipv of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Dijkstra.$wgo3
                                  1#
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  wild1
                             1#
                             -> Dijkstra.$sfromList_go4
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  wild1 } } } } }) -}
3c14ba9367f2f600847f271af9246beb
  $sfromList1 ::
    [(Dijkstra.OD, a)] -> Data.Map.Internal.Map Dijkstra.OD a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Dijkstra.OD, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Dijkstra.OD @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { Dijkstra.:->: ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ Dijkstra.OD
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Internal.Tip @ Dijkstra.OD @ a)
                             (Data.Map.Internal.Tip @ Dijkstra.OD @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Dijkstra.:->: ww1 ww2 ->
                           case ww1 of ww3 { GHC.Types.I# ww4 ->
                           case ky of ww5 { Dijkstra.:->: ww6 ww7 ->
                           case ww6 of ww8 { GHC.Types.I# ww9 ->
                           case Dijkstra.$w$ccompare ww4 ww2 ww9 ww7 of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                Dijkstra.$sfromList2
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ Dijkstra.OD
                                     @ a
                                     1#
                                     ww
                                     x0
                                     (Data.Map.Internal.Tip @ Dijkstra.OD @ a)
                                     (Data.Map.Internal.Tip @ Dijkstra.OD @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                Dijkstra.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Dijkstra.OD
                                     @ a
                                     1#
                                     ww
                                     x0
                                     (Data.Map.Internal.Tip @ Dijkstra.OD @ a)
                                     (Data.Map.Internal.Tip @ Dijkstra.OD @ a))
                                  wild2 } } } } } } } } } }) -}
7a53d0331fc865b1bb46ed49fb348023
  $sfromList2 ::
    Data.Map.Internal.Map Dijkstra.OD a
    -> [(Dijkstra.OD, a)] -> Data.Map.Internal.Map Dijkstra.OD a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
2618cbcbe48ab28841ef337f1f678a96
  $sfromList_go4 ::
    Data.Set.Internal.Set GHC.Types.Int
    -> [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
ec173f7d0e7ce5dad7d69b564d6c2fc6
  $sintersection ::
    Data.Set.Internal.Set Dijkstra.Node
    -> Data.Set.Internal.Set Dijkstra.Node
    -> Data.Set.Internal.Set Dijkstra.Node
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
ac180c72ddd33ef28158081ed980246c
  $tc':->: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17762921658762949295##
                   1239441195689063935##
                   Dijkstra.$trModule
                   Dijkstra.$tc':->:2
                   0#
                   Dijkstra.$tc':->:1) -}
fc6e695debf987a28f43a420bdf0b9b6
  $tc':->:1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
acf2d26fd2e0ed04dc00ae6ff6934df5
  $tc':->:2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$tc':->:3) -}
087468d3039ea3d5821cb5380d9ad0e9
  $tc':->:3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':->:"#) -}
64c094241e6084de208a2df5ad684d6b
  $tc'Edge :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1285143755889449331##
                   13577977923736531642##
                   Dijkstra.$trModule
                   Dijkstra.$tc'Edge2
                   0#
                   Dijkstra.$tc'Edge1) -}
1e2adabbf6ca25f0a9e071611e0b2f3f
  $tc'Edge1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
722e2a64fe2fc4917b0f21007f187212
  $tc'Edge2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$tc'Edge3) -}
28e05dffd534c0d73f26135f8268d94d
  $tc'Edge3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Edge"#) -}
f3abf16dd2e78fc7c429ba5def4b2ea9
  $tc'Graph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16531786943886775755##
                   11876305956566983499##
                   Dijkstra.$trModule
                   Dijkstra.$tc'Graph2
                   0#
                   Dijkstra.$tc'Graph1) -}
0ff65ae1acc5a47ad64ede5ed24cf80f
  $tc'Graph1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
85995f530fb79ad4a28166b7056e6a75
  $tc'Graph2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$tc'Graph3) -}
2aae0fe74e8fe3bc2491b7ba83af6b29
  $tc'Graph3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Graph"#) -}
d81510f1327bee5bf6ea68ddeb650d54
  $tc'Link :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11951287480541204345##
                   10306440567965857237##
                   Dijkstra.$trModule
                   Dijkstra.$tc'Link2
                   0#
                   Dijkstra.$tc'Link1) -}
7df997cf67eed73bd6c0fcb207e31237
  $tc'Link1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fdf620ceda11375fd964cced4aa77c3e
  $tc'Link2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$tc'Link3) -}
6561d0572d265b4b698b44ea0e60cc39
  $tc'Link3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Link"#) -}
24afff1059d81923f90d0617faa57189
  $tcGraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11494746668109798392##
                   9030244628142288831##
                   Dijkstra.$trModule
                   Dijkstra.$tcGraph1
                   0#
                   GHC.Types.krep$*) -}
02a5fc07bb028486c5b7001a151efb1b
  $tcGraph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$tcGraph2) -}
02e86a89a83f850e3fd0dd8aed4b48d8
  $tcGraph2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Graph"#) -}
d4e88dcd280a1814c71135c1388cce5e
  $tcLink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16312776187764467341##
                   4938439851067706555##
                   Dijkstra.$trModule
                   Dijkstra.$tcLink1
                   0#
                   GHC.Types.krep$*) -}
e9c5a6164a754ccea5e90dd80c11ee2c
  $tcLink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$tcLink2) -}
490626a8e5016dc0ec3e0b89cabf4e3f
  $tcLink2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Link"#) -}
1aea94dfe14925fa6439a88569560892
  $tcOD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10439260769069468286##
                   11725344916709962172##
                   Dijkstra.$trModule
                   Dijkstra.$tcOD1
                   0#
                   GHC.Types.krep$*) -}
51b2703ea0deb8d676c599682c534b67
  $tcOD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$tcOD2) -}
f3d7325c6420e27e5a056b03cb48160e
  $tcOD2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OD"#) -}
247d56f4ed4e909888f9232df7abe9e1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Dijkstra.$trModule3
                   Dijkstra.$trModule1) -}
bc24141f7d48925c9f4ea716926b8edb
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$trModule2) -}
a6f662ae1aae2583474aef9014a30664
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Dijkstra"#) -}
db14de6a58a17785f19019fff5e2fab9
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Dijkstra.$trModule4) -}
970271e30824e65196bfa017b430da78
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
3011a53e19a81efe738ac996767dd6f8
  $w$c<> ::
    Dijkstra.Graph
    -> Dijkstra.Graph -> (# Data.Vector.Vector Dijkstra.OD #)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
40170046edd1553183761ed45e9dbdd7
  $w$c== ::
    Dijkstra.Graph
    -> Dijkstra.Cost
    -> Dijkstra.Graph
    -> Dijkstra.Cost
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Dijkstra.Graph)
                   (ww1 :: Dijkstra.Cost)
                   (ww2 :: Dijkstra.Graph)
                   (ww3 :: Dijkstra.Cost) ->
                 case Dijkstra.$fEqGraph_$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqDouble ww1 ww3 }) -}
5fd3bceee4d61af34276b579cbb7d0f5
  $w$c==1 ::
    GHC.Prim.Int#
    -> Dijkstra.Node
    -> GHC.Prim.Int#
    -> Dijkstra.Node
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Dijkstra.Node)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Dijkstra.Node) ->
                 case GHC.Prim.==# ww ww2 of lwild {
                   DEFAULT -> GHC.Types.False 1# -> GHC.Classes.eqInt ww1 ww3 }) -}
cc937830965018296cc8308205f2aeaa
  $w$ccompare ::
    GHC.Prim.Int#
    -> Dijkstra.Node
    -> GHC.Prim.Int#
    -> Dijkstra.Node
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U(U)><S,U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Dijkstra.Node)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Dijkstra.Node) ->
                 let {
                   $j :: GHC.Types.Ordering <join 0>
                   = case GHC.Prim.<# ww ww2 of lwild {
                       DEFAULT
                       -> case GHC.Prim.==# ww ww2 of lwild1 {
                            DEFAULT -> GHC.Types.GT
                            1#
                            -> case ww1 of wild { GHC.Types.I# x ->
                               case ww3 of wild1 { GHC.Types.I# y ->
                               case GHC.Prim.<# x y of lwild2 {
                                 DEFAULT -> GHC.Types.GT 1# -> GHC.Types.LT } } } }
                       1# -> GHC.Types.LT }
                 } in
                 case GHC.Prim.==# ww ww2 of lwild {
                   DEFAULT -> $j
                   1#
                   -> case ww1 of wild { GHC.Types.I# x ->
                      case ww3 of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.==# x y of lwild1 {
                        DEFAULT -> $j 1# -> GHC.Types.EQ } } } }) -}
671f43b55e4f61f86ed6cf9907d0e822
  $w$ccompare1 ::
    Dijkstra.Graph
    -> GHC.Prim.Double#
    -> Dijkstra.Graph
    -> GHC.Prim.Double#
    -> GHC.Types.Ordering
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Dijkstra.Graph)
                   (ww1 :: GHC.Prim.Double#)
                   (ww2 :: Dijkstra.Graph)
                   (ww3 :: GHC.Prim.Double#) ->
                 let {
                   $j :: GHC.Types.Ordering <join 0>
                   = case GHC.Prim.==## ww1 ww3 of lwild {
                       DEFAULT
                       -> case GHC.Prim.<## ww1 ww3 of lwild1 {
                            DEFAULT -> GHC.Types.GT 1# -> GHC.Types.LT }
                       1#
                       -> case Dijkstra.$fOrdGraph_$ccompare ww ww2 of wild {
                            DEFAULT -> GHC.Types.GT GHC.Types.LT -> GHC.Types.LT } }
                 } in
                 case Dijkstra.$fEqGraph_$c== ww ww2 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case GHC.Prim.==## ww1 ww3 of lwild {
                        DEFAULT -> $j 1# -> GHC.Types.EQ } }) -}
12d06178e21e081417d41b0afecf0ec6
  $w$cshow ::
    GHC.Prim.Int#
    -> Dijkstra.Node -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: Dijkstra.Node) ->
                 GHC.Show.$wshowSignedInt
                   6#
                   ww
                   (GHC.CString.unpackAppendCString#
                      Dijkstra.$fShowOD2
                      (case ww1 of ww2 { GHC.Types.I# ww3 ->
                       case GHC.Show.$wshowSignedInt
                              6#
                              ww3
                              (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                       GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))) -}
3011a53e19a81efe738ac996767dd6f8
  $w$cshowsPrec :: GHC.Prim.Int# -> Dijkstra.Graph -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
2063b1526f4779cc6b78e9112dfd4949
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> Dijkstra.Graph -> Dijkstra.Cost -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Dijkstra.Graph)
                   (ww2 :: Dijkstra.Cost) ->
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Dijkstra.$w$cshowsPrec 11# ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       Dijkstra.$fShowLink3
                       ww4 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Dijkstra.$fShowLink2
                        (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Dijkstra.$fShowLink2
                           (f2
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
18bfb20dc6c204358fc06ab502b0f685
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Dijkstra.Node
    -> Dijkstra.Node
    -> GHC.Base.String
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Dijkstra.Node)
                   (ww2 :: Dijkstra.Node)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 6# of lwild {
                   DEFAULT
                   -> case ww1 of ww3 { GHC.Types.I# ww4 ->
                      GHC.Show.$wshowSignedInt
                        6#
                        ww4
                        (GHC.CString.unpackAppendCString#
                           Dijkstra.$fShowOD2
                           (case ww2 of ww5 { GHC.Types.I# ww6 ->
                            case GHC.Show.$wshowSignedInt 6# ww6 w of ww7 { (#,#) ww8 ww9 ->
                            GHC.Types.: @ GHC.Types.Char ww8 ww9 } })) }
                   1#
                   -> (# GHC.Show.$fShow(,)4,
                         case ww1 of ww3 { GHC.Types.I# ww4 ->
                         case GHC.Show.$wshowSignedInt
                                6#
                                ww4
                                (GHC.CString.unpackAppendCString#
                                   Dijkstra.$fShowOD2
                                   (case ww2 of ww5 { GHC.Types.I# ww6 ->
                                    case GHC.Show.$wshowSignedInt
                                           6#
                                           ww6
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.$fShow(,)2
                                              w) of ww7 { (#,#) ww8 ww9 ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      ww8
                                      ww9 } })) of ww5 { (#,#) ww6 ww7 ->
                         GHC.Types.: @ GHC.Types.Char ww6 ww7 } } #) }) -}
411bc36a85c8ead4cf07548594a1eabe
  $w$sgo1 ::
    (a1 -> a1 -> a1)
    -> Dijkstra.Node
    -> Dijkstra.Node
    -> a1
    -> Data.Map.Internal.Map Dijkstra.OD a1
    -> Data.Map.Internal.Map Dijkstra.OD a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
08fd9287cd52de9981cf8d5b6047b81d
  $w$sgo13 ::
    Dijkstra.Node
    -> Dijkstra.Node
    -> Data.Map.Internal.Map Dijkstra.OD a1
    -> Data.Map.Internal.Map Dijkstra.OD a1
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U)><S,1*U>, Inline: [0] -}
02454e219c44110470a8cb785c508b2c
  $w$sgo3 ::
    Dijkstra.Node
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Dijkstra.Node
    -> Data.Set.Internal.Set Dijkstra.Node
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
4dd23d1c38366ae1f3ddfd8b3e6e8f49
  $w$sgo8 ::
    Dijkstra.Node
    -> Dijkstra.Node
    -> a1
    -> Data.Map.Internal.Map Dijkstra.OD a1
    -> Data.Map.Internal.Map Dijkstra.OD a1
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
361a600031b2ec73e64cd355c3fd06ee
  $wgo ::
    Dijkstra.Graph
    -> Dijkstra.Cost
    -> [Dijkstra.Link]
    -> (# Dijkstra.Graph, Dijkstra.Cost #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>, Inline: [0] -}
efda809a1126d783a7fa26c274810661
  $wgo1 ::
    Dijkstra.Node
    -> Dijkstra.Node
    -> [Dijkstra.OD]
    -> (# Dijkstra.Node, Dijkstra.Node #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>, Inline: [0] -}
c9211dbd9a0e59ad481bebef418f4f9e
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
c8a389c1f9879645a3d784f13ef4f954
  $winsertLink ::
    Dijkstra.Graph
    -> Dijkstra.Cost -> Dijkstra.Network -> Dijkstra.Network
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Dijkstra.Graph)
                   (ww1 :: Dijkstra.Cost)
                   (w :: Dijkstra.Network) ->
                 case Dijkstra.compose ww of ww2 { Dijkstra.:->: ww3 ww4 ->
                 case Dijkstra.$wpoly_go1 @ Dijkstra.Link ww3 ww4 w of wild {
                   GHC.Base.Nothing
                   -> Dijkstra.$w$sgo8
                        @ Dijkstra.Link
                        ww3
                        ww4
                        (Dijkstra.Link ww ww1)
                        w
                   GHC.Base.Just ds -> w } }) -}
3a4971574733a35cdf275c74e394fecd
  $wisNextOD ::
    Dijkstra.Node
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Dijkstra.Node
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><S,U><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Dijkstra.Node)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Dijkstra.Node) ->
                 case GHC.Prim.==# ww1 ww2 of lwild {
                   DEFAULT -> GHC.Types.False 1# -> GHC.Classes.neInt ww ww3 }) -}
015e6654ba2da2a40ae3b639d4c14910
  $wpoly_go1 ::
    Dijkstra.Node
    -> Dijkstra.Node
    -> Data.Map.Internal.Map Dijkstra.OD a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U(U)><S,1*U>,
     Inline: [0] -}
93312d181a65a13934111ee28947c552
  $wpoly_go13 ::
    Dijkstra.Graph
    -> Dijkstra.Cost
    -> Data.Map.Internal.Map k Dijkstra.Link
    -> (# Dijkstra.Graph, Dijkstra.Cost #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>, Inline: [0] -}
c8f24788f5c21333be8dcddf4d55fb92
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Dijkstra.OD a
    -> [(Dijkstra.OD, a)]
    -> Data.Map.Internal.Map Dijkstra.OD a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
04c42a4444e64725467c29a9f44c47eb
  type Cost = GHC.Types.Double
3011a53e19a81efe738ac996767dd6f8
  data Graph
    = Edge Dijkstra.OD | Graph (Data.Vector.Vector Dijkstra.OD)
361a600031b2ec73e64cd355c3fd06ee
  data Link = Link Dijkstra.Graph Dijkstra.Cost
d9cb98238c2ef1514399389bf39a9a53
  type Network = Data.Map.Internal.Map Dijkstra.OD Dijkstra.Link
b8e971073b402ae8cb276c6d88838133
  type Node = GHC.Types.Int
efda809a1126d783a7fa26c274810661
  data OD = Dijkstra.Node :->: Dijkstra.Node
ad04f5a688ec961f56b6f2ad95acdf53
  type Path = Dijkstra.Network
3011a53e19a81efe738ac996767dd6f8
  compose :: Dijkstra.Graph -> Dijkstra.OD
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Dijkstra.Graph) ->
                 case ds of wild {
                   Dijkstra.Edge od -> od
                   Dijkstra.Graph v
                   -> case v of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      case GHC.Prim.>=# 0# ipv1 of lwild {
                        DEFAULT
                        -> case GHC.Prim.indexArray#
                                  @ Dijkstra.OD
                                  ipv2
                                  ipv of ds3 { Unit# ipv3 ->
                           case ipv3 of ww { Dijkstra.:->: ww1 ww2 ->
                           letrec {
                             $wfoldr1M_loop1 :: GHC.Types.SPEC
                                                -> Dijkstra.Node
                                                -> Dijkstra.Node
                                                -> GHC.Prim.Int#
                                                -> (# Dijkstra.Node, Dijkstra.Node #)
                               {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><S,U>, Inline: [0] -}
                             = \ (w :: GHC.Types.SPEC)
                                 (ww3 :: Dijkstra.Node)
                                 (ww4 :: Dijkstra.Node)
                                 (ww5 :: GHC.Prim.Int#) ->
                               case w of ds5 { DEFAULT ->
                               case GHC.Prim.>=# ww5 ipv1 of lwild1 {
                                 DEFAULT
                                 -> case GHC.Prim.indexArray#
                                           @ Dijkstra.OD
                                           ipv2
                                           (GHC.Prim.+# ipv ww5) of ds1 { Unit# ipv4 ->
                                    case ipv4 of ww6 { Dijkstra.:->: ww7 ww8 ->
                                    case $wfoldr1M_loop1
                                           GHC.Types.SPEC
                                           ww7
                                           ww8
                                           (GHC.Prim.+# ww5 1#) of ww9 { (#,#) ww10 ww11 ->
                                    case ww4 of wild1 { GHC.Types.I# x ->
                                    case ww10 of wild2 { GHC.Types.I# y ->
                                    case GHC.Prim.==# x y of lwild2 {
                                      DEFAULT
                                      -> case Dijkstra.compose2
                                         ret_ty (# Dijkstra.Node, Dijkstra.Node #)
                                         of {}
                                      1# -> (# ww3, ww11 #) } } } } } }
                                 1# -> (# ww3, ww4 #) } }
                           } in
                           case $wfoldr1M_loop1
                                  GHC.Types.SPEC
                                  ww1
                                  ww2
                                  1# of ww3 { (#,#) ww4 ww5 ->
                           Dijkstra.:->: ww4 ww5 } } }
                        1#
                        -> Dijkstra.compose1
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0] <Dijkstra.OD>_R) } } }) -}
00dad0917a41e81b45160b6e0d56c629
  compose1 :: Data.Vector.Fusion.Util.Id Dijkstra.OD
  {- Strictness: x -}
efda809a1126d783a7fa26c274810661
  compose2 :: Dijkstra.OD
  {- Strictness: x -}
e59c39e1ba35ddf0fa3776984a7dfb3d
  insertLink :: Dijkstra.Link -> Dijkstra.Network -> Dijkstra.Network
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.Link) (w1 :: Dijkstra.Network) ->
                 case w of ww { Dijkstra.Link ww1 ww2 ->
                 Dijkstra.$winsertLink ww1 ww2 w1 }) -}
ab2864aedd7219fe05a70a9c2984d4c3
  inverseNetwork :: Dijkstra.Network -> Dijkstra.Network
  {- Arity: 1,
     Unfolding: (Dijkstra.inverseNetwork_go13
                   (Data.Map.Internal.Tip @ Dijkstra.OD @ Dijkstra.Link)) -}
74255a57e734b2df988ae90be96ff755
  inverseNetwork_go13 ::
    Data.Map.Internal.Map Dijkstra.OD Dijkstra.Link
    -> Data.Map.Internal.Map Dijkstra.OD Dijkstra.Link
    -> Data.Map.Internal.Map Dijkstra.OD Dijkstra.Link
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c3b2f6b9afa7115a3c2740964898c3fb
  invertOD :: Dijkstra.OD -> Dijkstra.OD
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Dijkstra.OD) ->
                 case ds of wild { Dijkstra.:->: n1 n2 -> Dijkstra.:->: n2 n1 }) -}
a29207ec83088a5ad527cb0f2f07888a
  isNextGraph :: Dijkstra.Graph -> Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
257620313c9a2d04970e5209d996942c
  isNextLink :: Dijkstra.Link -> Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Dijkstra.Link) (ds1 :: Dijkstra.Link) ->
                 case ds of wild { Dijkstra.Link g1 ds2 ->
                 case ds1 of wild1 { Dijkstra.Link g2 ds3 ->
                 Dijkstra.isNextGraph g1 g2 } }) -}
83d45b5ce8f571185422e5ec47bcf744
  isNextOD :: Dijkstra.OD -> Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S)),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Dijkstra.OD) (w1 :: Dijkstra.OD) ->
                 case w of ww { Dijkstra.:->: ww1 ww2 ->
                 case ww2 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Dijkstra.:->: ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Dijkstra.$wisNextOD ww1 ww4 ww9 ww7 } } } }) -}
204458ce07dc53b0cceed0406b5cbdd5
  networkFromList ::
    [(Dijkstra.OD, Dijkstra.Cost)] -> Dijkstra.Network
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (odcs :: [(Dijkstra.OD, Dijkstra.Cost)]) ->
                 Dijkstra.$sfromList1
                   @ Dijkstra.Link
                   (GHC.Base.build
                      @ (Dijkstra.OD, Dijkstra.Link)
                      (\ @ b1
                         (c :: (Dijkstra.OD, Dijkstra.Link) -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (Dijkstra.OD, Dijkstra.Cost)
                         @ b1
                         (GHC.Base.mapFB
                            @ (Dijkstra.OD, Dijkstra.Link)
                            @ b1
                            @ (Dijkstra.OD, Dijkstra.Cost)
                            c
                            Dijkstra.networkFromList1)
                         n
                         odcs))) -}
fc4c647654688453a5b9c66108192304
  networkFromList1 ::
    (Dijkstra.OD, Dijkstra.Cost) -> (Dijkstra.OD, Dijkstra.Link)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Dijkstra.OD, Dijkstra.Cost)) ->
                 case ds of wild { (,) od c ->
                 (od, Dijkstra.Link (Dijkstra.Edge od) c) }) -}
bac2f5d10c3162459d779480f0d282c8
  nodeSet :: Dijkstra.Graph -> Data.Set.Internal.Set Dijkstra.Node
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Dijkstra.Graph) ->
                 case ds of wild {
                   Dijkstra.Edge ds1
                   -> case ds1 of wild1 { Dijkstra.:->: n1 n2 ->
                      Dijkstra.$sfromList
                        (GHC.Types.:
                           @ (GHC.Exts.Item [Dijkstra.Node])
                           n1 `cast` (Sub (Sym (GHC.Exts.D:R:Item[][0] <GHC.Types.Int>_N)))
                           (GHC.Types.:
                              @ (GHC.Exts.Item [Dijkstra.Node])
                              n2 `cast` (Sub (Sym (GHC.Exts.D:R:Item[][0] <GHC.Types.Int>_N)))
                              (GHC.Types.[] @ (GHC.Exts.Item [Dijkstra.Node]))))
                          `cast`
                        ([Sub (GHC.Exts.D:R:Item[][0] <GHC.Types.Int>_N)])_R }
                   Dijkstra.Graph v
                   -> case v of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      case GHC.Prim.<# 0# ipv1 of lwild {
                        DEFAULT
                        -> case Dijkstra.nodeSet1 ipv1
                           ret_ty (Data.Set.Internal.Set Dijkstra.Node)
                           of {}
                        1#
                        -> case GHC.Prim.indexArray#
                                  @ Dijkstra.OD
                                  ipv2
                                  ipv of ds3 { Unit# ipv3 ->
                           case ipv3 of wild1 { Dijkstra.:->: n1 ds1 ->
                           let {
                             z :: Data.Set.Internal.Set Dijkstra.Node
                             = Dijkstra.$sfromList
                                 (GHC.Types.:
                                    @ (GHC.Exts.Item (Data.Set.Internal.Set Dijkstra.Node))
                                    n1
                                      `cast`
                                    (Sub (Sym (Data.Set.Internal.D:R:ItemSet[0] <GHC.Types.Int>_N)))
                                    (GHC.Types.[]
                                       @ (GHC.Exts.Item (Data.Set.Internal.Set Dijkstra.Node))))
                                   `cast`
                                 ([Sub (Data.Set.Internal.D:R:ItemSet[0] <GHC.Types.Int>_N)])_R
                           } in
                           letrec {
                             $wfoldrM_loop :: GHC.Types.SPEC
                                              -> GHC.Prim.Int#
                                              -> Data.Vector.Fusion.Util.Id
                                                   (Data.Set.Internal.Set Dijkstra.Node)
                               {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                             = \ (w :: GHC.Types.SPEC) (ww :: GHC.Prim.Int#) ->
                               case w of ds5 { DEFAULT ->
                               case GHC.Prim.>=# ww ipv1 of lwild1 {
                                 DEFAULT
                                 -> case GHC.Prim.indexArray#
                                           @ Dijkstra.OD
                                           ipv2
                                           (GHC.Prim.+# ipv ww) of ds2 { Unit# ipv4 ->
                                    case ipv4 of wild2 { Dijkstra.:->: ds4 n2 ->
                                    case n2 of ww1 { GHC.Types.I# ww2 ->
                                    (Dijkstra.$w$sgo3
                                       ww1
                                       ww2
                                       ($wfoldrM_loop GHC.Types.SPEC (GHC.Prim.+# ww 1#))
                                         `cast`
                                       (Data.Vector.Fusion.Util.N:Id[0]
                                            <Data.Set.Internal.Set Dijkstra.Node>_R))
                                      `cast`
                                    (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                              <Data.Set.Internal.Set Dijkstra.Node>_R)) } } }
                                 1#
                                 -> z `cast`
                                    (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                              <Data.Set.Internal.Set Dijkstra.Node>_R)) } }
                           } in
                           ($wfoldrM_loop GHC.Types.SPEC 0#)
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0]
                                <Data.Set.Internal.Set Dijkstra.Node>_R) } } } } }) -}
94a9fe1cf51e39f3931f9f49b5d101be
  nodeSet1 :: GHC.Prim.Int# -> Dijkstra.OD
  {- Arity: 1, Strictness: <B,U>x -}
f05a811c443f6ed2b15f395dbea0d1e2
  shortestPath :: Dijkstra.Network -> Dijkstra.Path
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n_ :: Dijkstra.Network) ->
                 Dijkstra.shortestPath_go
                   n_
                   (Data.Map.Internal.Tip @ Dijkstra.OD @ Dijkstra.Link)) -}
e0f0cf8308fa7a82ef19921c92f39fc0
  shortestPath_go ::
    Dijkstra.Network -> Dijkstra.Path -> Dijkstra.Path
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
instance [incoherent] GHC.Classes.Eq [Dijkstra.Graph]
  = Dijkstra.$fEqGraph
instance [incoherent] GHC.Classes.Eq [Dijkstra.Link]
  = Dijkstra.$fEqLink
instance [incoherent] GHC.Classes.Eq [Dijkstra.OD]
  = Dijkstra.$fEqOD
instance [incoherent] GHC.Classes.Ord [Dijkstra.Graph]
  = Dijkstra.$fOrdGraph
instance [incoherent] GHC.Classes.Ord [Dijkstra.Link]
  = Dijkstra.$fOrdLink
instance [incoherent] GHC.Classes.Ord [Dijkstra.OD]
  = Dijkstra.$fOrdOD
instance [incoherent] GHC.Base.Semigroup [Dijkstra.Graph]
  = Dijkstra.$fSemigroupGraph
instance [incoherent] GHC.Base.Semigroup [Dijkstra.Link]
  = Dijkstra.$fSemigroupLink
instance [incoherent] GHC.Base.Semigroup [Dijkstra.OD]
  = Dijkstra.$fSemigroupOD
instance [incoherent] GHC.Show.Show [Dijkstra.Graph]
  = Dijkstra.$fShowGraph
instance [incoherent] GHC.Show.Show [Dijkstra.Link]
  = Dijkstra.$fShowLink
instance [incoherent] GHC.Show.Show [Dijkstra.OD]
  = Dijkstra.$fShowOD
"SPEC/Dijkstra fromList @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                           GHC.Types.Int)
  Data.Set.Internal.fromList @ GHC.Types.Int $dOrd
  = Dijkstra.$sfromList
"SPEC/Dijkstra fromList @ OD _" forall @ a
                                       ($dOrd :: GHC.Classes.Ord Dijkstra.OD)
  Data.Map.Strict.Internal.fromList @ Dijkstra.OD @ a $dOrd
  = Dijkstra.$sfromList1 @ a
"SPEC/Dijkstra intersection @ Node" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                Dijkstra.Node)
  Data.Set.Internal.intersection @ GHC.Types.Int $dOrd
  = Dijkstra.$sintersection
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

