
==================== FINAL INTERFACE ====================
2018-09-18 03:56:48.289024 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:Algorithm.FrankWolfe 8043
  interface hash: d25ebf338223bab21331d31a30543348
  ABI hash: 8742efd24f30fada4abaf66030dc2179
  export-list hash: f257f264f6283c33fd27521a0acb45a0
  orphan hash: 2e37214729a366f96a9df0c510e5bdc7
  flag hash: e6ab60b89cf9c5f49c3c8ab939cfb28f
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Algorithm.FrankWolfe.allOrNothing
  Algorithm.FrankWolfe.bpr
  Algorithm.FrankWolfe.diffLinkFlow
  Algorithm.FrankWolfe.frankWolfe
  Algorithm.FrankWolfe.makeLinkParameter
  Algorithm.FrankWolfe.makeNetwork
  Algorithm.FrankWolfe.sumTime
  Algorithm.FrankWolfe.Alpha
  Algorithm.FrankWolfe.Beta
  Algorithm.FrankWolfe.Capacity
  Algorithm.FrankWolfe.Flow
  Algorithm.FrankWolfe.LinkFlow
  Algorithm.FrankWolfe.LinkParameter
  Algorithm.FrankWolfe.Time
  Algorithm.FrankWolfe.Tolerance
  Algorithm.FrankWolfe.Trip
module dependencies: Algorithm.Search Link
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 transformers-0.5.5.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Debug.Trace 3062f7167e3b4d38ffd41be499676d90
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Float 99c69d365bb2607725a22530ce1ca4b4
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  containers-0.5.11.0:Data.Map.Internal 0150e210d0ae8df0f3a0669d5e32d8fa
import  -/  containers-0.5.11.0:Data.Map.Strict 40ac55e8c7db7b7f0f7e3d9769233909
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 372117aaabc2f1ff2039eaf324fdb5c6
import  -/  containers-0.5.11.0:Data.Set 7d3c64a641be4cacbcd8119445bab919
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  Algorithm.Search 46bd37c08a4bcfe716ead69e15b2a77f
  exports: 96dba2a6be3277b73e47eeab0511b51d
  searchMin 9e8320205788984e72c1bf2471da90be
import  -/  Link 36270363ad7f412211c4e09ae502a585
  exports: 105fd085ce7618b18ef07ad8e01e8736
  Edge 02d49d0a61276ead21150208e0b4e538
  Graph c101705c23622eac7459535f8b22a252
  Link bace354c93598e7a32ef534843955216
  Network 65194796d463e797e41768c04351e9f1
  OD 00856cf573b6760f545cb5f69dedf509
  shortestPath 43e4f61570793fd11d0eb0340dfb6411
import  -/  vector-0.12.0.1:Data.Vector a3a00743437ee8354b7b63f8638591df
bd34f860f7a061a48dd4933b8b6574ff
  $sunionWith ::
    (a -> a -> a)
    -> Data.Map.Internal.Map Link.OD a
    -> Data.Map.Internal.Map Link.OD a
    -> Data.Map.Internal.Map Link.OD a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
a4ebd20d814f6a13d09d1fd809f99759
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Algorithm.FrankWolfe.$trModule3
                   Algorithm.FrankWolfe.$trModule1) -}
c7f1ca60afa4bc6abd3cca9541b9161a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.FrankWolfe.$trModule2) -}
5b1ff6aed451dbe77aee54559278fe21
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Algorithm.FrankWolfe"#) -}
0c839025ef818bd39a3527627a5d360f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.FrankWolfe.$trModule4) -}
307194fc0de504256444eb37e5f2b22c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
60a09e17155b185bcddd066a9fbe95ab
  $w$sgo1 ::
    (a1 -> a1 -> a1)
    -> Link.Node
    -> Link.Node
    -> a1
    -> Data.Map.Internal.Map Link.OD a1
    -> Data.Map.Internal.Map Link.OD a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
15092cb13a08e0e4a249c92e2fe6f47f
  $w$sgo13 ::
    Link.Node
    -> Link.Node
    -> Data.Map.Internal.Map Link.OD a1
    -> (# Data.Map.Internal.Map Link.OD a1, GHC.Base.Maybe a1,
          Data.Map.Internal.Map Link.OD a1 #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U)><S,1*U>, Inline: [0] -}
5a50ee32560591c091c2e604cdbdeda4
  $w$sgo2 ::
    (a1 -> a1 -> a1)
    -> Link.Node
    -> Link.Node
    -> a1
    -> Data.Map.Internal.Map Link.OD a1
    -> Data.Map.Internal.Map Link.OD a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
a64b8af1e4ff6c89ecf9185131290821
  $w$sgo8 ::
    Link.Node
    -> Link.Node
    -> a1
    -> Data.Map.Internal.Map Link.OD a1
    -> Data.Map.Internal.Map Link.OD a1
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
f19a4e7978a6d74ebc43c3f1ac614670
  $wfrankWolfe ::
    GHC.Prim.Double#
    -> Algorithm.FrankWolfe.Trip
    -> Algorithm.FrankWolfe.LinkParameter
    -> Data.Map.Internal.Map Link.OD Algorithm.Search.X
  {- Arity: 3, Strictness: <S,U><S,U><L,U>, Inline: [0] -}
ee4f478eecc5b8e8be6ebfcbca9f273d
  $wpoly_go1 ::
    GHC.Prim.Int# -> Link.Node -> Data.Map.Internal.Map Link.OD a -> a
  {- Arity: 3, Strictness: <S,U><L,U(U)><S,1*U>, Inline: [0] -}
2dba9f85ad09d4cb988ad9a1e50080f4
  $wpoly_go13 ::
    GHC.Prim.Double#
    -> Data.Map.Internal.Map k Algorithm.FrankWolfe.Flow
    -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: [0] -}
d5aacce572f2a6b91a0f6a3d9130255e
  $wsumTime ::
    Algorithm.FrankWolfe.LinkParameter
    -> Algorithm.FrankWolfe.LinkFlow -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Algorithm.FrankWolfe.LinkParameter)
                   (w1 :: Algorithm.FrankWolfe.LinkFlow) ->
                 letrec {
                   $wgo13 :: GHC.Prim.Double#
                             -> Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Time
                             -> GHC.Prim.Double#
                     {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
                   = \ (ww :: GHC.Prim.Double#)
                       (w2 :: Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Time) ->
                     case w2 of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> case kx of ww1 { Link.:->: ww2 ww3 ->
                          case $wgo13 ww r of ww4 { DEFAULT ->
                          case ww2 of ww5 { GHC.Types.I# ww6 ->
                          case Algorithm.FrankWolfe.$wpoly_go1
                                 @ (Algorithm.FrankWolfe.Time, Algorithm.FrankWolfe.Capacity,
                                    Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                                 ww6
                                 ww3
                                 w of wild1 { (,,,) t c a b ->
                          case t of wild2 { GHC.Types.D# x1 ->
                          case x of wild3 { GHC.Types.D# y ->
                          case a of wild4 { GHC.Types.D# x2 ->
                          case b of wild5 { GHC.Types.D# x3 ->
                          case GHC.Prim./## x2 (GHC.Prim.+## x3 1.0##) of wild6 { DEFAULT ->
                          case c of wild7 { GHC.Types.D# y1 ->
                          case GHC.Prim./## y y1 of wild8 { DEFAULT ->
                          $wgo13
                            (GHC.Prim.+##
                               ww4
                               (GHC.Prim.*##
                                  (GHC.Prim.*## x1 y)
                                  (GHC.Prim.+##
                                     1.0##
                                     (GHC.Prim.*## wild6 (GHC.Prim.**## wild8 x3)))))
                            l } } } } } } } } } } }
                       Data.Map.Internal.Tip -> ww }
                 } in
                 $wgo13 0.0## w1) -}
082f88928724a4ad6b3507583c3bd7c3
  type Alpha = GHC.Types.Double
d3bc5c26163417f847a90b85a60b6910
  type Beta = GHC.Types.Double
c3ac83b627a7e68d84cef2ae3890928b
  type Capacity = GHC.Types.Double
3c36da93e88aa464be7e990702bdb2dd
  type Flow = GHC.Types.Double
4b8bcf1902c96753cd1a085d7d4a1b31
  type LinkFlow = Algorithm.FrankWolfe.Trip
c3557e7bf6efae4115961c8c7c69c160
  type LinkParameter =
    Data.Map.Internal.Map
      Link.OD
      (Algorithm.FrankWolfe.Time, Algorithm.FrankWolfe.Capacity,
       Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
37df44864aeb84adccdb4f7750b932a5
  type Time = GHC.Types.Double
161b3e00c159df95e4cfadbdb8471bb5
  type Tolerance = GHC.Types.Double
87a5cb6f8385e5a8f6e1926c97659938
  type Trip = Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Flow
1b239a227465e99bd50dc38fcd413a67
  allOrNothing ::
    Algorithm.FrankWolfe.Trip
    -> Link.Network -> Algorithm.FrankWolfe.LinkFlow
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (t :: Algorithm.FrankWolfe.Trip)
                   (n :: Link.Network) ->
                 let {
                   p :: Link.Path
                   = Link.shortestPath_go
                       n
                       (Data.Map.Internal.Tip @ Link.OD @ Link.Link)
                 } in
                 letrec {
                   go :: Algorithm.FrankWolfe.Trip
                         -> Algorithm.FrankWolfe.LinkFlow -> Algorithm.FrankWolfe.LinkFlow
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: Algorithm.FrankWolfe.Trip)
                       (lf :: Algorithm.FrankWolfe.LinkFlow) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt ds1 ds2 ds3 ds4
                       -> case Data.Map.Internal.minViewSure
                                 @ Link.OD
                                 @ Algorithm.FrankWolfe.Flow
                                 ds1
                                 ds2
                                 ds3
                                 ds4 of wild1 { Data.Map.Internal.MinView km xm t1 ->
                          case km of ww { Link.:->: ww1 ww2 ->
                          case ww1 of ww3 { GHC.Types.I# ww4 ->
                          case Algorithm.FrankWolfe.$wpoly_go1
                                 @ Link.Link
                                 ww4
                                 ww2
                                 p of wild2 { Link.Link ds7 ds8 ->
                          case ds7 of wild3 {
                            Link.Edge od
                            -> case od of ww5 { Link.:->: ww6 ww7 ->
                               go
                                 t1
                                 (Algorithm.FrankWolfe.$w$sgo1
                                    @ GHC.Types.Double
                                    GHC.Float.plusDouble
                                    ww6
                                    ww7
                                    xm
                                    lf) }
                            Link.Graph s
                            -> case s of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                               letrec {
                                 $wfoldrM_loop :: GHC.Types.SPEC
                                                  -> GHC.Prim.Int#
                                                  -> Data.Vector.Fusion.Util.Id
                                                       (Data.Map.Internal.Map
                                                          Link.OD Algorithm.FrankWolfe.Flow)
                                   {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                                 = \ (w :: GHC.Types.SPEC) (ww5 :: GHC.Prim.Int#) ->
                                   case w of ds5 { DEFAULT ->
                                   case GHC.Prim.>=# ww5 ipv1 of lwild {
                                     DEFAULT
                                     -> case GHC.Prim.indexArray#
                                               @ Link.OD
                                               ipv2
                                               (GHC.Prim.+# ipv ww5) of ds9 { Unit# ipv3 ->
                                        case ipv3 of ww6 { Link.:->: ww7 ww8 ->
                                        (Algorithm.FrankWolfe.$w$sgo1
                                           @ GHC.Types.Double
                                           GHC.Float.plusDouble
                                           ww7
                                           ww8
                                           xm
                                           ($wfoldrM_loop GHC.Types.SPEC (GHC.Prim.+# ww5 1#))
                                             `cast`
                                           (Data.Vector.Fusion.Util.N:Id[0]
                                                <Data.Map.Internal.Map
                                                   Link.OD Algorithm.FrankWolfe.Flow>_R))
                                          `cast`
                                        (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                  <Data.Map.Internal.Map
                                                     Link.OD Algorithm.FrankWolfe.Flow>_R)) } }
                                     1#
                                     -> lf
                                          `cast`
                                        (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                  <Data.Map.Internal.Map
                                                     Link.OD Algorithm.FrankWolfe.Flow>_R)) } }
                               } in
                               go
                                 t1
                                 ($wfoldrM_loop GHC.Types.SPEC 0#)
                                   `cast`
                                 (Data.Vector.Fusion.Util.N:Id[0]
                                      <Data.Map.Internal.Map
                                         Link.OD Algorithm.FrankWolfe.Flow>_R) } } } } } }
                       Data.Map.Internal.Tip -> lf }
                 } in
                 go
                   t
                   (Data.Map.Internal.Tip @ Link.OD @ Algorithm.FrankWolfe.Flow)) -}
6fe54948f567959e35f4be16d7eba5b5
  bpr ::
    Algorithm.FrankWolfe.LinkParameter
    -> Algorithm.FrankWolfe.LinkFlow -> Link.Network
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (lp :: Algorithm.FrankWolfe.LinkParameter)
                   (_lf :: Algorithm.FrankWolfe.LinkFlow) ->
                 letrec {
                   go :: Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Capacity
                         -> Data.Map.Internal.Map Link.OD Link.Link
                         -> Data.Map.Internal.Map Link.OD Link.Link
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds :: Data.Map.Internal.Map
                                Link.OD Algorithm.FrankWolfe.Capacity)
                       (n :: Data.Map.Internal.Map Link.OD Link.Link) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt ds1 ds2 ds3 ds4
                       -> case Data.Map.Internal.minViewSure
                                 @ Link.OD
                                 @ Algorithm.FrankWolfe.Capacity
                                 ds1
                                 ds2
                                 ds3
                                 ds4 of wild1 { Data.Map.Internal.MinView km xm t ->
                          case km of ww { Link.:->: ww1 ww2 ->
                          go
                            t
                            (Algorithm.FrankWolfe.$w$sgo8
                               @ Link.Link
                               ww1
                               ww2
                               (Link.Link
                                  (Link.Edge ww)
                                  (case ww1 of ww3 { GHC.Types.I# ww4 ->
                                   case Algorithm.FrankWolfe.$wpoly_go1
                                          @ (Algorithm.FrankWolfe.Time,
                                             Algorithm.FrankWolfe.Capacity,
                                             Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                                          ww4
                                          ww2
                                          lp of wild2 { (,,,) t1 c a b ->
                                   case t1 of wild3 { GHC.Types.D# x ->
                                   case a of wild4 { GHC.Types.D# x1 ->
                                   case xm of wild5 { GHC.Types.D# x2 ->
                                   case c of wild6 { GHC.Types.D# y ->
                                   case GHC.Prim./## x2 y of wild7 { DEFAULT ->
                                   case b of wild8 { GHC.Types.D# y1 ->
                                   GHC.Types.D#
                                     (GHC.Prim.*##
                                        x
                                        (GHC.Prim.+##
                                           1.0##
                                           (GHC.Prim.*##
                                              x1
                                              (GHC.Prim.**## wild7 y1)))) } } } } } } } }))
                               n) } }
                       Data.Map.Internal.Tip -> n }
                 } in
                 go
                   _lf
                   (Data.Map.Strict.Internal.mapWithKey
                      @ Link.OD
                      @ (Link.Cost, Algorithm.FrankWolfe.Capacity,
                         Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                      @ Link.Link
                      Algorithm.FrankWolfe.bpr1
                      lp)) -}
c676e681a5f11407f4f989fd58157f1a
  bpr1 ::
    Link.OD
    -> (Link.Cost, Algorithm.FrankWolfe.Capacity,
        Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
    -> Link.Link
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (od :: Link.OD)
                   (ds :: (Link.Cost, Algorithm.FrankWolfe.Capacity,
                           Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)) ->
                 case ds of wild { (,,,) t c a b -> Link.Link (Link.Edge od) t }) -}
29797be9c58054c759c408292c0edf3a
  diffLinkFlow ::
    Algorithm.FrankWolfe.LinkFlow
    -> Algorithm.FrankWolfe.LinkFlow -> Algorithm.FrankWolfe.LinkFlow
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (lf1 :: Algorithm.FrankWolfe.LinkFlow)
                   (lf2 :: Algorithm.FrankWolfe.LinkFlow) ->
                 Algorithm.FrankWolfe.$sunionWith
                   @ GHC.Types.Double
                   GHC.Float.plusDouble
                   lf1
                   (Algorithm.FrankWolfe.diffLinkFlow_go8 lf2)) -}
05d43782f52efe9d5db641163027e345
  diffLinkFlow_go8 ::
    Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Flow
    -> Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Flow
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
b63c47f600ba9e43d002d26ea89aa87f
  frankWolfe ::
    Algorithm.Search.Tolerance
    -> Algorithm.FrankWolfe.Trip
    -> Algorithm.FrankWolfe.LinkParameter
    -> Data.Map.Internal.Map Link.OD Algorithm.Search.X
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Algorithm.Search.Tolerance)
                   (w1 :: Algorithm.FrankWolfe.Trip)
                   (w2 :: Algorithm.FrankWolfe.LinkParameter) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 Algorithm.FrankWolfe.$wfrankWolfe ww1 w1 w2 }) -}
c073258f96f6fa94a42f645a172e484d
  makeLinkParameter ::
    Algorithm.FrankWolfe.Capacity
    -> Algorithm.FrankWolfe.Alpha
    -> Algorithm.FrankWolfe.Beta
    -> Link.Network
    -> Algorithm.FrankWolfe.LinkParameter
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ (c :: Algorithm.FrankWolfe.Capacity)
                   (a :: Algorithm.FrankWolfe.Alpha)
                   (b :: Algorithm.FrankWolfe.Beta)
                   (eta :: Data.Map.Internal.Map Link.OD Link.Link) ->
                 Data.Map.Strict.Internal.mapWithKey
                   @ Link.OD
                   @ Link.Link
                   @ (Link.Cost, Algorithm.FrankWolfe.Capacity,
                      Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                   (\ (od :: Link.OD) (ds :: Link.Link)[OneShot] ->
                    case ds of wild { Link.Link ds1 t -> (t, c, a, b) })
                   eta) -}
d22293f2a3c161c3bf8804df5a3c4ad0
  makeNetwork :: Algorithm.FrankWolfe.LinkParameter -> Link.Network
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.Map.Strict.Internal.mapWithKey
                   @ Link.OD
                   @ (Link.Cost, Algorithm.FrankWolfe.Capacity,
                      Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                   @ Link.Link
                   Algorithm.FrankWolfe.bpr1) -}
e59de8dc22248f8c43ca78065d9ceb5b
  sumTime ::
    Algorithm.FrankWolfe.LinkParameter
    -> Algorithm.FrankWolfe.LinkFlow -> Algorithm.FrankWolfe.Time
  {- Arity: 2, Strictness: <L,U><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.FrankWolfe.LinkParameter)
                   (w1 :: Algorithm.FrankWolfe.LinkFlow) ->
                 case Algorithm.FrankWolfe.$wsumTime w w1 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
"SPEC/Algorithm.FrankWolfe unionWith @ OD _" [orphan] forall @ a
                                                             ($dOrd :: GHC.Classes.Ord Link.OD)
  Data.Map.Strict.Internal.unionWith @ Link.OD @ a $dOrd
  = Algorithm.FrankWolfe.$sunionWith @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

