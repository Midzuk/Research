
==================== FINAL INTERFACE ====================
2018-09-16 04:30:46.1149839 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:CsvDecode.LinkCsvDecode 8043
  interface hash: c01f055d385fea1f01d9bea5c1ff6b35
  ABI hash: 03c183cd58f4fffd25d992e70d4073fd
  export-list hash: 00e7c41ce781e5b7859853fdabafeb74
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: b5dfa34285e56b849576a82de3050450
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  CsvDecode.LinkCsvDecode.decodeLinkCsv
  CsvDecode.LinkCsvDecode.Bridge
  CsvDecode.LinkCsvDecode.Dest
  CsvDecode.LinkCsvDecode.Dist
  CsvDecode.LinkCsvDecode.Highway
  CsvDecode.LinkCsvDecode.LinkCsv{CsvDecode.LinkCsvDecode.LinkCsv}
  CsvDecode.LinkCsvDecode.Node
  CsvDecode.LinkCsvDecode.Oneway
  CsvDecode.LinkCsvDecode.Org
  CsvDecode.LinkCsvDecode.Width
module dependencies:
package dependencies: Only-0.1 Win32-2.6.1.0 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cassava-0.5.1.0 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      primitive-0.6.3.0 scientific-0.3.6.2 text-1.2.3.0 text-short-0.1.2
                      time-1.8.0.2 transformers-0.5.5.0 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.3.0:Data.Text
                         text-1.2.3.0:Data.Text.Lazy
                         text-short-0.1.2:Data.Text.Short.Internal
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 917cb7ca74324934e13727e32d71d117
import  -/  base-4.11.1.0:Data.Functor 920435f8ff93fffe1aec86c79e4fd45f
import  -/  base-4.11.1.0:Data.Maybe 1f53643457b97538ca6f4ca7328e8b30
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.IO a3e5ac541c68a1abc106e1f0d10319a4
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 238696209da3e02ce3cd43ceb4046035
import  -/  cassava-0.5.1.0:Data.Csv 4a8a257da7b82acf18ea86eea1c587e8
import  -/  cassava-0.5.1.0:Data.Csv.Conversion da8ea50b3416c4f778aa71d7173c9b9a
import  -/  cassava-0.5.1.0:Data.Csv.Encoding cee893990c3de1dcaf70c384c5011766
import  -/  cassava-0.5.1.0:Data.Csv.Types 60e239de4036f80d78a883f7998c8d5b
import  -/  directory-1.3.1.5:System.Directory 4575206d001b0d3464a7b9287cf2e676
import  -/  directory-1.3.1.5:System.Directory.Internal.Common d74c803a65a464959a3007150832f056
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  text-1.2.3.0:Data.Text c0e21f1d8acb5250a7f89b5dc0e8964e
import  -/  text-1.2.3.0:Data.Text.Internal e5cede27dcb0356e6560ff0df60f1395
import  -/  vector-0.12.0.1:Data.Vector 136e29dd913b307387c1c07459bacd27
0649f6962bd2070ff213562c3dcc2bf6
  $fFromNamedRecordLinkCsv ::
    Data.Csv.Conversion.FromNamedRecord CsvDecode.LinkCsvDecode.LinkCsv
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                CsvDecode.LinkCsvDecode.$fFromNamedRecordLinkCsv_$cparseNamedRecord
                  `cast`
                (Sym (Data.Csv.Conversion.N:FromNamedRecord[0]
                          <CsvDecode.LinkCsvDecode.LinkCsv>_N)) -}
0649f6962bd2070ff213562c3dcc2bf6
  $fFromNamedRecordLinkCsv_$cparseNamedRecord ::
    Data.Csv.Types.NamedRecord
    -> Data.Csv.Conversion.Parser CsvDecode.LinkCsvDecode.LinkCsv
  {- Arity: 1, Strictness: <L,U> -}
0649f6962bd2070ff213562c3dcc2bf6
  $fShowLinkCsv :: GHC.Show.Show CsvDecode.LinkCsvDecode.LinkCsv
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ CsvDecode.LinkCsvDecode.LinkCsv
                  CsvDecode.LinkCsvDecode.$fShowLinkCsv_$cshowsPrec
                  CsvDecode.LinkCsvDecode.$fShowLinkCsv_$cshow
                  CsvDecode.LinkCsvDecode.$fShowLinkCsv_$cshowList -}
0649f6962bd2070ff213562c3dcc2bf6
  $fShowLinkCsv1 :: CsvDecode.LinkCsvDecode.LinkCsv -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: CsvDecode.LinkCsvDecode.LinkCsv) ->
                 case w of ww { CsvDecode.LinkCsvDecode.LinkCsv ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 CsvDecode.LinkCsvDecode.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7 }) -}
cea7b23c3290646a8012d99d428d83a8
  $fShowLinkCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkCsv "#) -}
ffb103c9bd32f924ad30156357b0839a
  $fShowLinkCsv3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
bddfb35b3d7e1e755df2721449ea91de
  $fShowLinkCsv4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
0649f6962bd2070ff213562c3dcc2bf6
  $fShowLinkCsv_$cshow ::
    CsvDecode.LinkCsvDecode.LinkCsv -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: CsvDecode.LinkCsvDecode.LinkCsv) ->
                 CsvDecode.LinkCsvDecode.$fShowLinkCsv_$cshowsPrec
                   CsvDecode.LinkCsvDecode.$fShowLinkCsv4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
0649f6962bd2070ff213562c3dcc2bf6
  $fShowLinkCsv_$cshowList ::
    [CsvDecode.LinkCsvDecode.LinkCsv] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [CsvDecode.LinkCsvDecode.LinkCsv])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ CsvDecode.LinkCsvDecode.LinkCsv
                   CsvDecode.LinkCsvDecode.$fShowLinkCsv1
                   ls
                   s) -}
0649f6962bd2070ff213562c3dcc2bf6
  $fShowLinkCsv_$cshowsPrec ::
    GHC.Types.Int -> CsvDecode.LinkCsvDecode.LinkCsv -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: CsvDecode.LinkCsvDecode.LinkCsv) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { CsvDecode.LinkCsvDecode.LinkCsv ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 CsvDecode.LinkCsvDecode.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9 } }) -}
6ce7117fe44324351f0920fab09a1b21
  $tc'LinkCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11047364540363857955##
                   12402300809274579640##
                   CsvDecode.LinkCsvDecode.$trModule
                   CsvDecode.LinkCsvDecode.$tc'LinkCsv2
                   0#
                   CsvDecode.LinkCsvDecode.$tc'LinkCsv1) -}
f08f086575c4a6ffe144ec083488d76d
  $tc'LinkCsv1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9f7ba493b8578ea809eb0cfc377fddf4
  $tc'LinkCsv2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   CsvDecode.LinkCsvDecode.$tc'LinkCsv3) -}
11b60dd8e6bef2c894b99bca96643b53
  $tc'LinkCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LinkCsv"#) -}
e061e5102ae1fb85d29a7b24e2522ca1
  $tcLinkCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1201772188942932761##
                   16075467098948795821##
                   CsvDecode.LinkCsvDecode.$trModule
                   CsvDecode.LinkCsvDecode.$tcLinkCsv1
                   0#
                   GHC.Types.krep$*) -}
495a360526d0f4814ff01001127c46ec
  $tcLinkCsv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   CsvDecode.LinkCsvDecode.$tcLinkCsv2) -}
3ff95d3cc49590dd0a0f539b3ac2167c
  $tcLinkCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkCsv"#) -}
b18ce05a188d7ce53598c5e31c1604cf
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CsvDecode.LinkCsvDecode.$trModule3
                   CsvDecode.LinkCsvDecode.$trModule1) -}
2ecab35025a7d95b15792bdef1b055b0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   CsvDecode.LinkCsvDecode.$trModule2) -}
10e49a2953573b5564be0053826c3d9f
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("CsvDecode.LinkCsvDecode"#) -}
bf26cceeac665c5ede276bd0013c8fc8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   CsvDecode.LinkCsvDecode.$trModule4) -}
6edb9ac32fd641ee93167c8fcb70bacd
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
1196dedfee6eaf50142a1216e1d7cb90
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> CsvDecode.LinkCsvDecode.Org
    -> CsvDecode.LinkCsvDecode.Dest
    -> CsvDecode.LinkCsvDecode.Dist
    -> CsvDecode.LinkCsvDecode.Highway
    -> CsvDecode.LinkCsvDecode.Oneway
    -> CsvDecode.LinkCsvDecode.Bridge
    -> CsvDecode.LinkCsvDecode.Width
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U)><L,U(U)><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: CsvDecode.LinkCsvDecode.Org)
                   (ww2 :: CsvDecode.LinkCsvDecode.Dest)
                   (ww3 :: CsvDecode.LinkCsvDecode.Dist)
                   (ww4 :: CsvDecode.LinkCsvDecode.Highway)
                   (ww5 :: CsvDecode.LinkCsvDecode.Oneway)
                   (ww6 :: CsvDecode.LinkCsvDecode.Bridge)
                   (ww7 :: CsvDecode.LinkCsvDecode.Width) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww8 { GHC.Types.D# ww9 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       CsvDecode.LinkCsvDecode.$fShowLinkCsv3
                       ww9 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       CsvDecode.LinkCsvDecode.$fShowLinkCsv3
                       ww4
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       CsvDecode.LinkCsvDecode.$fShowLinkCsv3
                       ww5
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       CsvDecode.LinkCsvDecode.$fShowLinkCsv3
                       ww6
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       CsvDecode.LinkCsvDecode.$fShowLinkCsv3
                       ww7
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       CsvDecode.LinkCsvDecode.$fShowLinkCsv2
                       (case ww1 of ww8 { GHC.Types.I# ww9 ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               ww9
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case ww2 of ww10 { GHC.Types.I# ww11 ->
                                   case GHC.Show.$wshowSignedInt
                                          11#
                                          ww11
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (f (GHC.Types.:
                                                   @ GHC.Types.Char
                                                   GHC.Show.showSpace1
                                                   (f1
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.showSpace1
                                                         (f2
                                                            (GHC.Types.:
                                                               @ GHC.Types.Char
                                                               GHC.Show.showSpace1
                                                               (f3
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     GHC.Show.showSpace1
                                                                     (g x)))))))))) of ww12 { (#,#) ww13 ww14 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww13
                                     ww14 } })) of ww10 { (#,#) ww11 ww12 ->
                        GHC.Types.: @ GHC.Types.Char ww11 ww12 } })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
49c6b54d5ee6dd910c9b7e70ecfb2835
  type Bridge = GHC.Base.Maybe Data.Text.Internal.Text
bbc004faa1f9fd710fa6468e2c608312
  type Dest = CsvDecode.LinkCsvDecode.Node
c7b325be166c00c6e5064899faf4914a
  type Dist = GHC.Types.Double
8d64b56d9d5878e7967fab4c908afbaa
  type Highway = GHC.Base.Maybe Data.Text.Internal.Text
0649f6962bd2070ff213562c3dcc2bf6
  data LinkCsv
    = LinkCsv CsvDecode.LinkCsvDecode.Org
              CsvDecode.LinkCsvDecode.Dest
              CsvDecode.LinkCsvDecode.Dist
              CsvDecode.LinkCsvDecode.Highway
              CsvDecode.LinkCsvDecode.Oneway
              CsvDecode.LinkCsvDecode.Bridge
              CsvDecode.LinkCsvDecode.Width
5c42c879782a79f5c116f37980220675
  type Node = GHC.Types.Int
f9fee8a912eb3ba438edd6dfec6d52c7
  type Oneway = GHC.Base.Maybe Data.Text.Internal.Text
00edba8d0438c7c114d21811511e2e54
  type Org = CsvDecode.LinkCsvDecode.Node
a47e1d4412b7712ac35d9e50672e5876
  type Width = GHC.Base.Maybe Data.Text.Internal.Text
974cadd7cae246ccccb7b1cd5d97303c
  decodeLinkCsv ::
    GHC.IO.FilePath
    -> GHC.Types.IO
         (Data.Vector.Vector CsvDecode.LinkCsvDecode.LinkCsv)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                CsvDecode.LinkCsvDecode.decodeLinkCsv1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Vector.Vector CsvDecode.LinkCsvDecode.LinkCsv>_R)) -}
01b5a79a3c033075ffa0a872f9f0bcf9
  decodeLinkCsv1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector CsvDecode.LinkCsvDecode.LinkCsv #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.IO.Error.modifyIOError1
                        @ GHC.Base.String
                        System.Directory.Internal.Common.getCurrentDirectory6
                        System.Directory.Internal.Common.getCurrentDirectory2
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ipv1
                           (GHC.CString.unpackAppendCString#
                              CsvDecode.LinkCsvDecode.decodeLinkCsv3
                              fp))
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    case Data.Csv.Encoding.$wdecodeByNameWith
                           @ CsvDecode.LinkCsvDecode.LinkCsv
                           CsvDecode.LinkCsvDecode.$fFromNamedRecordLinkCsv_$cparseNamedRecord
                             `cast`
                           (Sym (Data.Csv.Conversion.N:FromNamedRecord[0]
                                     <CsvDecode.LinkCsvDecode.LinkCsv>_N))
                           44##
                           ipv5 of wild {
                      Data.Either.Left ipv6
                      -> case CsvDecode.LinkCsvDecode.decodeLinkCsv2
                         ret_ty (Data.Vector.Vector CsvDecode.LinkCsvDecode.LinkCsv)
                         of {}
                      Data.Either.Right ds
                      -> case ds of wild1 { (,) ds4 ls -> ls } } #) } } }) -}
7a34ea66ca33b904fcb11ee0d3dc4109
  decodeLinkCsv2 ::
    (Data.Vector.Vector CsvDecode.LinkCsvDecode.LinkCsv)
  {- Strictness: x -}
1bf31125eca071679bf7b8ae5bf9e2fc
  decodeLinkCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/data/"#) -}
instance Data.Csv.Conversion.FromNamedRecord [CsvDecode.LinkCsvDecode.LinkCsv]
  = CsvDecode.LinkCsvDecode.$fFromNamedRecordLinkCsv
instance GHC.Show.Show [CsvDecode.LinkCsvDecode.LinkCsv]
  = CsvDecode.LinkCsvDecode.$fShowLinkCsv
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

