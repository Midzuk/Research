
==================== FINAL INTERFACE ====================
2018-09-15 08:03:42.4204443 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:Csv 8043
  interface hash: 62005d869b6b1cb1fa6e513c8517f60e
  ABI hash: 80c9ca728969166197077c58faf47785
  export-list hash: 121bb5c42347c6c976a399410802febe
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0ccc1c6121a99a7d5d6f3a567cd15571
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Csv.g
  Csv.Destination
  Csv.LinkCsv{Csv.LinkCsv}
  Csv.Origin
  Csv.TripCsv{Csv.TripCsv}
module dependencies: Dijkstra FrankWolfe Search
package dependencies: Only-0.1 Win32-2.6.1.0 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cassava-0.5.1.0 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      primitive-0.6.3.0 scientific-0.3.6.2 text-1.2.3.0 text-short-0.1.2
                      time-1.8.0.2 transformers-0.5.5.0 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.3.0:Data.Text
                         text-1.2.3.0:Data.Text.Lazy
                         text-short-0.1.2:Data.Text.Short.Internal
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 917cb7ca74324934e13727e32d71d117
import  -/  base-4.11.1.0:Data.Functor 920435f8ff93fffe1aec86c79e4fd45f
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.IO a3e5ac541c68a1abc106e1f0d10319a4
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 238696209da3e02ce3cd43ceb4046035
import  -/  cassava-0.5.1.0:Data.Csv 4a8a257da7b82acf18ea86eea1c587e8
import  -/  cassava-0.5.1.0:Data.Csv.Conversion da8ea50b3416c4f778aa71d7173c9b9a
import  -/  cassava-0.5.1.0:Data.Csv.Encoding cee893990c3de1dcaf70c384c5011766
import  -/  cassava-0.5.1.0:Data.Csv.Types 60e239de4036f80d78a883f7998c8d5b
import  -/  containers-0.5.11.0:Data.Map.Internal a2314ee57e16ff1fe3af08500b455e81
import  -/  containers-0.5.11.0:Data.Map.Strict ea9cec0dc7e4353594a3f7d520e82c83
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 9061dd54223c7e14ff6837ade55c2970
import  -/  directory-1.3.1.5:System.Directory 4575206d001b0d3464a7b9287cf2e676
import  -/  directory-1.3.1.5:System.Directory.Internal.Common d74c803a65a464959a3007150832f056
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Dijkstra 5b4529a292efc43362de61a8e02f9544
  exports: b4be0d883e410f6b06a8eaf5eb4efc5f
  :->: 271ece3054b27c79431f27510c1b5ddf
  Node b8e971073b402ae8cb276c6d88838133
import  -/  FrankWolfe cc104347f1e0bbe832cc3c7b824d7fd6
  exports: df2cfd328023378798a501c3cf94dc05
  Alpha 4e15e2d26940a12e9589f5133806f114
  Beta c28453ef4b7754a6710ad8bc530d7eb4
  Capacity c5b7ebe49d49938872025d00ab830ac8
  Time 58d8259f0c734ea2f00b609b608bde89
  Trip 93371067eb07b6d21305d3a27cf5d932
import  -/  text-1.2.3.0:Data.Text.IO 586bae49f0bd98629745296e7581eadc
import  -/  vector-0.12.0.1:Data.Vector 136e29dd913b307387c1c07459bacd27
91d24f30a9a789fce800939450361a08
  $fFromNamedRecordLinkCsv ::
    Data.Csv.Conversion.FromNamedRecord Csv.LinkCsv
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Csv.$fFromNamedRecordLinkCsv_$cparseNamedRecord
                  `cast`
                (Sym (Data.Csv.Conversion.N:FromNamedRecord[0] <Csv.LinkCsv>_N)) -}
91d24f30a9a789fce800939450361a08
  $fFromNamedRecordLinkCsv_$cparseNamedRecord ::
    Data.Csv.Types.NamedRecord
    -> Data.Csv.Conversion.Parser Csv.LinkCsv
  {- Arity: 1, Strictness: <L,U> -}
91d24f30a9a789fce800939450361a08
  $fShowLinkCsv :: GHC.Show.Show Csv.LinkCsv
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Csv.LinkCsv
                  Csv.$fShowLinkCsv_$cshowsPrec
                  Csv.$fShowLinkCsv_$cshow
                  Csv.$fShowLinkCsv_$cshowList -}
91d24f30a9a789fce800939450361a08
  $fShowLinkCsv1 :: Csv.LinkCsv -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(U(U),U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Unfolding: (\ (w :: Csv.LinkCsv) ->
                 case w of ww { Csv.LinkCsv ww1 ww2 ww3 ww4 ww5 ww6 ->
                 Csv.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 }) -}
a53281061dd105aae9682e25e08fda61
  $fShowLinkCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkCsv "#) -}
d8cb61a81309a8168e89d6dffb459796
  $fShowLinkCsv3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
20e97c736839f53fe62a85d72a85810a
  $fShowLinkCsv4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
91d24f30a9a789fce800939450361a08
  $fShowLinkCsv_$cshow :: Csv.LinkCsv -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(U(U),U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Csv.LinkCsv) ->
                 Csv.$fShowLinkCsv_$cshowsPrec
                   Csv.$fShowLinkCsv4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
91d24f30a9a789fce800939450361a08
  $fShowLinkCsv_$cshowList :: [Csv.LinkCsv] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Csv.LinkCsv]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Csv.LinkCsv Csv.$fShowLinkCsv1 ls s) -}
91d24f30a9a789fce800939450361a08
  $fShowLinkCsv_$cshowsPrec ::
    GHC.Types.Int -> Csv.LinkCsv -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U),1*U(U),1*U(U),1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Csv.LinkCsv) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Csv.LinkCsv ww3 ww4 ww5 ww6 ww7 ww8 ->
                 Csv.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 } }) -}
ed800768a8e4c31b18cf278ce18e1f08
  $tc'LinkCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13508412939480803778##
                   3592240006199926646##
                   Csv.$trModule
                   Csv.$tc'LinkCsv2
                   0#
                   Csv.$tc'LinkCsv1) -}
aabbce1c6b286651ee7f367e581b4d91
  $tc'LinkCsv1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
569e6a27737b30bbcd7cacb489baa115
  $tc'LinkCsv2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.$tc'LinkCsv3) -}
455bc4ab637ff9399744b764e276d7f3
  $tc'LinkCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LinkCsv"#) -}
06812d03a0bca1051103cdc5f90f0f13
  $tc'TripCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11744108128060261864##
                   11862876537676265915##
                   Csv.$trModule
                   Csv.$tc'TripCsv2
                   0#
                   Csv.$tc'TripCsv1) -}
d159a0ecd33c5410351ae3a8bad8f10e
  $tc'TripCsv1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d354dd7aeef976b81a5480454c9a3edf
  $tc'TripCsv2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.$tc'TripCsv3) -}
b19e2666334b472e40d20ebed3e09a8b
  $tc'TripCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TripCsv"#) -}
24265f05fb0f18375bfd6f7f5e659be2
  $tcLinkCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11910183792505158105##
                   13188470270520773734##
                   Csv.$trModule
                   Csv.$tcLinkCsv1
                   0#
                   GHC.Types.krep$*) -}
4672c8a0b28611dfb73108c6ebb265a6
  $tcLinkCsv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.$tcLinkCsv2) -}
8cc1c61d48556081d85e04d09178ce1d
  $tcLinkCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkCsv"#) -}
f23ef258a4db7d8a6508c7ef772aefc1
  $tcTripCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   355001081175631432##
                   16225017449541977211##
                   Csv.$trModule
                   Csv.$tcTripCsv1
                   0#
                   GHC.Types.krep$*) -}
36254b34353e3781c8493bff148c21fe
  $tcTripCsv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.$tcTripCsv2) -}
85b9688a1f908197abe6ae55d0fc5392
  $tcTripCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("TripCsv"#) -}
4acb62bdd65411d201228f3bca55f24f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Csv.$trModule3 Csv.$trModule1) -}
709e89cb2fdfae4e823cecc605885400
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.$trModule2) -}
148e4252a1ea86d83b1aa751e6cc9bed
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Csv"#) -}
e26b31640238597096498713ece6b776
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.$trModule4) -}
3bea3114f1d2f67967c463626f927c32
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
c8866589a1265ac1386bc151a2ee75c7
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Dijkstra.Node
    -> Dijkstra.Node
    -> FrankWolfe.Time
    -> FrankWolfe.Capacity
    -> FrankWolfe.Alpha
    -> FrankWolfe.Beta
    -> GHC.Show.ShowS
  {- Arity: 7,
     Strictness: <S,U><L,U(U)><L,U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Dijkstra.Node)
                   (ww2 :: Dijkstra.Node)
                   (ww3 :: FrankWolfe.Time)
                   (ww4 :: FrankWolfe.Capacity)
                   (ww5 :: FrankWolfe.Alpha)
                   (ww6 :: FrankWolfe.Beta) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww7 { GHC.Types.D# ww8 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       Csv.$fShowLinkCsv3
                       ww8 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = case ww4 of ww7 { GHC.Types.D# ww8 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       Csv.$fShowLinkCsv3
                       ww8 }
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = case ww5 of ww7 { GHC.Types.D# ww8 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       Csv.$fShowLinkCsv3
                       ww8 }
                 } in
                 let {
                   g3 :: GHC.Base.String -> GHC.Base.String
                   = case ww6 of ww7 { GHC.Types.D# ww8 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       Csv.$fShowLinkCsv3
                       ww8 }
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Csv.$fShowLinkCsv2
                       (case ww1 of ww7 { GHC.Types.I# ww8 ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               ww8
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case ww2 of ww9 { GHC.Types.I# ww10 ->
                                   case GHC.Show.$wshowSignedInt
                                          11#
                                          ww10
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (f (GHC.Types.:
                                                   @ GHC.Types.Char
                                                   GHC.Show.showSpace1
                                                   (f1
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.showSpace1
                                                         (f2
                                                            (GHC.Types.:
                                                               @ GHC.Types.Char
                                                               GHC.Show.showSpace1
                                                               (g3
                                                                  x)))))))) of ww11 { (#,#) ww12 ww13 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww12
                                     ww13 } })) of ww9 { (#,#) ww10 ww11 ->
                        GHC.Types.: @ GHC.Types.Char ww10 ww11 } })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
fe2d6c494208063f348c6345c068a6f4
  type Destination = Dijkstra.Node
91d24f30a9a789fce800939450361a08
  data LinkCsv
    = LinkCsv Dijkstra.Node
              Dijkstra.Node
              FrankWolfe.Time
              FrankWolfe.Capacity
              FrankWolfe.Alpha
              FrankWolfe.Beta
a3b253ec8d521e8b317b6b553bf4c232
  type Origin = Dijkstra.Node
3aa49473c3ee815f9887d08670f3a636
  data TripCsv = TripCsv Csv.Origin Csv.Destination FrankWolfe.Trip
45d2af00d4ce652bf468e10f80c37ca2
  g :: GHC.IO.FilePath -> GHC.Types.IO ()
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Csv.g1
                  `cast`
                (<GHC.IO.FilePath>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
8a510c3b0ac3803be33d1b1e9cd4d5a1
  g1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.IO.Error.modifyIOError1
                        @ GHC.Base.String
                        System.Directory.Internal.Common.getCurrentDirectory6
                        System.Directory.Internal.Common.getCurrentDirectory2
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ipv1
                           (GHC.CString.unpackAppendCString# Csv.g2 fp))
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4, GHC.Tuple.() #) } } }) -}
d9c0c00f3c529419d0c598c6d13bea55
  g2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/data/"#) -}
instance Data.Csv.Conversion.FromNamedRecord [Csv.LinkCsv]
  = Csv.$fFromNamedRecordLinkCsv
instance GHC.Show.Show [Csv.LinkCsv] = Csv.$fShowLinkCsv
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

