
==================== FINAL INTERFACE ====================
2018-09-16 16:06:14.0138847 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:Csv.NetworkCsv 8043
  interface hash: ef52eb6e4bc2366656c2538c1b309d2c
  ABI hash: ead0779dca768965f75c0b70dc40ced2
  export-list hash: 380007b5e5bb75c07ace69325c161bc0
  orphan hash: 11f34d9d7676fae45fdfbce1e45683ad
  flag hash: aafbb604b0c9d9c193fcb2e5273c99e1
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Csv.NetworkCsv.hasNode
  Csv.NetworkCsv.simplifyDest
  Csv.NetworkCsv.simplifyNetworkCsv
  Csv.NetworkCsv.simplifyOrg
  Csv.NetworkCsv.NetworkCsv{Csv.NetworkCsv.NetworkCsv}
module dependencies: Csv.LinkCsv Csv.NodeCsv Link
package dependencies: Only-0.1 Win32-2.6.1.0 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cassava-0.5.1.0 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      primitive-0.6.3.0 scientific-0.3.6.2 text-1.2.3.0 text-short-0.1.2
                      time-1.8.0.2 transformers-0.5.5.0 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.3.0:Data.Text
                         text-1.2.3.0:Data.Text.Lazy
                         text-short-0.1.2:Data.Text.Short.Internal
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Err 97cd376c529926d7dcbd3f06020fe0fc
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  containers-0.5.11.0:Data.Map.Strict ea9cec0dc7e4353594a3f7d520e82c83
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  Csv.LinkCsv b2bfdb9bc4e567509dd797faf42a33a6
  exports: 0343a33d681ac6cbe2bc5e91e82c08cd
  LinkCsv eb7fe220ec0443e014f2ad1b30a3160e
import  -/  Csv.NodeCsv 43f2e7a1ddb12520835dd9c83f3cd0e6
  exports: 6a4312fbe8e4b3a103b5cb3bc6ecf5b9
  NodeCsv a41a4d4b902a79d0d035e8735efb1ad6
import  -/  Link bf2ee027d71c5616cddc4285e321450e
  exports: 7b06ee901c1aa94d440f125411866824
  :->: 459bf8f941bdac7a99caf97ecd5181da
  Link 437f9fc9b372b93777c7f24955c05523
  Node 2efbb1a25108c6ecfb7204ecf0f77c11
  OD 2011e700b73151b039f3e95bd1da7580
  isNextLink fdfd051e519ef73a72d3f2039d260e2d
import  -/  vector-0.12.0.1:Data.Vector 136e29dd913b307387c1c07459bacd27
adef8aa24e59a269adb29ca141cddc93
  $fShowNetworkCsv :: GHC.Show.Show Csv.NetworkCsv.NetworkCsv
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Csv.NetworkCsv.NetworkCsv
                  Csv.NetworkCsv.$fShowNetworkCsv_$cshowsPrec
                  Csv.NetworkCsv.$fShowNetworkCsv_$cshow
                  Csv.NetworkCsv.$fShowNetworkCsv_$cshowList -}
adef8aa24e59a269adb29ca141cddc93
  $fShowNetworkCsv1 :: Csv.NetworkCsv.NetworkCsv -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U)>,
     Unfolding: (\ (w :: Csv.NetworkCsv.NetworkCsv) ->
                 case w of ww { Csv.NetworkCsv.NetworkCsv ww1 ww2 ->
                 Csv.NetworkCsv.$w$cshowsPrec 0# ww1 ww2 }) -}
2abb7ac79e7e1c200c8ee98119e04cb6
  $fShowNetworkCsv2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
adef8aa24e59a269adb29ca141cddc93
  $fShowNetworkCsv_$cshow ::
    Csv.NetworkCsv.NetworkCsv -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U(U,U,U),1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Csv.NetworkCsv.NetworkCsv) ->
                 Csv.NetworkCsv.$fShowNetworkCsv_$cshowsPrec
                   Csv.NetworkCsv.$fShowNetworkCsv2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
adef8aa24e59a269adb29ca141cddc93
  $fShowNetworkCsv_$cshowList ::
    [Csv.NetworkCsv.NetworkCsv] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Csv.NetworkCsv.NetworkCsv]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Csv.NetworkCsv.NetworkCsv
                   Csv.NetworkCsv.$fShowNetworkCsv1
                   ls
                   s) -}
adef8aa24e59a269adb29ca141cddc93
  $fShowNetworkCsv_$cshowsPrec ::
    GHC.Types.Int -> Csv.NetworkCsv.NetworkCsv -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U(U,U,U),1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Csv.NetworkCsv.NetworkCsv) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Csv.NetworkCsv.NetworkCsv ww3 ww4 ->
                 Csv.NetworkCsv.$w$cshowsPrec ww1 ww3 ww4 } }) -}
8792a4a2de28098338571e2dd623c351
  $s$fShow(,) :: GHC.Show.Show (GHC.Types.Double, GHC.Types.Double)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (GHC.Types.Double, GHC.Types.Double)
                  (GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Double
                     @ GHC.Types.Double
                     GHC.Float.$fShowDouble
                     GHC.Float.$fShowDouble)
                  (\ (x :: (GHC.Types.Double, GHC.Types.Double)) ->
                   GHC.Show.$fShow(,)_$cshowsPrec
                     @ GHC.Types.Double
                     @ GHC.Types.Double
                     GHC.Float.$fShowDouble
                     GHC.Float.$fShowDouble
                     GHC.Show.$fShow(,)1
                     x
                     (GHC.Types.[] @ GHC.Types.Char))
                  (\ (ls :: [(GHC.Types.Double, GHC.Types.Double)])
                     (s :: GHC.Base.String) ->
                   GHC.Show.showList__
                     @ (GHC.Types.Double, GHC.Types.Double)
                     (GHC.Show.$fShow(,)_$cshowsPrec
                        @ GHC.Types.Double
                        @ GHC.Types.Double
                        GHC.Float.$fShowDouble
                        GHC.Float.$fShowDouble
                        GHC.Show.$fShow(,)1)
                     ls
                     s) -}
7f34ad2f9ba3cdb2aa7d2398dd3a689e
  $tc'NetworkCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13571993628745108614##
                   8225876069628717504##
                   Csv.NetworkCsv.$trModule
                   Csv.NetworkCsv.$tc'NetworkCsv2
                   0#
                   Csv.NetworkCsv.$tc'NetworkCsv1) -}
3d95314493924b6fc75ea96a524f302b
  $tc'NetworkCsv1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
30982e2d4778c29f9ed825c6c5bed58f
  $tc'NetworkCsv2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.NetworkCsv.$tc'NetworkCsv3) -}
07422523861c04becddcd62e4e4a88ab
  $tc'NetworkCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NetworkCsv"#) -}
1f2082b0982041eba39f6d51604342d8
  $tcNetworkCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7435953324759118424##
                   3601808912366413856##
                   Csv.NetworkCsv.$trModule
                   Csv.NetworkCsv.$tcNetworkCsv1
                   0#
                   GHC.Types.krep$*) -}
5664ac8967d84163c164ed23e48e6807
  $tcNetworkCsv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.NetworkCsv.$tcNetworkCsv2) -}
bec11107050f45e025f94f9dc2e2eb7f
  $tcNetworkCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NetworkCsv"#) -}
c21b114e3ed231b0d68b8839fc26abfb
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Csv.NetworkCsv.$trModule3
                   Csv.NetworkCsv.$trModule1) -}
1ffe8cb99ddf8f52b07677a8be407ed5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.NetworkCsv.$trModule2) -}
696253074d3a5973a9282dca8b3f9f1d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Csv.NetworkCsv"#) -}
828dd0cb910648c530b2b129f33b9c10
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.NetworkCsv.$trModule4) -}
3bc63f7575102ade9a7c827c2845079e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
269910890820a8d029a3988d28749966
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Csv.LinkCsv.LinkCsv -> Csv.NodeCsv.NodeCsv -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U(U,U,U)><L,1*U>, Inline: [0] -}
ebe69f930e4f1955208792cda140b5e4
  $wsimplifyOrg ::
    Link.Link
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# (Link.Link, Csv.LinkCsv.LinkCond)
    -> (# GHC.Prim.Int#, GHC.Prim.Int#,
          GHC.Prim.Array# (Link.Link, Csv.LinkCsv.LinkCond) #)
  {- Arity: 4, Strictness: <L,U(U,A)><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (w :: Link.Link)
                   (ww :: GHC.Prim.Int#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Array# (Link.Link, Csv.LinkCsv.LinkCond)) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             (Data.Vector.Vector (Link.Link, Csv.LinkCsv.LinkCond),
                              Data.Vector.Vector (Link.Link, Csv.LinkCsv.LinkCond)) #)
                        (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Prim.newArray#
                                @ (Link.Link, Csv.LinkCsv.LinkCond)
                                @ (Control.Monad.Primitive.PrimState
                                     (GHC.ST.ST GHC.Prim.RealWorld))
                                ww1
                                (Data.Vector.Mutable.uninitialised
                                   @ (Link.Link, Csv.LinkCsv.LinkCond))
                                s2
                                  `cast`
                                (GHC.Prim.State#
                                   (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                             <GHC.Prim.RealWorld>_N)))_R of ds2 { (#,#) ipv ipv1 ->
                         let {
                           exit :: GHC.Types.Int
                                   -> GHC.Types.Int
                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         (Data.Vector.Vector (Link.Link, Csv.LinkCsv.LinkCond),
                                          Data.Vector.Vector (Link.Link, Csv.LinkCsv.LinkCond)) #)
                             <join 3> {- Arity: 3, Strictness: <L,U(U)><S(S),1*U(U)><S,U> -}
                           = \ (ww3 :: GHC.Types.Int)[OneShot]
                               (ww4 :: GHC.Types.Int)[OneShot]
                               (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case ww4 of ww5 { GHC.Types.I# ww6 ->
                             let {
                               v2 :: GHC.Prim.Int# = GHC.Prim.-# ww1 ww6
                             } in
                             let {
                               exit1 :: GHC.Prim.State# GHC.Prim.RealWorld
                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                              (Data.Vector.Vector (Link.Link, Csv.LinkCsv.LinkCond),
                                               Data.Vector.Vector
                                                 (Link.Link, Csv.LinkCsv.LinkCond)) #)
                                 <join 1> {- Arity: 1, Strictness: <S,U> -}
                               = \ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 case ww3 of dt { GHC.Types.I# dt1 ->
                                 case GHC.Prim.unsafeFreezeArray#
                                        @ (Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld))
                                        @ (Link.Link, Csv.LinkCsv.LinkCond)
                                        ipv1
                                        w2
                                          `cast`
                                        (GHC.Prim.State#
                                           (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                     <GHC.Prim.RealWorld>_N)))_R of ds1 { (#,#) ipv2 ipv3 ->
                                 case GHC.Prim.unsafeFreezeArray#
                                        @ (Control.Monad.Primitive.PrimState
                                             (GHC.ST.ST GHC.Prim.RealWorld))
                                        @ (Link.Link, Csv.LinkCsv.LinkCond)
                                        ipv1
                                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                                 (# ipv4
                                      `cast`
                                    (GHC.Prim.State#
                                       (Control.Monad.Primitive.D:R:PrimStateST[0]
                                            <GHC.Prim.RealWorld>_N))_R,
                                    (Data.Vector.Vector
                                       @ (Link.Link, Csv.LinkCsv.LinkCond)
                                       0#
                                       dt1
                                       ipv3,
                                     Data.Vector.Vector
                                       @ (Link.Link, Csv.LinkCsv.LinkCond)
                                       ww6
                                       v2
                                       ipv5) #) } } }
                             } in
                             letrec {
                               $wreverse_loop :: GHC.Prim.Int#
                                                 -> GHC.Prim.Int#
                                                 -> GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       (Data.Vector.Vector
                                                          (Link.Link, Csv.LinkCsv.LinkCond),
                                                        Data.Vector.Vector
                                                          (Link.Link, Csv.LinkCsv.LinkCond)) #)
                                 <join 3> {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0] -}
                               = \ (ww7 :: GHC.Prim.Int#)
                                   (ww8 :: GHC.Prim.Int#)
                                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                 case GHC.Prim.<# ww7 ww8 of lwild {
                                   DEFAULT -> exit1 w2
                                   1#
                                   -> case (GHC.Prim.readArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ (Link.Link, Csv.LinkCsv.LinkCond)
                                              ipv1
                                              (GHC.Prim.+# ww6 ww7)
                                              w2
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           <GHC.Prim.RealWorld>_N)))_R)
                                             `cast`
                                           ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N))_R
                                              <(Link.Link,
                                                Csv.LinkCsv.LinkCond)>_R)_R of ds3 { (#,#) ipv8 ipv9 ->
                                      case (GHC.Prim.readArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ (Link.Link, Csv.LinkCsv.LinkCond)
                                              ipv1
                                              (GHC.Prim.+# ww6 ww8)
                                              ipv8
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           <GHC.Prim.RealWorld>_N)))_R)
                                             `cast`
                                           ((#,#)
                                              <'GHC.Types.TupleRep '[]>_R
                                              <'GHC.Types.LiftedRep>_R
                                              (GHC.Prim.State#
                                                 (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                      <GHC.Prim.RealWorld>_N))_R
                                              <(Link.Link,
                                                Csv.LinkCsv.LinkCond)>_R)_R of ds4 { (#,#) ipv10 ipv11 ->
                                      case GHC.Prim.writeArray#
                                             @ (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                             @ (Link.Link, Csv.LinkCsv.LinkCond)
                                             ipv1
                                             (GHC.Prim.+# ww6 ww7)
                                             ipv11
                                             ipv10
                                               `cast`
                                             (GHC.Prim.State#
                                                (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                          <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                      case GHC.Prim.writeArray#
                                             @ (Control.Monad.Primitive.PrimState
                                                  (GHC.ST.ST GHC.Prim.RealWorld))
                                             @ (Link.Link, Csv.LinkCsv.LinkCond)
                                             ipv1
                                             (GHC.Prim.+# ww6 ww8)
                                             ipv9
                                             s'# of s'#1 { DEFAULT ->
                                      $wreverse_loop
                                        (GHC.Prim.+# ww7 1#)
                                        (GHC.Prim.-# ww8 1#)
                                        s'#1
                                          `cast`
                                        (GHC.Prim.State#
                                           (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                <GHC.Prim.RealWorld>_N))_R } } } } }
                             } in
                             $wreverse_loop 0# (GHC.Prim.-# v2 1#) w1 }
                         } in
                         letrec {
                           $wfoldlM'_loop :: GHC.Types.SPEC
                                             -> GHC.Types.Int
                                             -> GHC.Types.Int
                                             -> GHC.Prim.Int#
                                             -> GHC.Prim.State# GHC.Prim.RealWorld
                                             -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                   (Data.Vector.Vector
                                                      (Link.Link, Csv.LinkCsv.LinkCond),
                                                    Data.Vector.Vector
                                                      (Link.Link, Csv.LinkCsv.LinkCond)) #)
                             <join 5> {- Arity: 5,
                                         Strictness: <S,1*U><L,U(U)><S(S),1*U(U)><S,U><S,U>,
                                         Inline: [0] -}
                           = \ (w1 :: GHC.Types.SPEC)
                               (ww3 :: GHC.Types.Int)
                               (ww4 :: GHC.Types.Int)
                               (ww5 :: GHC.Prim.Int#)
                               (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                             case w1 of ds5 { DEFAULT ->
                             case GHC.Prim.>=# ww5 ww1 of lwild {
                               DEFAULT
                               -> case GHC.Prim.indexArray#
                                         @ (Link.Link, Csv.LinkCsv.LinkCond)
                                         ww2
                                         (GHC.Prim.+# ww ww5) of ds3 { Unit# ipv2 ->
                                  case ipv2 of wild { (,) l1 ds ->
                                  case l1 of wild1 { Link.Link g1 ds1 ->
                                  case w of wild2 { Link.Link g2 ds8 ->
                                  case Link.isNextGraph g1 g2 of wild3 {
                                    GHC.Types.False
                                    -> case ww4 of wild4 { GHC.Types.I# x1 ->
                                       let {
                                         y :: GHC.Prim.Int# = GHC.Prim.-# x1 1#
                                       } in
                                       case GHC.Prim.writeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ (Link.Link, Csv.LinkCsv.LinkCond)
                                              ipv1
                                              y
                                              wild
                                              w2
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                       $wfoldlM'_loop
                                         GHC.Types.SPEC
                                         ww3
                                         (GHC.Types.I# y)
                                         (GHC.Prim.+# ww5 1#)
                                         s'#
                                           `cast`
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N))_R } }
                                    GHC.Types.True
                                    -> case ww3 of wild4 { GHC.Types.I# y ->
                                       case GHC.Prim.writeArray#
                                              @ (Control.Monad.Primitive.PrimState
                                                   (GHC.ST.ST GHC.Prim.RealWorld))
                                              @ (Link.Link, Csv.LinkCsv.LinkCond)
                                              ipv1
                                              y
                                              wild
                                              w2
                                                `cast`
                                              (GHC.Prim.State#
                                                 (Sym (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                           <GHC.Prim.RealWorld>_N)))_R of s'# { DEFAULT ->
                                       $wfoldlM'_loop
                                         GHC.Types.SPEC
                                         (GHC.Types.I# (GHC.Prim.+# y 1#))
                                         ww4
                                         (GHC.Prim.+# ww5 1#)
                                         s'#
                                           `cast`
                                         (GHC.Prim.State#
                                            (Control.Monad.Primitive.D:R:PrimStateST[0]
                                                 <GHC.Prim.RealWorld>_N))_R } } } } } } }
                               1# -> exit ww3 ww4 w2 } }
                         } in
                         $wfoldlM'_loop
                           GHC.Types.SPEC
                           Csv.NetworkCsv.$fShowNetworkCsv2
                           (GHC.Types.I# ww1)
                           0#
                           ipv
                             `cast`
                           (GHC.Prim.State#
                              (Control.Monad.Primitive.D:R:PrimStateST[0]
                                   <GHC.Prim.RealWorld>_N))_R }) of ds1 { (#,#) ipv4 ipv5 ->
                 case ipv5 of wild { (,) nextNc otherNc ->
                 case nextNc of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                 case ipv1 of wild1 {
                   DEFAULT -> (# ww, ww1, ww2 #)
                   1#
                   -> case Csv.NetworkCsv.simplifyOrg1
                      ret_ty (# GHC.Prim.Int#, GHC.Prim.Int#,
                                GHC.Prim.Array# (Link.Link, Csv.LinkCsv.LinkCond) #)
                      of {} } } } }) -}
adef8aa24e59a269adb29ca141cddc93
  data NetworkCsv
    = NetworkCsv Csv.LinkCsv.LinkCsv Csv.NodeCsv.NodeCsv
a2e3c941a13fdb07f3feade3aaa1b61c
  hasNode :: Link.OD -> Link.Node -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S),1*U(U)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Link.OD) (n :: Link.Node) ->
                 case ds of wild { Link.:->: org dest ->
                 case org of wild1 { GHC.Types.I# x ->
                 case n of wild2 { GHC.Types.I# y ->
                 case GHC.Prim.==# x y of lwild {
                   DEFAULT
                   -> case dest of wild3 { GHC.Types.I# x1 ->
                      GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==# x1 y) }
                   1# -> GHC.Types.True } } } }) -}
a76fab092c87dc1148fdca6241c62e2e
  simplifyDest ::
    Link.OD -> Csv.NetworkCsv.NetworkCsv -> Csv.NetworkCsv.NetworkCsv
  {- Strictness: x -}
dcabefc524df0d8bff610be56f50b712
  simplifyNetworkCsv ::
    Csv.NetworkCsv.NetworkCsv -> Csv.NetworkCsv.NetworkCsv
  {- Arity: 1, Strictness: <B,A>x,
     Unfolding: InlineRule (1, True, True)
                (\ (nc :: Csv.NetworkCsv.NetworkCsv) ->
                 GHC.Err.undefined
                   @ 'GHC.Types.LiftedRep
                   @ Csv.NetworkCsv.NetworkCsv
                   Csv.NetworkCsv.simplifyNetworkCsv1
                     `cast`
                   (Sym (GHC.Classes.N:IP[0]
                             <"callStack">_N <GHC.Stack.Types.CallStack>_N))) -}
6d8c53b723b7d1867cdbb54f5b3b364a
  simplifyNetworkCsv1 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Csv.NetworkCsv.simplifyNetworkCsv10
                   Csv.NetworkCsv.simplifyNetworkCsv2
                   GHC.Stack.Types.EmptyCallStack) -}
f0892a9d02ea0fcd46f42f74fab23f98
  simplifyNetworkCsv10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Csv.NetworkCsv.simplifyNetworkCsv11) -}
681188b634bd3ff19c0b61c68dd20d2b
  simplifyNetworkCsv11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("undefined"#) -}
4f4eba6a92651f57dc3ae742aa63a753
  simplifyNetworkCsv2 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Csv.NetworkCsv.simplifyNetworkCsv9
                   Csv.NetworkCsv.simplifyNetworkCsv8
                   Csv.NetworkCsv.simplifyNetworkCsv6
                   Csv.NetworkCsv.simplifyNetworkCsv5
                   Csv.NetworkCsv.simplifyNetworkCsv4
                   Csv.NetworkCsv.simplifyNetworkCsv5
                   Csv.NetworkCsv.simplifyNetworkCsv3) -}
177ae65298c39c12f104605a731d3ae5
  simplifyNetworkCsv3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 34#) -}
2dc5d257e08ef004fc5cb8c85bef9228
  simplifyNetworkCsv4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 25#) -}
d0e00c06c15a1fdda96901536f270896
  simplifyNetworkCsv5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 29#) -}
2395c342e87103df72a6daa5a1c77775
  simplifyNetworkCsv6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Csv.NetworkCsv.simplifyNetworkCsv7) -}
d1c4bc19d088ee51db93e46012c126af
  simplifyNetworkCsv7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("src\\Csv\\NetworkCsv.hs"#) -}
7ea7263784e980706e916646d780e704
  simplifyNetworkCsv8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Csv.NetworkCsv.$trModule2) -}
d714e3dac55810ac466ab82581ce5c16
  simplifyNetworkCsv9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   Csv.NetworkCsv.$trModule4) -}
8bcc24b9829a0922aacffc27280d098c
  simplifyOrg ::
    Link.Link -> Csv.LinkCsv.LinkCsv -> Csv.LinkCsv.LinkCsv
  {- Arity: 2, Strictness: <L,U(U,A)><S(SSS),1*U(U,U,U)>m,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Link.Link) (w1 :: Csv.LinkCsv.LinkCsv) ->
                 case w1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 case Csv.NetworkCsv.$wsimplifyOrg
                        w
                        ww1
                        ww2
                        ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 Data.Vector.Vector
                   @ (Link.Link, Csv.LinkCsv.LinkCond)
                   ww5
                   ww6
                   ww7 } }) -}
17d08bf84959f7cc807930fc364832ea
  simplifyOrg1 ::
    Data.Vector.Vector (Link.Link, Csv.LinkCsv.LinkCond)
  {- Strictness: x -}
instance GHC.Show.Show [Csv.NetworkCsv.NetworkCsv]
  = Csv.NetworkCsv.$fShowNetworkCsv
"SPEC/Csv.NetworkCsv $fShow(,) @ Double @ Double" [orphan] forall (v1 :: GHC.Show.Show
                                                                           GHC.Types.Double)
                                                                  (v :: GHC.Show.Show
                                                                          GHC.Types.Double)
  GHC.Show.$fShow(,) @ GHC.Types.Double @ GHC.Types.Double v v1
  = Csv.NetworkCsv.$s$fShow(,)
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

