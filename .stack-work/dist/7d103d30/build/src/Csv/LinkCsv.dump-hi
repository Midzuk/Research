
==================== FINAL INTERFACE ====================
2018-09-16 16:00:05.4736446 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:Csv.LinkCsv 8043
  interface hash: 657d418a00dad358a8fed7429a64a363
  ABI hash: b2bfdb9bc4e567509dd797faf42a33a6
  export-list hash: 0343a33d681ac6cbe2bc5e91e82c08cd
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 7b5c13a7af72fdec8171692890107e45
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Csv.LinkCsv.decodeLinkCsv
  Csv.LinkCsv.makeLinkCsv
  Csv.LinkCsv.Bridge
  Csv.LinkCsv.Dest
  Csv.LinkCsv.Dist
  Csv.LinkCsv.Highway
  Csv.LinkCsv.LinkCond
  Csv.LinkCsv.LinkCsv
  Csv.LinkCsv.LinkCsvOut{Csv.LinkCsv.LinkCsvOut}
  Csv.LinkCsv.Node
  Csv.LinkCsv.Oneway
  Csv.LinkCsv.Org
  Csv.LinkCsv.Width
module dependencies: Link
package dependencies: Only-0.1 Win32-2.6.1.0 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cassava-0.5.1.0 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      primitive-0.6.3.0 scientific-0.3.6.2 text-1.2.3.0 text-short-0.1.2
                      time-1.8.0.2 transformers-0.5.5.0 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.3.0:Data.Text
                         text-1.2.3.0:Data.Text.Lazy
                         text-short-0.1.2:Data.Text.Short.Internal
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 917cb7ca74324934e13727e32d71d117
import  -/  base-4.11.1.0:Data.Functor 920435f8ff93fffe1aec86c79e4fd45f
import  -/  base-4.11.1.0:Data.Maybe 1f53643457b97538ca6f4ca7328e8b30
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.IO a3e5ac541c68a1abc106e1f0d10319a4
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 238696209da3e02ce3cd43ceb4046035
import  -/  cassava-0.5.1.0:Data.Csv 4a8a257da7b82acf18ea86eea1c587e8
import  -/  cassava-0.5.1.0:Data.Csv.Conversion da8ea50b3416c4f778aa71d7173c9b9a
import  -/  cassava-0.5.1.0:Data.Csv.Encoding cee893990c3de1dcaf70c384c5011766
import  -/  cassava-0.5.1.0:Data.Csv.Types 60e239de4036f80d78a883f7998c8d5b
import  -/  containers-0.5.11.0:Data.Map.Strict ea9cec0dc7e4353594a3f7d520e82c83
import  -/  directory-1.3.1.5:System.Directory 4575206d001b0d3464a7b9287cf2e676
import  -/  directory-1.3.1.5:System.Directory.Internal.Common d74c803a65a464959a3007150832f056
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  Link bf2ee027d71c5616cddc4285e321450e
  exports: 7b06ee901c1aa94d440f125411866824
  :->: 459bf8f941bdac7a99caf97ecd5181da
  Edge 9c7caf56fe5390354c16ff30f481fcd9
  Link 64c8547577d67524846a05ac0d306c1f
  Link 437f9fc9b372b93777c7f24955c05523
import  -/  text-1.2.3.0:Data.Text c0e21f1d8acb5250a7f89b5dc0e8964e
import  -/  text-1.2.3.0:Data.Text.Internal e5cede27dcb0356e6560ff0df60f1395
import  -/  vector-0.12.0.1:Data.Vector 136e29dd913b307387c1c07459bacd27
5095b62e1c7c7ec1cd2cc090816723c3
  $fFromNamedRecordLinkCsvOut ::
    Data.Csv.Conversion.FromNamedRecord Csv.LinkCsv.LinkCsvOut
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                Csv.LinkCsv.$fFromNamedRecordLinkCsvOut_$cparseNamedRecord
                  `cast`
                (Sym (Data.Csv.Conversion.N:FromNamedRecord[0]
                          <Csv.LinkCsv.LinkCsvOut>_N)) -}
5095b62e1c7c7ec1cd2cc090816723c3
  $fFromNamedRecordLinkCsvOut_$cparseNamedRecord ::
    Data.Csv.Types.NamedRecord
    -> Data.Csv.Conversion.Parser Csv.LinkCsv.LinkCsvOut
  {- Arity: 1, Strictness: <L,U> -}
5095b62e1c7c7ec1cd2cc090816723c3
  $fShowLinkCsvOut :: GHC.Show.Show Csv.LinkCsv.LinkCsvOut
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Csv.LinkCsv.LinkCsvOut
                  Csv.LinkCsv.$fShowLinkCsvOut_$cshowsPrec
                  Csv.LinkCsv.$fShowLinkCsvOut_$cshow
                  Csv.LinkCsv.$fShowLinkCsvOut_$cshowList -}
5095b62e1c7c7ec1cd2cc090816723c3
  $fShowLinkCsvOut1 :: Csv.LinkCsv.LinkCsvOut -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: Csv.LinkCsv.LinkCsvOut) ->
                 case w of ww { Csv.LinkCsv.LinkCsvOut ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 Csv.LinkCsv.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
ad98c5aa3ea771ee54a0c4b571342e69
  $fShowLinkCsvOut2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkCsvOut "#) -}
0718e61665671b598f2c2cad2717cead
  $fShowLinkCsvOut3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
6cbce21cc13ebf3305e48a39f6a34988
  $fShowLinkCsvOut4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
5095b62e1c7c7ec1cd2cc090816723c3
  $fShowLinkCsvOut_$cshow ::
    Csv.LinkCsv.LinkCsvOut -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Csv.LinkCsv.LinkCsvOut) ->
                 Csv.LinkCsv.$fShowLinkCsvOut_$cshowsPrec
                   Csv.LinkCsv.$fShowLinkCsvOut4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
5095b62e1c7c7ec1cd2cc090816723c3
  $fShowLinkCsvOut_$cshowList ::
    [Csv.LinkCsv.LinkCsvOut] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Csv.LinkCsv.LinkCsvOut]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Csv.LinkCsv.LinkCsvOut
                   Csv.LinkCsv.$fShowLinkCsvOut1
                   ls
                   s) -}
5095b62e1c7c7ec1cd2cc090816723c3
  $fShowLinkCsvOut_$cshowsPrec ::
    GHC.Types.Int -> Csv.LinkCsv.LinkCsvOut -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Csv.LinkCsv.LinkCsvOut) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Csv.LinkCsv.LinkCsvOut ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 Csv.LinkCsv.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 } }) -}
a2428caa7f4f86b941f3f73bb8e1509b
  $tc'LinkCsvOut :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7537027300159690483##
                   9578962143221692214##
                   Csv.LinkCsv.$trModule
                   Csv.LinkCsv.$tc'LinkCsvOut2
                   0#
                   Csv.LinkCsv.$tc'LinkCsvOut1) -}
e25965e6a8fc028fa259f2e84c59f13a
  $tc'LinkCsvOut1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1996e550aca8b2cc1db6441fdabad78a
  $tc'LinkCsvOut2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.LinkCsv.$tc'LinkCsvOut3) -}
d79e27fe719cc9cae67e6463913b0945
  $tc'LinkCsvOut3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LinkCsvOut"#) -}
2efd8ff6638b24a484f375500e9af1de
  $tcLinkCsvOut :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8640431577516454665##
                   14102310802178866370##
                   Csv.LinkCsv.$trModule
                   Csv.LinkCsv.$tcLinkCsvOut1
                   0#
                   GHC.Types.krep$*) -}
5940db474c5bc75ded101164587416db
  $tcLinkCsvOut1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.LinkCsv.$tcLinkCsvOut2) -}
7cf09d65ad37040273b05d2c75a2e3ee
  $tcLinkCsvOut2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkCsvOut"#) -}
ea57e4dde0b94783fbdbba25a7c20ae7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Csv.LinkCsv.$trModule3
                   Csv.LinkCsv.$trModule1) -}
cae3c26105855d9e31a79b3195ba1dc0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.LinkCsv.$trModule2) -}
5dd83110896c2d8fb3dee554552ffca5
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Csv.LinkCsv"#) -}
39576f0c503730543c7d3b6e4fa3e837
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Csv.LinkCsv.$trModule4) -}
84c074f293e27f282661feef68a00815
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
4d01599b042b1715bc4af86cb3189b50
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> Csv.LinkCsv.Org
    -> Csv.LinkCsv.Dest
    -> Csv.LinkCsv.Dist
    -> Csv.LinkCsv.Highway
    -> Csv.LinkCsv.Oneway
    -> Csv.LinkCsv.Bridge
    -> Csv.LinkCsv.Width
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U)><L,U(U)><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Csv.LinkCsv.Org)
                   (ww2 :: Csv.LinkCsv.Dest)
                   (ww3 :: Csv.LinkCsv.Dist)
                   (ww4 :: Csv.LinkCsv.Highway)
                   (ww5 :: Csv.LinkCsv.Oneway)
                   (ww6 :: Csv.LinkCsv.Bridge)
                   (ww7 :: Csv.LinkCsv.Width) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww8 { GHC.Types.D# ww9 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       Csv.LinkCsv.$fShowLinkCsvOut3
                       ww9 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       Csv.LinkCsv.$fShowLinkCsvOut3
                       ww4
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       Csv.LinkCsv.$fShowLinkCsvOut3
                       ww5
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       Csv.LinkCsv.$fShowLinkCsvOut3
                       ww6
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       Csv.LinkCsv.$fShowLinkCsvOut3
                       ww7
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       Csv.LinkCsv.$fShowLinkCsvOut2
                       (case ww1 of ww8 { GHC.Types.I# ww9 ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               ww9
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case ww2 of ww10 { GHC.Types.I# ww11 ->
                                   case GHC.Show.$wshowSignedInt
                                          11#
                                          ww11
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (f (GHC.Types.:
                                                   @ GHC.Types.Char
                                                   GHC.Show.showSpace1
                                                   (f1
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.showSpace1
                                                         (f2
                                                            (GHC.Types.:
                                                               @ GHC.Types.Char
                                                               GHC.Show.showSpace1
                                                               (f3
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     GHC.Show.showSpace1
                                                                     (g x)))))))))) of ww12 { (#,#) ww13 ww14 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww13
                                     ww14 } })) of ww10 { (#,#) ww11 ww12 ->
                        GHC.Types.: @ GHC.Types.Char ww11 ww12 } })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
69bcac9f246d9ac91e452aeaa0ec6cf5
  $wmakeLinkCsv ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Array# Csv.LinkCsv.LinkCsvOut
    -> Data.Vector.Fusion.Util.Id
         (Data.Vector.Vector
            (Link.Link,
             (Csv.LinkCsv.Highway, Csv.LinkCsv.Bridge, Csv.LinkCsv.Width)))
  {- Arity: 3, Strictness: <L,U><S,U><L,U>, Inline: [0] -}
c13b832ea1a16e63ee8e37954735a04a
  type Bridge = GHC.Base.Maybe Data.Text.Internal.Text
e63afc563bfd566fd9a1e3ee9adbdc8e
  type Dest = Csv.LinkCsv.Node
e3a8ffe22d39ad70ad3c22604e7fe199
  type Dist = GHC.Types.Double
23860f0f97577303866387f9e8c5f4e3
  type Highway = GHC.Base.Maybe Data.Text.Internal.Text
ffabf2406e1e698ecd944d8704f5049c
  type LinkCond =
    (Csv.LinkCsv.Highway, Csv.LinkCsv.Bridge, Csv.LinkCsv.Width)
eb7fe220ec0443e014f2ad1b30a3160e
  type LinkCsv = Data.Vector.Vector (Link.Link, Csv.LinkCsv.LinkCond)
5095b62e1c7c7ec1cd2cc090816723c3
  data LinkCsvOut
    = LinkCsvOut Csv.LinkCsv.Org
                 Csv.LinkCsv.Dest
                 Csv.LinkCsv.Dist
                 Csv.LinkCsv.Highway
                 Csv.LinkCsv.Oneway
                 Csv.LinkCsv.Bridge
                 Csv.LinkCsv.Width
cbf1f11c89998b75423e65f724a57ed1
  type Node = GHC.Types.Int
00c9e0187375830c54d7b464262e8cce
  type Oneway = GHC.Base.Maybe Data.Text.Internal.Text
f48fa63a9e643651d8ce868a01b341d8
  type Org = Csv.LinkCsv.Node
0bad180d336fb322000494fa2565ab8e
  type Width = GHC.Base.Maybe Data.Text.Internal.Text
413659065a5b32847fe8ade2eca68e40
  decodeLinkCsv ::
    GHC.IO.FilePath
    -> GHC.Types.IO (Data.Vector.Vector Csv.LinkCsv.LinkCsvOut)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Csv.LinkCsv.decodeLinkCsv1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Vector.Vector Csv.LinkCsv.LinkCsvOut>_R)) -}
8ad8b2c63f8082dc75ad6a33703ce3b6
  decodeLinkCsv1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector Csv.LinkCsv.LinkCsvOut #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.IO.Error.modifyIOError1
                        @ GHC.Base.String
                        System.Directory.Internal.Common.getCurrentDirectory6
                        System.Directory.Internal.Common.getCurrentDirectory2
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ipv1
                           (GHC.CString.unpackAppendCString# Csv.LinkCsv.decodeLinkCsv3 fp))
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    case Data.Csv.Encoding.$wdecodeByNameWith
                           @ Csv.LinkCsv.LinkCsvOut
                           Csv.LinkCsv.$fFromNamedRecordLinkCsvOut_$cparseNamedRecord
                             `cast`
                           (Sym (Data.Csv.Conversion.N:FromNamedRecord[0]
                                     <Csv.LinkCsv.LinkCsvOut>_N))
                           44##
                           ipv5 of wild {
                      Data.Either.Left ipv6
                      -> case Csv.LinkCsv.decodeLinkCsv2
                         ret_ty (Data.Vector.Vector Csv.LinkCsv.LinkCsvOut)
                         of {}
                      Data.Either.Right ds
                      -> case ds of wild1 { (,) ds4 ls -> ls } } #) } } }) -}
8ee5e9396c98cc72dec8b9d0a24cc844
  decodeLinkCsv2 :: (Data.Vector.Vector Csv.LinkCsv.LinkCsvOut)
  {- Strictness: x -}
e0b77a1628591d0accf540bc6eb7e1cd
  decodeLinkCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/data/"#) -}
91e7f1a04b20d1d4cdb4c769723bc12f
  makeLinkCsv ::
    Data.Vector.Vector Csv.LinkCsv.LinkCsvOut -> Csv.LinkCsv.LinkCsv
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>,
     Unfolding: InlineRule (0, True, True)
                Csv.LinkCsv.makeLinkCsv1
                  `cast`
                (<Data.Vector.Vector Csv.LinkCsv.LinkCsvOut>_R
                 ->_R Data.Vector.Fusion.Util.N:Id[0]
                          <Data.Vector.Vector
                             (Link.Link,
                              (Csv.LinkCsv.Highway, Csv.LinkCsv.Bridge,
                               Csv.LinkCsv.Width))>_R) -}
2c036a22d1073e1b6e287728c1ea9f0b
  makeLinkCsv1 ::
    Data.Vector.Vector Csv.LinkCsv.LinkCsvOut
    -> Data.Vector.Fusion.Util.Id
         (Data.Vector.Vector
            (Link.Link,
             (Csv.LinkCsv.Highway, Csv.LinkCsv.Bridge, Csv.LinkCsv.Width)))
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Vector.Vector Csv.LinkCsv.LinkCsvOut) ->
                 case w of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                 Csv.LinkCsv.$wmakeLinkCsv ww1 ww2 ww3 }) -}
instance Data.Csv.Conversion.FromNamedRecord [Csv.LinkCsv.LinkCsvOut]
  = Csv.LinkCsv.$fFromNamedRecordLinkCsvOut
instance GHC.Show.Show [Csv.LinkCsv.LinkCsvOut]
  = Csv.LinkCsv.$fShowLinkCsvOut
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

