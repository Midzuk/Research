
==================== FINAL INTERFACE ====================
2018-09-16 00:44:12.6323626 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:LinkCsvDecode 8043
  interface hash: b3861318eef55364f548ee54cdfa4bc9
  ABI hash: 79e92e55cea08860b02dd8cbe7e35e7a
  export-list hash: 6b69209a0da6058077e3964222c8a01b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 60aae2c1dbe4298f99569d935d85774a
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  LinkCsvDecode.decodeLinkCsv
  LinkCsvDecode.Bridge
  LinkCsvDecode.Dest
  LinkCsvDecode.Dist
  LinkCsvDecode.Highway
  LinkCsvDecode.LinkOutCsv{LinkCsvDecode.LinkOutCsv}
  LinkCsvDecode.Node
  LinkCsvDecode.Oneway
  LinkCsvDecode.Org
  LinkCsvDecode.Width
module dependencies:
package dependencies: Only-0.1 Win32-2.6.1.0 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cassava-0.5.1.0 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      primitive-0.6.3.0 scientific-0.3.6.2 text-1.2.3.0 text-short-0.1.2
                      time-1.8.0.2 transformers-0.5.5.0 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.3.0:Data.Text
                         text-1.2.3.0:Data.Text.Lazy
                         text-short-0.1.2:Data.Text.Short.Internal
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 917cb7ca74324934e13727e32d71d117
import  -/  base-4.11.1.0:Data.Functor 920435f8ff93fffe1aec86c79e4fd45f
import  -/  base-4.11.1.0:Data.Maybe 1f53643457b97538ca6f4ca7328e8b30
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.IO a3e5ac541c68a1abc106e1f0d10319a4
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 238696209da3e02ce3cd43ceb4046035
import  -/  cassava-0.5.1.0:Data.Csv 4a8a257da7b82acf18ea86eea1c587e8
import  -/  cassava-0.5.1.0:Data.Csv.Conversion da8ea50b3416c4f778aa71d7173c9b9a
import  -/  cassava-0.5.1.0:Data.Csv.Encoding cee893990c3de1dcaf70c384c5011766
import  -/  cassava-0.5.1.0:Data.Csv.Types 60e239de4036f80d78a883f7998c8d5b
import  -/  directory-1.3.1.5:System.Directory 4575206d001b0d3464a7b9287cf2e676
import  -/  directory-1.3.1.5:System.Directory.Internal.Common d74c803a65a464959a3007150832f056
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  text-1.2.3.0:Data.Text c0e21f1d8acb5250a7f89b5dc0e8964e
import  -/  text-1.2.3.0:Data.Text.Internal e5cede27dcb0356e6560ff0df60f1395
import  -/  vector-0.12.0.1:Data.Vector 136e29dd913b307387c1c07459bacd27
f0f69d81e79e378e4f7b52f2c46eba1e
  $fFromNamedRecordLinkOutCsv ::
    Data.Csv.Conversion.FromNamedRecord LinkCsvDecode.LinkOutCsv
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                LinkCsvDecode.$fFromNamedRecordLinkOutCsv_$cparseNamedRecord
                  `cast`
                (Sym (Data.Csv.Conversion.N:FromNamedRecord[0]
                          <LinkCsvDecode.LinkOutCsv>_N)) -}
f0f69d81e79e378e4f7b52f2c46eba1e
  $fFromNamedRecordLinkOutCsv_$cparseNamedRecord ::
    Data.Csv.Types.NamedRecord
    -> Data.Csv.Conversion.Parser LinkCsvDecode.LinkOutCsv
  {- Arity: 1, Strictness: <L,U> -}
f0f69d81e79e378e4f7b52f2c46eba1e
  $fShowLinkOutCsv :: GHC.Show.Show LinkCsvDecode.LinkOutCsv
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ LinkCsvDecode.LinkOutCsv
                  LinkCsvDecode.$fShowLinkOutCsv_$cshowsPrec
                  LinkCsvDecode.$fShowLinkOutCsv_$cshow
                  LinkCsvDecode.$fShowLinkOutCsv_$cshowList -}
f0f69d81e79e378e4f7b52f2c46eba1e
  $fShowLinkOutCsv1 :: LinkCsvDecode.LinkOutCsv -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: LinkCsvDecode.LinkOutCsv) ->
                 case w of ww { LinkCsvDecode.LinkOutCsv ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 LinkCsvDecode.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
47456c28b6b2828dfe642d96aeca2ee2
  $fShowLinkOutCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkOutCsv "#) -}
cdb86919e6224225f108e40b94dc1127
  $fShowLinkOutCsv3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
46e473904dca1f3daa307f6b98946935
  $fShowLinkOutCsv4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
f0f69d81e79e378e4f7b52f2c46eba1e
  $fShowLinkOutCsv_$cshow ::
    LinkCsvDecode.LinkOutCsv -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: LinkCsvDecode.LinkOutCsv) ->
                 LinkCsvDecode.$fShowLinkOutCsv_$cshowsPrec
                   LinkCsvDecode.$fShowLinkOutCsv4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f0f69d81e79e378e4f7b52f2c46eba1e
  $fShowLinkOutCsv_$cshowList ::
    [LinkCsvDecode.LinkOutCsv] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [LinkCsvDecode.LinkOutCsv]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ LinkCsvDecode.LinkOutCsv
                   LinkCsvDecode.$fShowLinkOutCsv1
                   ls
                   s) -}
f0f69d81e79e378e4f7b52f2c46eba1e
  $fShowLinkOutCsv_$cshowsPrec ::
    GHC.Types.Int -> LinkCsvDecode.LinkOutCsv -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: LinkCsvDecode.LinkOutCsv) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { LinkCsvDecode.LinkOutCsv ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 LinkCsvDecode.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 } }) -}
f4b0f53273181011bf21c55b90b3d029
  $tc'LinkOutCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16414585336518737532##
                   2571363629771036834##
                   LinkCsvDecode.$trModule
                   LinkCsvDecode.$tc'LinkOutCsv2
                   0#
                   LinkCsvDecode.$tc'LinkOutCsv1) -}
4446692259f5a7edb147f577bd2e37e9
  $tc'LinkOutCsv1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1f8a534f1307755cce5c8fdd742e69fe
  $tc'LinkOutCsv2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LinkCsvDecode.$tc'LinkOutCsv3) -}
757dddd3ceee0a4c6513603d1d318a9a
  $tc'LinkOutCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LinkOutCsv"#) -}
89948a161e16afec746828d09953278d
  $tcLinkOutCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14685963494624537012##
                   3929064261132725815##
                   LinkCsvDecode.$trModule
                   LinkCsvDecode.$tcLinkOutCsv1
                   0#
                   GHC.Types.krep$*) -}
2d6e5761937e4395a2da224e4ac68869
  $tcLinkOutCsv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LinkCsvDecode.$tcLinkOutCsv2) -}
18812ffcae48e9a8ed1143cd1fc864f4
  $tcLinkOutCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkOutCsv"#) -}
b042f7a624fc0f6d291e4283bf61413d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   LinkCsvDecode.$trModule3
                   LinkCsvDecode.$trModule1) -}
b7dd0047a08e6838a8ad8aa31f027f04
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LinkCsvDecode.$trModule2) -}
c2d1bcae6f591a95f8454cead540b185
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkCsvDecode"#) -}
e5b16740714d1718905d59907af7019c
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS LinkCsvDecode.$trModule4) -}
bf024808ede330b7df562e00ea56abe0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
ae0439d496efdb3e0524f41d3da8ab5a
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> LinkCsvDecode.Org
    -> LinkCsvDecode.Dest
    -> LinkCsvDecode.Dist
    -> LinkCsvDecode.Highway
    -> LinkCsvDecode.Oneway
    -> LinkCsvDecode.Bridge
    -> LinkCsvDecode.Width
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U)><L,U(U)><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: LinkCsvDecode.Org)
                   (ww2 :: LinkCsvDecode.Dest)
                   (ww3 :: LinkCsvDecode.Dist)
                   (ww4 :: LinkCsvDecode.Highway)
                   (ww5 :: LinkCsvDecode.Oneway)
                   (ww6 :: LinkCsvDecode.Bridge)
                   (ww7 :: LinkCsvDecode.Width) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww8 { GHC.Types.D# ww9 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       LinkCsvDecode.$fShowLinkOutCsv3
                       ww9 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       LinkCsvDecode.$fShowLinkOutCsv3
                       ww4
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       LinkCsvDecode.$fShowLinkOutCsv3
                       ww5
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       LinkCsvDecode.$fShowLinkOutCsv3
                       ww6
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       LinkCsvDecode.$fShowLinkOutCsv3
                       ww7
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       LinkCsvDecode.$fShowLinkOutCsv2
                       (case ww1 of ww8 { GHC.Types.I# ww9 ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               ww9
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case ww2 of ww10 { GHC.Types.I# ww11 ->
                                   case GHC.Show.$wshowSignedInt
                                          11#
                                          ww11
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (f (GHC.Types.:
                                                   @ GHC.Types.Char
                                                   GHC.Show.showSpace1
                                                   (f1
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.showSpace1
                                                         (f2
                                                            (GHC.Types.:
                                                               @ GHC.Types.Char
                                                               GHC.Show.showSpace1
                                                               (f3
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     GHC.Show.showSpace1
                                                                     (g x)))))))))) of ww12 { (#,#) ww13 ww14 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww13
                                     ww14 } })) of ww10 { (#,#) ww11 ww12 ->
                        GHC.Types.: @ GHC.Types.Char ww11 ww12 } })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
690b1cbd56be541d05ea96a57bab13f2
  type Bridge = GHC.Base.Maybe Data.Text.Internal.Text
cdde43c65711dcb6e8f24a6875321c39
  type Dest = LinkCsvDecode.Node
7d8e079112058ccbf296960f5bd10994
  type Dist = GHC.Types.Double
3d1ddf975194ca781b5a2f420090c482
  type Highway = GHC.Base.Maybe Data.Text.Internal.Text
f0f69d81e79e378e4f7b52f2c46eba1e
  data LinkOutCsv
    = LinkOutCsv LinkCsvDecode.Org
                 LinkCsvDecode.Dest
                 LinkCsvDecode.Dist
                 LinkCsvDecode.Highway
                 LinkCsvDecode.Oneway
                 LinkCsvDecode.Bridge
                 LinkCsvDecode.Width
01d23a6638b0c08ca137027f4acefa6d
  type Node = GHC.Types.Int
0d2928c1682453d871ba9df058a8fa27
  type Oneway = GHC.Base.Maybe Data.Text.Internal.Text
9359db2fedef2433dfb45300460fa161
  type Org = LinkCsvDecode.Node
4c21c420c322a26d8d194dac1952e0a6
  type Width = GHC.Base.Maybe Data.Text.Internal.Text
e452081df05c5fd2496080b554a0e0f0
  decodeLinkCsv ::
    GHC.IO.FilePath
    -> GHC.Types.IO (Data.Vector.Vector LinkCsvDecode.LinkOutCsv)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                LinkCsvDecode.decodeLinkCsv1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Vector.Vector LinkCsvDecode.LinkOutCsv>_R)) -}
fb6ba8e37c599edb5f6a687a71315171
  decodeLinkCsv1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector LinkCsvDecode.LinkOutCsv #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.IO.Error.modifyIOError1
                        @ GHC.Base.String
                        System.Directory.Internal.Common.getCurrentDirectory6
                        System.Directory.Internal.Common.getCurrentDirectory2
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ipv1
                           (GHC.CString.unpackAppendCString# LinkCsvDecode.decodeLinkCsv3 fp))
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    case Data.Csv.Encoding.$wdecodeByNameWith
                           @ LinkCsvDecode.LinkOutCsv
                           LinkCsvDecode.$fFromNamedRecordLinkOutCsv_$cparseNamedRecord
                             `cast`
                           (Sym (Data.Csv.Conversion.N:FromNamedRecord[0]
                                     <LinkCsvDecode.LinkOutCsv>_N))
                           44##
                           ipv5 of wild {
                      Data.Either.Left ipv6
                      -> case LinkCsvDecode.decodeLinkCsv2
                         ret_ty (Data.Vector.Vector LinkCsvDecode.LinkOutCsv)
                         of {}
                      Data.Either.Right ds
                      -> case ds of wild1 { (,) ds4 ls -> ls } } #) } } }) -}
6ff85bc9d9c6cde327a48465cd73498a
  decodeLinkCsv2 :: (Data.Vector.Vector LinkCsvDecode.LinkOutCsv)
  {- Strictness: x -}
5061fe4210bb2f43c85884da01fa6f22
  decodeLinkCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/data/"#) -}
instance Data.Csv.Conversion.FromNamedRecord [LinkCsvDecode.LinkOutCsv]
  = LinkCsvDecode.$fFromNamedRecordLinkOutCsv
instance GHC.Show.Show [LinkCsvDecode.LinkOutCsv]
  = LinkCsvDecode.$fShowLinkOutCsv
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

