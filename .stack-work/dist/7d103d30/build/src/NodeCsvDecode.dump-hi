
==================== FINAL INTERFACE ====================
2018-09-16 00:44:13.0247805 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:NodeCsvDecode 8043
  interface hash: 56a4fd9128d77356772fa60ab91b850f
  ABI hash: ffa5410141f12c5030e9fd05050a15bd
  export-list hash: 0dfb95f47e9f528d3d6c1c25a45b1867
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 0ccc1c6121a99a7d5d6f3a567cd15571
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  NodeCsvDecode.decodeLinkCsv
  NodeCsvDecode.Bridge
  NodeCsvDecode.Dest
  NodeCsvDecode.Dist
  NodeCsvDecode.Highway
  NodeCsvDecode.LinkOutCsv{NodeCsvDecode.LinkOutCsv}
  NodeCsvDecode.Node
  NodeCsvDecode.Oneway
  NodeCsvDecode.Org
  NodeCsvDecode.Width
module dependencies:
package dependencies: Only-0.1 Win32-2.6.1.0 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cassava-0.5.1.0 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      primitive-0.6.3.0 scientific-0.3.6.2 text-1.2.3.0 text-short-0.1.2
                      time-1.8.0.2 transformers-0.5.5.0 unordered-containers-0.2.9.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.3.0:Data.Text
                         text-1.2.3.0:Data.Text.Lazy
                         text-short-0.1.2:Data.Text.Short.Internal
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Data.Either 917cb7ca74324934e13727e32d71d117
import  -/  base-4.11.1.0:Data.Functor 920435f8ff93fffe1aec86c79e4fd45f
import  -/  base-4.11.1.0:Data.Maybe 1f53643457b97538ca6f4ca7328e8b30
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.IO a3e5ac541c68a1abc106e1f0d10319a4
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  bytestring-0.10.8.2:Data.ByteString.Lazy 238696209da3e02ce3cd43ceb4046035
import  -/  cassava-0.5.1.0:Data.Csv 4a8a257da7b82acf18ea86eea1c587e8
import  -/  cassava-0.5.1.0:Data.Csv.Conversion da8ea50b3416c4f778aa71d7173c9b9a
import  -/  cassava-0.5.1.0:Data.Csv.Encoding cee893990c3de1dcaf70c384c5011766
import  -/  cassava-0.5.1.0:Data.Csv.Types 60e239de4036f80d78a883f7998c8d5b
import  -/  directory-1.3.1.5:System.Directory 4575206d001b0d3464a7b9287cf2e676
import  -/  directory-1.3.1.5:System.Directory.Internal.Common d74c803a65a464959a3007150832f056
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  text-1.2.3.0:Data.Text c0e21f1d8acb5250a7f89b5dc0e8964e
import  -/  text-1.2.3.0:Data.Text.Internal e5cede27dcb0356e6560ff0df60f1395
import  -/  vector-0.12.0.1:Data.Vector 136e29dd913b307387c1c07459bacd27
65285e1404bd597673be6d1ea2a436fe
  $fFromNamedRecordLinkOutCsv ::
    Data.Csv.Conversion.FromNamedRecord NodeCsvDecode.LinkOutCsv
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                NodeCsvDecode.$fFromNamedRecordLinkOutCsv_$cparseNamedRecord
                  `cast`
                (Sym (Data.Csv.Conversion.N:FromNamedRecord[0]
                          <NodeCsvDecode.LinkOutCsv>_N)) -}
65285e1404bd597673be6d1ea2a436fe
  $fFromNamedRecordLinkOutCsv_$cparseNamedRecord ::
    Data.Csv.Types.NamedRecord
    -> Data.Csv.Conversion.Parser NodeCsvDecode.LinkOutCsv
  {- Arity: 1, Strictness: <L,U> -}
65285e1404bd597673be6d1ea2a436fe
  $fShowLinkOutCsv :: GHC.Show.Show NodeCsvDecode.LinkOutCsv
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ NodeCsvDecode.LinkOutCsv
                  NodeCsvDecode.$fShowLinkOutCsv_$cshowsPrec
                  NodeCsvDecode.$fShowLinkOutCsv_$cshow
                  NodeCsvDecode.$fShowLinkOutCsv_$cshowList -}
65285e1404bd597673be6d1ea2a436fe
  $fShowLinkOutCsv1 :: NodeCsvDecode.LinkOutCsv -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Unfolding: (\ (w :: NodeCsvDecode.LinkOutCsv) ->
                 case w of ww { NodeCsvDecode.LinkOutCsv ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 NodeCsvDecode.$w$cshowsPrec 0# ww1 ww2 ww3 ww4 ww5 ww6 ww7 }) -}
f1073e450e8eb5aaff9fed575001e1b7
  $fShowLinkOutCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkOutCsv "#) -}
c768770583f6684c8cafce50e00dd1fd
  $fShowLinkOutCsv3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
d3d5ea13326c6b15747c6cb35926ed69
  $fShowLinkOutCsv4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
65285e1404bd597673be6d1ea2a436fe
  $fShowLinkOutCsv_$cshow ::
    NodeCsvDecode.LinkOutCsv -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: NodeCsvDecode.LinkOutCsv) ->
                 NodeCsvDecode.$fShowLinkOutCsv_$cshowsPrec
                   NodeCsvDecode.$fShowLinkOutCsv4
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
65285e1404bd597673be6d1ea2a436fe
  $fShowLinkOutCsv_$cshowList ::
    [NodeCsvDecode.LinkOutCsv] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [NodeCsvDecode.LinkOutCsv]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ NodeCsvDecode.LinkOutCsv
                   NodeCsvDecode.$fShowLinkOutCsv1
                   ls
                   s) -}
65285e1404bd597673be6d1ea2a436fe
  $fShowLinkOutCsv_$cshowsPrec ::
    GHC.Types.Int -> NodeCsvDecode.LinkOutCsv -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(U(U),U(U),1*U(U),1*U,1*U,1*U,1*U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: NodeCsvDecode.LinkOutCsv) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { NodeCsvDecode.LinkOutCsv ww3 ww4 ww5 ww6 ww7 ww8 ww9 ->
                 NodeCsvDecode.$w$cshowsPrec ww1 ww3 ww4 ww5 ww6 ww7 ww8 ww9 } }) -}
f5d08f59ce61283ce82b68f0e4c2bf27
  $tc'LinkOutCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9424973061152815768##
                   5496163802851462769##
                   NodeCsvDecode.$trModule
                   NodeCsvDecode.$tc'LinkOutCsv2
                   0#
                   NodeCsvDecode.$tc'LinkOutCsv1) -}
937fcc717ef10ce8d333410d228b1f75
  $tc'LinkOutCsv1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
71e74a398458f0478890ffa6402596f5
  $tc'LinkOutCsv2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NodeCsvDecode.$tc'LinkOutCsv3) -}
340c807ad8842db8344918b868257c4b
  $tc'LinkOutCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LinkOutCsv"#) -}
6a2bcdcac33b51ed4471d8c09cc5a3e0
  $tcLinkOutCsv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4057002988665946143##
                   3489928119107789072##
                   NodeCsvDecode.$trModule
                   NodeCsvDecode.$tcLinkOutCsv1
                   0#
                   GHC.Types.krep$*) -}
b2062148e7ae9cbe1260b50e9df83af1
  $tcLinkOutCsv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NodeCsvDecode.$tcLinkOutCsv2) -}
581e934e47cffbe3fb4da0a1f6700a72
  $tcLinkOutCsv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LinkOutCsv"#) -}
77c6ffd839b29b49803df1c93945e3ec
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   NodeCsvDecode.$trModule3
                   NodeCsvDecode.$trModule1) -}
3ba4c660d55e06b15bb05b3d00255d36
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NodeCsvDecode.$trModule2) -}
090c1e9e4a7a2a4e00b3b2e2dabe637e
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NodeCsvDecode"#) -}
81e3612c4c1f80c836d454c1f8c23124
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS NodeCsvDecode.$trModule4) -}
50dcf39729aff35260db028ae7410177
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
1cca78f2ab5b91a39323e213125d7952
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> NodeCsvDecode.Org
    -> NodeCsvDecode.Dest
    -> NodeCsvDecode.Dist
    -> NodeCsvDecode.Highway
    -> NodeCsvDecode.Oneway
    -> NodeCsvDecode.Bridge
    -> NodeCsvDecode.Width
    -> GHC.Show.ShowS
  {- Arity: 8,
     Strictness: <S,U><L,U(U)><L,U(U)><L,1*U(U)><L,1*U><L,1*U><L,1*U><L,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: NodeCsvDecode.Org)
                   (ww2 :: NodeCsvDecode.Dest)
                   (ww3 :: NodeCsvDecode.Dist)
                   (ww4 :: NodeCsvDecode.Highway)
                   (ww5 :: NodeCsvDecode.Oneway)
                   (ww6 :: NodeCsvDecode.Bridge)
                   (ww7 :: NodeCsvDecode.Width) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = case ww3 of ww8 { GHC.Types.D# ww9 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       NodeCsvDecode.$fShowLinkOutCsv3
                       ww9 }
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       NodeCsvDecode.$fShowLinkOutCsv3
                       ww4
                 } in
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       NodeCsvDecode.$fShowLinkOutCsv3
                       ww5
                 } in
                 let {
                   f3 :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       NodeCsvDecode.$fShowLinkOutCsv3
                       ww6
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = GHC.Show.$fShowMaybe_$cshowsPrec
                       @ Data.Text.Internal.Text
                       Data.Text.Show.$fShowText
                       NodeCsvDecode.$fShowLinkOutCsv3
                       ww7
                 } in
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,U> -}
                   = \ (x :: GHC.Base.String) ->
                     GHC.CString.unpackAppendCString#
                       NodeCsvDecode.$fShowLinkOutCsv2
                       (case ww1 of ww8 { GHC.Types.I# ww9 ->
                        case GHC.Show.$wshowSignedInt
                               11#
                               ww9
                               (GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showSpace1
                                  (case ww2 of ww10 { GHC.Types.I# ww11 ->
                                   case GHC.Show.$wshowSignedInt
                                          11#
                                          ww11
                                          (GHC.Types.:
                                             @ GHC.Types.Char
                                             GHC.Show.showSpace1
                                             (f (GHC.Types.:
                                                   @ GHC.Types.Char
                                                   GHC.Show.showSpace1
                                                   (f1
                                                      (GHC.Types.:
                                                         @ GHC.Types.Char
                                                         GHC.Show.showSpace1
                                                         (f2
                                                            (GHC.Types.:
                                                               @ GHC.Types.Char
                                                               GHC.Show.showSpace1
                                                               (f3
                                                                  (GHC.Types.:
                                                                     @ GHC.Types.Char
                                                                     GHC.Show.showSpace1
                                                                     (g x)))))))))) of ww12 { (#,#) ww13 ww14 ->
                                   GHC.Types.:
                                     @ GHC.Types.Char
                                     ww13
                                     ww14 } })) of ww10 { (#,#) ww11 ww12 ->
                        GHC.Types.: @ GHC.Types.Char ww11 ww12 } })
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT -> p
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x)) }) -}
1dd737602f80595e32669b60bd7ac924
  type Bridge = GHC.Base.Maybe Data.Text.Internal.Text
817174d94d0de0d2ee0e4944dd759e4d
  type Dest = NodeCsvDecode.Node
957b670a51400f6e5e1abb1654b525d8
  type Dist = GHC.Types.Double
609556a515205995a67a8239b7730910
  type Highway = GHC.Base.Maybe Data.Text.Internal.Text
65285e1404bd597673be6d1ea2a436fe
  data LinkOutCsv
    = LinkOutCsv NodeCsvDecode.Org
                 NodeCsvDecode.Dest
                 NodeCsvDecode.Dist
                 NodeCsvDecode.Highway
                 NodeCsvDecode.Oneway
                 NodeCsvDecode.Bridge
                 NodeCsvDecode.Width
3af72554ba84252f38222234c2b2edc2
  type Node = GHC.Types.Int
4684c3dd24b489055a71b0d7c6f4add5
  type Oneway = GHC.Base.Maybe Data.Text.Internal.Text
0b354a0f749fb299f06846e5795888b4
  type Org = NodeCsvDecode.Node
9edd0b1e035b3570839a1502fbc1d3d3
  type Width = GHC.Base.Maybe Data.Text.Internal.Text
98d92afeef0494163f6963ba64c00ef2
  decodeLinkCsv ::
    GHC.IO.FilePath
    -> GHC.Types.IO (Data.Vector.Vector NodeCsvDecode.LinkOutCsv)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                NodeCsvDecode.decodeLinkCsv1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Vector.Vector NodeCsvDecode.LinkOutCsv>_R)) -}
335db183d5e32933d99f086355760fa4
  decodeLinkCsv1 ::
    GHC.IO.FilePath
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Vector.Vector NodeCsvDecode.LinkOutCsv #)
  {- Arity: 2, Strictness: <L,U><S,U>,
     Unfolding: (\ (fp :: GHC.IO.FilePath)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.IO.Error.modifyIOError1
                        @ GHC.Base.String
                        System.Directory.Internal.Common.getCurrentDirectory6
                        System.Directory.Internal.Common.getCurrentDirectory2
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <GHC.Base.String>_R))
                        s of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.FD.openBinaryFile1
                        (GHC.Base.++
                           @ GHC.Types.Char
                           ipv1
                           (GHC.CString.unpackAppendCString# NodeCsvDecode.decodeLinkCsv3 fp))
                        GHC.IO.IOMode.ReadMode
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case Data.ByteString.Lazy.getContents2
                        ipv3
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    case Data.Csv.Encoding.$wdecodeByNameWith
                           @ NodeCsvDecode.LinkOutCsv
                           NodeCsvDecode.$fFromNamedRecordLinkOutCsv_$cparseNamedRecord
                             `cast`
                           (Sym (Data.Csv.Conversion.N:FromNamedRecord[0]
                                     <NodeCsvDecode.LinkOutCsv>_N))
                           44##
                           ipv5 of wild {
                      Data.Either.Left ipv6
                      -> case NodeCsvDecode.decodeLinkCsv2
                         ret_ty (Data.Vector.Vector NodeCsvDecode.LinkOutCsv)
                         of {}
                      Data.Either.Right ds
                      -> case ds of wild1 { (,) ds4 ls -> ls } } #) } } }) -}
86298021eedb57cf33b28e317766f479
  decodeLinkCsv2 :: (Data.Vector.Vector NodeCsvDecode.LinkOutCsv)
  {- Strictness: x -}
98d4ead932e385319aa56bf12694598b
  decodeLinkCsv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("/data/"#) -}
instance Data.Csv.Conversion.FromNamedRecord [NodeCsvDecode.LinkOutCsv]
  = NodeCsvDecode.$fFromNamedRecordLinkOutCsv
instance GHC.Show.Show [NodeCsvDecode.LinkOutCsv]
  = NodeCsvDecode.$fShowLinkOutCsv
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

