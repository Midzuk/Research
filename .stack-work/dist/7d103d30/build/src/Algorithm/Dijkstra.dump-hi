
==================== FINAL INTERFACE ====================
2018-09-16 04:28:28.3226382 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:Algorithm.Dijkstra 8043
  interface hash: c7256defa48df81f49d7178899a62a1a
  ABI hash: d9e91bb9fee31183b92939b33370e4d3
  export-list hash: 3a86815972dc80eca4ca95b4cab20546
  orphan hash: b7f567ed399b682edc2eec81746d52f4
  flag hash: ec7d8403e6966df0d2035f6afffe22eb
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Algorithm.Dijkstra.compose
  Algorithm.Dijkstra.insertLink
  Algorithm.Dijkstra.inverseNetwork
  Algorithm.Dijkstra.invertOD
  Algorithm.Dijkstra.isNextGraph
  Algorithm.Dijkstra.isNextLink
  Algorithm.Dijkstra.isNextOD
  Algorithm.Dijkstra.networkFromList
  Algorithm.Dijkstra.nodeSet
  Algorithm.Dijkstra.shortestPath
  Algorithm.Dijkstra.Cost
  Algorithm.Dijkstra.Graph{Algorithm.Dijkstra.Edge Algorithm.Dijkstra.Graph}
  Algorithm.Dijkstra.Link{Algorithm.Dijkstra.Link}
  Algorithm.Dijkstra.Network
  Algorithm.Dijkstra.Node
  Algorithm.Dijkstra.OD{Algorithm.Dijkstra.:->:}
  Algorithm.Dijkstra.Path
module dependencies:
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 transformers-0.5.5.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:Data.Functor 920435f8ff93fffe1aec86c79e4fd45f
import  -/  base-4.11.1.0:Data.Semigroup b651656bc07ee696d3ba810dd3109b45
import  -/  base-4.11.1.0:Debug.Trace a039f196c8a0dd416a8318b57f69c6b6
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Err 97cd376c529926d7dcbd3f06020fe0fc
import  -/  base-4.11.1.0:GHC.Num 5de8df0185e7e8d8ec29b3c61e2c8606
import  -/  base-4.11.1.0:GHC.Show 6211aec7cccd267a5ee999e4414d7b90
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  containers-0.5.11.0:Data.Map.Internal a2314ee57e16ff1fe3af08500b455e81
import  -/  containers-0.5.11.0:Data.Map.Strict ea9cec0dc7e4353594a3f7d520e82c83
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 9061dd54223c7e14ff6837ade55c2970
import  -/  containers-0.5.11.0:Data.Set eb0fbc743d474b13246bc4dbf4a83977
import  -/  containers-0.5.11.0:Data.Set.Internal 0672c19b08cec68fbd0f1408b7c182d5
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  vector-0.12.0.1:Data.Vector 136e29dd913b307387c1c07459bacd27
fixities infixr 5 :->:
1ccb62f9e80ec2213b5920d871d5182c
  $fEqGraph :: GHC.Classes.Eq Algorithm.Dijkstra.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.Graph
                  Algorithm.Dijkstra.$fEqGraph_$c==
                  Algorithm.Dijkstra.$fEqGraph_$c/= -}
1ccb62f9e80ec2213b5920d871d5182c
  $fEqGraph_$c/= ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Algorithm.Dijkstra.Graph)
                   (y :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$fEqGraph_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fEqGraph_$c== ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (g1 :: Algorithm.Dijkstra.Graph)
                   (g2 :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.compose
                        g1 of wild { Algorithm.Dijkstra.:->: n1 n2 ->
                 case Algorithm.Dijkstra.compose
                        g2 of wild1 { Algorithm.Dijkstra.:->: n3 n4 ->
                 case n1 of wild2 { GHC.Types.I# x ->
                 case n3 of wild3 { GHC.Types.I# y ->
                 case GHC.Prim.==# x y of lwild {
                   DEFAULT -> GHC.Types.False
                   1# -> GHC.Classes.eqInt n2 n4 } } } } }) -}
52a226a6953087657d17bed8ef38be5e
  $fEqLink :: GHC.Classes.Eq Algorithm.Dijkstra.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.Link
                  Algorithm.Dijkstra.$fEqLink_$c==
                  Algorithm.Dijkstra.$fEqLink_$c/= -}
52a226a6953087657d17bed8ef38be5e
  $fEqLink_$c/= ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Algorithm.Dijkstra.Link) (y :: Algorithm.Dijkstra.Link) ->
                 case x of wild { Algorithm.Dijkstra.Link g1 c1 ->
                 case y of wild1 { Algorithm.Dijkstra.Link g2 c2 ->
                 case Algorithm.Dijkstra.$fEqGraph_$c== g1 g2 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqDouble c1 c2 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
52a226a6953087657d17bed8ef38be5e
  $fEqLink_$c== ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.Link)
                   (w1 :: Algorithm.Dijkstra.Link) ->
                 case w of ww { Algorithm.Dijkstra.Link ww1 ww2 ->
                 case w1 of ww3 { Algorithm.Dijkstra.Link ww4 ww5 ->
                 Algorithm.Dijkstra.$w$c== ww1 ww2 ww4 ww5 } }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fEqOD :: GHC.Classes.Eq Algorithm.Dijkstra.OD
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.OD
                  Algorithm.Dijkstra.$fEqOD_$c==
                  Algorithm.Dijkstra.$fEqOD_$c/= -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fEqOD_$c/= ::
    Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Algorithm.Dijkstra.OD) (y :: Algorithm.Dijkstra.OD) ->
                 case x of wild { Algorithm.Dijkstra.:->: n1 n2 ->
                 case y of wild1 { Algorithm.Dijkstra.:->: n3 n4 ->
                 case GHC.Classes.eqInt n1 n3 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqInt n2 n4 of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fEqOD_$c== ::
    Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.OD) (w1 :: Algorithm.Dijkstra.OD) ->
                 case w of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Algorithm.Dijkstra.:->: ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Algorithm.Dijkstra.$w$c==1 ww4 ww2 ww9 ww7 } } } }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fOrdGraph :: GHC.Classes.Ord Algorithm.Dijkstra.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.Graph
                  Algorithm.Dijkstra.$fEqGraph
                  Algorithm.Dijkstra.$fOrdGraph_$ccompare
                  Algorithm.Dijkstra.$fOrdGraph_$c<
                  Algorithm.Dijkstra.$fOrdGraph_$c<=
                  Algorithm.Dijkstra.$fOrdGraph_$c>
                  Algorithm.Dijkstra.$fOrdGraph_$c>=
                  Algorithm.Dijkstra.$fOrdGraph_$cmax
                  Algorithm.Dijkstra.$fOrdGraph_$cmin -}
1ccb62f9e80ec2213b5920d871d5182c
  $fOrdGraph_$c< ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Graph)
                   (y :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fOrdGraph_$c<= ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Graph)
                   (y :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fOrdGraph_$c> ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Graph)
                   (y :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fOrdGraph_$c>= ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Graph)
                   (y :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fOrdGraph_$ccompare ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: (\ (g1 :: Algorithm.Dijkstra.Graph)
                   (g2 :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$fEqGraph_$c== g1 g2 of wild {
                   GHC.Types.False
                   -> case Algorithm.Dijkstra.compose
                             g1 of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                      case ww1 of ww3 { GHC.Types.I# ww4 ->
                      case Algorithm.Dijkstra.compose
                             g2 of ww5 { Algorithm.Dijkstra.:->: ww6 ww7 ->
                      case ww6 of ww8 { GHC.Types.I# ww9 ->
                      case Algorithm.Dijkstra.$w$ccompare ww4 ww2 ww9 ww7 of wild1 {
                        DEFAULT -> GHC.Types.GT GHC.Types.LT -> GHC.Types.LT } } } } }
                   GHC.Types.True -> GHC.Types.EQ }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fOrdGraph_$cmax ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> Algorithm.Dijkstra.Graph
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Graph)
                   (y :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fOrdGraph_$cmin ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> Algorithm.Dijkstra.Graph
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Graph)
                   (y :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$fOrdGraph_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
52a226a6953087657d17bed8ef38be5e
  $fOrdLink :: GHC.Classes.Ord Algorithm.Dijkstra.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.Link
                  Algorithm.Dijkstra.$fEqLink
                  Algorithm.Dijkstra.$fOrdLink_$ccompare
                  Algorithm.Dijkstra.$fOrdLink_$c<
                  Algorithm.Dijkstra.$fOrdLink_$c<=
                  Algorithm.Dijkstra.$fOrdLink_$c>
                  Algorithm.Dijkstra.$fOrdLink_$c>=
                  Algorithm.Dijkstra.$fOrdLink_$cmax
                  Algorithm.Dijkstra.$fOrdLink_$cmin -}
52a226a6953087657d17bed8ef38be5e
  $fOrdLink_$c< ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Link) (y :: Algorithm.Dijkstra.Link) ->
                 case Algorithm.Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
52a226a6953087657d17bed8ef38be5e
  $fOrdLink_$c<= ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Link) (y :: Algorithm.Dijkstra.Link) ->
                 case Algorithm.Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
52a226a6953087657d17bed8ef38be5e
  $fOrdLink_$c> ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Link) (y :: Algorithm.Dijkstra.Link) ->
                 case Algorithm.Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
52a226a6953087657d17bed8ef38be5e
  $fOrdLink_$c>= ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Link) (y :: Algorithm.Dijkstra.Link) ->
                 case Algorithm.Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
52a226a6953087657d17bed8ef38be5e
  $fOrdLink_$ccompare ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> GHC.Types.Ordering
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,1*U(U))><S(SS(S)),1*U(U,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.Link)
                   (w1 :: Algorithm.Dijkstra.Link) ->
                 case w of ww { Algorithm.Dijkstra.Link ww1 ww2 ->
                 case ww2 of ww3 { GHC.Types.D# ww4 ->
                 case w1 of ww5 { Algorithm.Dijkstra.Link ww6 ww7 ->
                 case ww7 of ww8 { GHC.Types.D# ww9 ->
                 Algorithm.Dijkstra.$w$ccompare1 ww1 ww4 ww6 ww9 } } } }) -}
52a226a6953087657d17bed8ef38be5e
  $fOrdLink_$cmax ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> Algorithm.Dijkstra.Link
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,U(U))><S(SS(S)),1*U(U,U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Link) (y :: Algorithm.Dijkstra.Link) ->
                 case Algorithm.Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
52a226a6953087657d17bed8ef38be5e
  $fOrdLink_$cmin ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> Algorithm.Dijkstra.Link
  {- Arity: 2,
     Strictness: <S(SS(S)),1*U(U,U(U))><S(SS(S)),1*U(U,U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.Link) (y :: Algorithm.Dijkstra.Link) ->
                 case Algorithm.Dijkstra.$fOrdLink_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fOrdOD :: GHC.Classes.Ord Algorithm.Dijkstra.OD
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.OD
                  Algorithm.Dijkstra.$fEqOD
                  Algorithm.Dijkstra.$fOrdOD_$ccompare
                  Algorithm.Dijkstra.$fOrdOD_$c<
                  Algorithm.Dijkstra.$fOrdOD_$c<=
                  Algorithm.Dijkstra.$fOrdOD_$c>
                  Algorithm.Dijkstra.$fOrdOD_$c>=
                  Algorithm.Dijkstra.$fOrdOD_$cmax
                  Algorithm.Dijkstra.$fOrdOD_$cmin -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fOrdOD_$c< ::
    Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.OD) (y :: Algorithm.Dijkstra.OD) ->
                 case Algorithm.Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fOrdOD_$c<= ::
    Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.OD) (y :: Algorithm.Dijkstra.OD) ->
                 case Algorithm.Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fOrdOD_$c> ::
    Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.OD) (y :: Algorithm.Dijkstra.OD) ->
                 case Algorithm.Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fOrdOD_$c>= ::
    Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.OD) (y :: Algorithm.Dijkstra.OD) ->
                 case Algorithm.Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fOrdOD_$ccompare ::
    Algorithm.Dijkstra.OD
    -> Algorithm.Dijkstra.OD -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),U(U))><S(S(S)L),1*U(1*U(U),U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.OD) (w1 :: Algorithm.Dijkstra.OD) ->
                 case w of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Algorithm.Dijkstra.:->: ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Algorithm.Dijkstra.$w$ccompare ww4 ww2 ww9 ww7 } } } }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fOrdOD_$cmax ::
    Algorithm.Dijkstra.OD
    -> Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.OD) (y :: Algorithm.Dijkstra.OD) ->
                 case Algorithm.Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> y GHC.Types.GT -> x }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fOrdOD_$cmin ::
    Algorithm.Dijkstra.OD
    -> Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(U(U),U(U))><S(S(S)L),1*U(U(U),U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: Algorithm.Dijkstra.OD) (y :: Algorithm.Dijkstra.OD) ->
                 case Algorithm.Dijkstra.$fOrdOD_$ccompare x y of wild {
                   DEFAULT -> x GHC.Types.GT -> y }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fSemigroupGraph :: GHC.Base.Semigroup Algorithm.Dijkstra.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.Graph
                  Algorithm.Dijkstra.$fSemigroupGraph_$c<>
                  Algorithm.Dijkstra.$fSemigroupGraph_$csconcat
                  Algorithm.Dijkstra.$fSemigroupGraph_$cstimes -}
1ccb62f9e80ec2213b5920d871d5182c
  $fSemigroupGraph_$c<> ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> Algorithm.Dijkstra.Graph
  {- Arity: 2, Strictness: <S,1*U><S,1*U>m2, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.Graph)
                   (w1 :: Algorithm.Dijkstra.Graph) ->
                 case Algorithm.Dijkstra.$w$c<> w w1 of ww { Unit# ww1 ->
                 Algorithm.Dijkstra.Graph ww1 }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fSemigroupGraph_$csconcat ::
    GHC.Base.NonEmpty Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph
  {- Arity: 1, Strictness: <S(SS),1*U(1*U,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty Algorithm.Dijkstra.Graph) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Algorithm.Dijkstra.$fSemigroupGraph_go a1 as }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fSemigroupGraph_$cstimes ::
    GHC.Real.Integral b =>
    b -> Algorithm.Dijkstra.Graph -> Algorithm.Dijkstra.Graph
  {- Arity: 1, Strictness: <L,U> -}
1ccb62f9e80ec2213b5920d871d5182c
  $fSemigroupGraph_go ::
    Algorithm.Dijkstra.Graph
    -> [Algorithm.Dijkstra.Graph] -> Algorithm.Dijkstra.Graph
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
52a226a6953087657d17bed8ef38be5e
  $fSemigroupLink :: GHC.Base.Semigroup Algorithm.Dijkstra.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.Link
                  Algorithm.Dijkstra.$fSemigroupLink_$c<>
                  Algorithm.Dijkstra.$fSemigroupLink_$csconcat
                  Algorithm.Dijkstra.$fSemigroupLink_$cstimes -}
52a226a6953087657d17bed8ef38be5e
  $fSemigroupLink_$c<> ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> Algorithm.Dijkstra.Link
  {- Arity: 2, Strictness: <S,1*U(1*U,1*U(U))><S,1*U(1*U,1*U(U))>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Algorithm.Dijkstra.Link)
                   (ds1 :: Algorithm.Dijkstra.Link) ->
                 case ds of wild { Algorithm.Dijkstra.Link g1 c1 ->
                 case ds1 of wild1 { Algorithm.Dijkstra.Link g2 c2 ->
                 Algorithm.Dijkstra.Link
                   (Algorithm.Dijkstra.$fSemigroupGraph_$c<> g1 g2)
                   (GHC.Float.plusDouble c1 c2) } }) -}
52a226a6953087657d17bed8ef38be5e
  $fSemigroupLink_$csconcat ::
    GHC.Base.NonEmpty Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U,U(U)),1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty Algorithm.Dijkstra.Link) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Algorithm.Dijkstra.$fSemigroupLink_go a1 as }) -}
52a226a6953087657d17bed8ef38be5e
  $fSemigroupLink_$cstimes ::
    GHC.Real.Integral b =>
    b -> Algorithm.Dijkstra.Link -> Algorithm.Dijkstra.Link
  {- Arity: 1, Strictness: <L,U> -}
52a226a6953087657d17bed8ef38be5e
  $fSemigroupLink_go ::
    Algorithm.Dijkstra.Link
    -> [Algorithm.Dijkstra.Link] -> Algorithm.Dijkstra.Link
  {- Arity: 2, Strictness: <S,1*U(U,U(U))><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.Link)
                   (w1 :: [Algorithm.Dijkstra.Link]) ->
                 case w of ww { Algorithm.Dijkstra.Link ww1 ww2 ->
                 case Algorithm.Dijkstra.$wgo ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Algorithm.Dijkstra.Link ww4 ww5 } }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fSemigroupOD :: GHC.Base.Semigroup Algorithm.Dijkstra.OD
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.OD
                  Algorithm.Dijkstra.$fSemigroupOD_$c<>
                  Algorithm.Dijkstra.$fSemigroupOD_$csconcat
                  Algorithm.Dijkstra.$fSemigroupOD_$cstimes -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fSemigroupOD_$c<> ::
    Algorithm.Dijkstra.OD
    -> Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD
  {- Arity: 2,
     Strictness: <S(LS(S)),1*U(U,1*U(U))><S(S(S)L),1*U(1*U(U),U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Algorithm.Dijkstra.OD) (ds1 :: Algorithm.Dijkstra.OD) ->
                 case ds of wild { Algorithm.Dijkstra.:->: n1 n2 ->
                 case ds1 of wild1 { Algorithm.Dijkstra.:->: n3 n4 ->
                 case n2 of wild2 { GHC.Types.I# x ->
                 case n3 of wild3 { GHC.Types.I# y ->
                 case GHC.Prim.==# x y of lwild {
                   DEFAULT -> Algorithm.Dijkstra.compose2
                   1# -> Algorithm.Dijkstra.:->: n1 n4 } } } } }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fSemigroupOD_$csconcat ::
    GHC.Base.NonEmpty Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD
  {- Arity: 1, Strictness: <S(SS),1*U(1*U(U,U(U)),1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: GHC.Base.NonEmpty Algorithm.Dijkstra.OD) ->
                 case ds of wild { GHC.Base.:| a1 as ->
                 Algorithm.Dijkstra.$fSemigroupOD_go a1 as }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fSemigroupOD_$cstimes ::
    GHC.Real.Integral b =>
    b -> Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD
  {- Arity: 1, Strictness: <L,U> -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fSemigroupOD_go ::
    Algorithm.Dijkstra.OD
    -> [Algorithm.Dijkstra.OD] -> Algorithm.Dijkstra.OD
  {- Arity: 2, Strictness: <S,1*U(U,U(U))><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.OD) (w1 :: [Algorithm.Dijkstra.OD]) ->
                 case w of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                 case Algorithm.Dijkstra.$wgo1 ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Algorithm.Dijkstra.:->: ww4 ww5 } }) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fShowGraph :: GHC.Show.Show Algorithm.Dijkstra.Graph
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.Graph
                  Algorithm.Dijkstra.$fShowGraph_$cshowsPrec
                  Algorithm.Dijkstra.$fShowGraph_$cshow
                  Algorithm.Dijkstra.$fShowGraph_$cshowList -}
1ccb62f9e80ec2213b5920d871d5182c
  $fShowGraph1 :: Algorithm.Dijkstra.Graph -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: Algorithm.Dijkstra.Graph) ->
                 Algorithm.Dijkstra.$w$cshowsPrec 0# w) -}
b67e89d4596aae6152a41abb1e6cddc0
  $fShowGraph2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fShowGraph_$cshow :: Algorithm.Dijkstra.Graph -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Algorithm.Dijkstra.Graph) ->
                 Algorithm.Dijkstra.$fShowGraph_$cshowsPrec
                   Algorithm.Dijkstra.$fShowGraph2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fShowGraph_$cshowList ::
    [Algorithm.Dijkstra.Graph] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Algorithm.Dijkstra.Graph]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Algorithm.Dijkstra.Graph
                   Algorithm.Dijkstra.$fShowGraph1
                   ls
                   s) -}
1ccb62f9e80ec2213b5920d871d5182c
  $fShowGraph_$cshowsPrec ::
    GHC.Types.Int -> Algorithm.Dijkstra.Graph -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Algorithm.Dijkstra.Graph) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Algorithm.Dijkstra.$w$cshowsPrec ww1 w1 }) -}
52a226a6953087657d17bed8ef38be5e
  $fShowLink :: GHC.Show.Show Algorithm.Dijkstra.Link
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.Link
                  Algorithm.Dijkstra.$fShowLink_$cshowsPrec
                  Algorithm.Dijkstra.$fShowLink_$cshow
                  Algorithm.Dijkstra.$fShowLink_$cshowList -}
52a226a6953087657d17bed8ef38be5e
  $fShowLink1 :: Algorithm.Dijkstra.Link -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: (\ (w :: Algorithm.Dijkstra.Link) ->
                 case w of ww { Algorithm.Dijkstra.Link ww1 ww2 ->
                 Algorithm.Dijkstra.$w$cshowsPrec1 0# ww1 ww2 }) -}
291f82f094f881d28e9d38dfc8fb3678
  $fShowLink2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Link "#) -}
7ed39b778d7638d6babc3e0f8213b020
  $fShowLink3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
52a226a6953087657d17bed8ef38be5e
  $fShowLink_$cshow :: Algorithm.Dijkstra.Link -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Algorithm.Dijkstra.Link) ->
                 Algorithm.Dijkstra.$fShowLink_$cshowsPrec
                   Algorithm.Dijkstra.$fShowGraph2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
52a226a6953087657d17bed8ef38be5e
  $fShowLink_$cshowList ::
    [Algorithm.Dijkstra.Link] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Algorithm.Dijkstra.Link]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Algorithm.Dijkstra.Link
                   Algorithm.Dijkstra.$fShowLink1
                   ls
                   s) -}
52a226a6953087657d17bed8ef38be5e
  $fShowLink_$cshowsPrec ::
    GHC.Types.Int -> Algorithm.Dijkstra.Link -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Algorithm.Dijkstra.Link) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Algorithm.Dijkstra.Link ww3 ww4 ->
                 Algorithm.Dijkstra.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fShowOD :: GHC.Show.Show Algorithm.Dijkstra.OD
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Algorithm.Dijkstra.OD
                  Algorithm.Dijkstra.$fShowOD_$cshowsPrec
                  Algorithm.Dijkstra.$fShowOD_$cshow
                  Algorithm.Dijkstra.$fShowOD_$cshowList -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fShowOD1 :: Algorithm.Dijkstra.OD -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U>m2,
     Unfolding: (\ (w :: Algorithm.Dijkstra.OD)
                   (w1 :: GHC.Base.String) ->
                 case w of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                 case Algorithm.Dijkstra.$w$cshowsPrec2
                        0#
                        ww1
                        ww2
                        w1 of ww3 { (#,#) ww4 ww5 ->
                 GHC.Types.: @ GHC.Types.Char ww4 ww5 } }) -}
56cdbcc04c6d0aa89598456d46fc2856
  $fShowOD2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" :->: "#) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fShowOD_$cshow :: Algorithm.Dijkstra.OD -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)L),1*U(1*U(U),1*U(U))>m2, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Algorithm.Dijkstra.OD) ->
                 case w of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                 case ww1 of ww3 { GHC.Types.I# ww4 ->
                 case Algorithm.Dijkstra.$w$cshow ww4 ww2 of ww5 { (#,#) ww6 ww7 ->
                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } } }) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fShowOD_$cshowList :: [Algorithm.Dijkstra.OD] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Algorithm.Dijkstra.OD]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ Algorithm.Dijkstra.OD
                   Algorithm.Dijkstra.$fShowOD1
                   ls
                   s) -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $fShowOD_$cshowsPrec ::
    GHC.Types.Int -> Algorithm.Dijkstra.OD -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U),1*U(U))><L,U>m2,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Algorithm.Dijkstra.OD)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Algorithm.Dijkstra.:->: ww3 ww4 ->
                 case Algorithm.Dijkstra.$w$cshowsPrec2
                        ww1
                        ww3
                        ww4
                        w2 of ww5 { (#,#) ww6 ww7 ->
                 GHC.Types.: @ GHC.Types.Char ww6 ww7 } } }) -}
339c8c01c055144b131b34bf6610be14
  $sfromList ::
    [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: [GHC.Types.Int]) ->
                 case ds of wild {
                   [] -> Data.Set.Internal.Tip @ GHC.Types.Int
                   : x ds1
                   -> case ds1 of wild1 {
                        []
                        -> case x of dt { GHC.Types.I# ipv ->
                           Data.Set.Internal.Bin
                             @ GHC.Types.Int
                             1#
                             dt
                             (Data.Set.Internal.Tip @ GHC.Types.Int)
                             (Data.Set.Internal.Tip @ GHC.Types.Int) }
                        : ipv ipv1
                        -> case x of wild2 { GHC.Types.I# x1 ->
                           case ipv of wild3 { GHC.Types.I# y ->
                           case GHC.Prim.>=# x1 y of lwild {
                             DEFAULT
                             -> Algorithm.Dijkstra.$wgo3
                                  1#
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  wild1
                             1#
                             -> Algorithm.Dijkstra.$sfromList_go4
                                  (Data.Set.Internal.Bin
                                     @ GHC.Types.Int
                                     1#
                                     wild2
                                     (Data.Set.Internal.Tip @ GHC.Types.Int)
                                     (Data.Set.Internal.Tip @ GHC.Types.Int))
                                  wild1 } } } } }) -}
98d981801f00c28299aa1d33d831fd83
  $sfromList1 ::
    [(Algorithm.Dijkstra.OD, a)]
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(Algorithm.Dijkstra.OD, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Internal.Tip @ Algorithm.Dijkstra.OD @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case x of x1 { DEFAULT ->
                           case kx of dt { Algorithm.Dijkstra.:->: ipv ipv1 ->
                           Data.Map.Internal.Bin
                             @ Algorithm.Dijkstra.OD
                             @ a
                             1#
                             dt
                             x1
                             (Data.Map.Internal.Tip @ Algorithm.Dijkstra.OD @ a)
                             (Data.Map.Internal.Tip @ Algorithm.Dijkstra.OD @ a) } }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                           case ww1 of ww3 { GHC.Types.I# ww4 ->
                           case ky of ww5 { Algorithm.Dijkstra.:->: ww6 ww7 ->
                           case ww6 of ww8 { GHC.Types.I# ww9 ->
                           case Algorithm.Dijkstra.$w$ccompare ww4 ww2 ww9 ww7 of wild4 {
                             DEFAULT
                             -> case x of x0 { DEFAULT ->
                                Algorithm.Dijkstra.$sfromList2
                                  @ a
                                  (Data.Map.Internal.Bin
                                     @ Algorithm.Dijkstra.OD
                                     @ a
                                     1#
                                     ww
                                     x0
                                     (Data.Map.Internal.Tip @ Algorithm.Dijkstra.OD @ a)
                                     (Data.Map.Internal.Tip @ Algorithm.Dijkstra.OD @ a))
                                  wild2 }
                             GHC.Types.LT
                             -> case x of x0 { DEFAULT ->
                                Algorithm.Dijkstra.$wpoly_go8
                                  @ a
                                  1#
                                  (Data.Map.Internal.Bin
                                     @ Algorithm.Dijkstra.OD
                                     @ a
                                     1#
                                     ww
                                     x0
                                     (Data.Map.Internal.Tip @ Algorithm.Dijkstra.OD @ a)
                                     (Data.Map.Internal.Tip @ Algorithm.Dijkstra.OD @ a))
                                  wild2 } } } } } } } } } }) -}
9f95fcfb09f6aece3fa931cf35069a0a
  $sfromList2 ::
    Data.Map.Internal.Map Algorithm.Dijkstra.OD a
    -> [(Algorithm.Dijkstra.OD, a)]
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e1ad08dc8e09495da50e442db0de6047
  $sfromList_go4 ::
    Data.Set.Internal.Set GHC.Types.Int
    -> [GHC.Types.Int] -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
b670f0adad6bbadd1807a29feacc756f
  $sintersection ::
    Data.Set.Internal.Set Algorithm.Dijkstra.Node
    -> Data.Set.Internal.Set Algorithm.Dijkstra.Node
    -> Data.Set.Internal.Set Algorithm.Dijkstra.Node
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [~] -}
affd63b3e73d02b0f267edb92f66821d
  $tc':->: :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12718792257696063521##
                   6692937076355634773##
                   Algorithm.Dijkstra.$trModule
                   Algorithm.Dijkstra.$tc':->:2
                   0#
                   Algorithm.Dijkstra.$tc':->:1) -}
72cde262af6df71b0585b58320ba6ca8
  $tc':->:1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ca1e2fb3a78076c2d2c116298d1d874d
  $tc':->:2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$tc':->:3) -}
33d49b81e6c5f22ddada79757dbc9e60
  $tc':->:3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("':->:"#) -}
c93a3ae3a2763f51d91c46b2392a3391
  $tc'Edge :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3263662470145264586##
                   5802004829550826259##
                   Algorithm.Dijkstra.$trModule
                   Algorithm.Dijkstra.$tc'Edge2
                   0#
                   Algorithm.Dijkstra.$tc'Edge1) -}
7cb283583a6a783fb6e0233093478c4b
  $tc'Edge1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2750b3b3474f3e3254ead3f301278eda
  $tc'Edge2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$tc'Edge3) -}
a27859f3faf8095003ffead91695d7b7
  $tc'Edge3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Edge"#) -}
3f5295465012746a37045132fba86381
  $tc'Graph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6251034132686807939##
                   14340398727437749749##
                   Algorithm.Dijkstra.$trModule
                   Algorithm.Dijkstra.$tc'Graph2
                   0#
                   Algorithm.Dijkstra.$tc'Graph1) -}
d4003b6b09d64c3caf7d22b9f1f32032
  $tc'Graph1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5a9202c4aac2c3b8e9bf4c2f4175aab4
  $tc'Graph2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$tc'Graph3) -}
086f36620ddae458dfcc184405f0d71d
  $tc'Graph3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Graph"#) -}
ab2fe7b41eb5de817f7cc2137467c50e
  $tc'Link :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1433797047652633846##
                   7151755821989870243##
                   Algorithm.Dijkstra.$trModule
                   Algorithm.Dijkstra.$tc'Link2
                   0#
                   Algorithm.Dijkstra.$tc'Link1) -}
e59bee2e2f3438b668b0631479d82650
  $tc'Link1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ff550852fc4fba81043c4784960d9570
  $tc'Link2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$tc'Link3) -}
d342c15df9581a745bc1fccf61f5a7d1
  $tc'Link3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Link"#) -}
6f6ca1ca6409ff4b97baf5c385dff697
  $tcGraph :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14806750617326066164##
                   17026856933928168076##
                   Algorithm.Dijkstra.$trModule
                   Algorithm.Dijkstra.$tcGraph1
                   0#
                   GHC.Types.krep$*) -}
2ea5b3a00bab8be1c45e9963c8289f19
  $tcGraph1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$tcGraph2) -}
6bdb35841bdf4a6ac06e5c0821f3ceaf
  $tcGraph2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Graph"#) -}
70b54e341d991ea6d0fb25c8f9fa3c4a
  $tcLink :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15130930064015898613##
                   722322847783552260##
                   Algorithm.Dijkstra.$trModule
                   Algorithm.Dijkstra.$tcLink1
                   0#
                   GHC.Types.krep$*) -}
6c2c40f33036e388f61c417a1fed4196
  $tcLink1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$tcLink2) -}
ba95732917b259fac04a82bcea4c2425
  $tcLink2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Link"#) -}
1537d59a8f3c4eedad806043b6fc78ed
  $tcOD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15208791970538857205##
                   5156748038832206434##
                   Algorithm.Dijkstra.$trModule
                   Algorithm.Dijkstra.$tcOD1
                   0#
                   GHC.Types.krep$*) -}
02c96ceaed7d182cb51ece20ef22ec39
  $tcOD1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$tcOD2) -}
5857f3cfb6eae38c294ed3f9244a5609
  $tcOD2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("OD"#) -}
75d895cd7494b5fed5ecaa7bf6056b9e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Algorithm.Dijkstra.$trModule3
                   Algorithm.Dijkstra.$trModule1) -}
770d70ec25190539a406fbc8e2a3d646
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$trModule2) -}
3ef3db0a0c0cbe203ca14c2969eb7b00
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Algorithm.Dijkstra"#) -}
803978f340f52584672e68561658be9a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.Dijkstra.$trModule4) -}
afeacb298aca2062c5af83258b0ee5ea
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
1ccb62f9e80ec2213b5920d871d5182c
  $w$c<> ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph
    -> (# Data.Vector.Vector Algorithm.Dijkstra.OD #)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
fa359062331faeabd34e52197c0458ca
  $w$c== ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Cost
    -> Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Cost
    -> GHC.Types.Bool
  {- Arity: 4, Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: Algorithm.Dijkstra.Graph)
                   (ww1 :: Algorithm.Dijkstra.Cost)
                   (ww2 :: Algorithm.Dijkstra.Graph)
                   (ww3 :: Algorithm.Dijkstra.Cost) ->
                 case Algorithm.Dijkstra.$fEqGraph_$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True -> GHC.Classes.eqDouble ww1 ww3 }) -}
a2b54d458c5d57a51aa962fc765cb315
  $w$c==1 ::
    GHC.Prim.Int#
    -> Algorithm.Dijkstra.Node
    -> GHC.Prim.Int#
    -> Algorithm.Dijkstra.Node
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Algorithm.Dijkstra.Node)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Algorithm.Dijkstra.Node) ->
                 case GHC.Prim.==# ww ww2 of lwild {
                   DEFAULT -> GHC.Types.False 1# -> GHC.Classes.eqInt ww1 ww3 }) -}
7054967b4586d511cdbcd1e660b3a2c8
  $w$ccompare ::
    GHC.Prim.Int#
    -> Algorithm.Dijkstra.Node
    -> GHC.Prim.Int#
    -> Algorithm.Dijkstra.Node
    -> GHC.Types.Ordering
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><L,U(U)><S,U><L,U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Algorithm.Dijkstra.Node)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Algorithm.Dijkstra.Node) ->
                 let {
                   $j :: GHC.Types.Ordering <join 0>
                   = case GHC.Prim.<# ww ww2 of lwild {
                       DEFAULT
                       -> case GHC.Prim.==# ww ww2 of lwild1 {
                            DEFAULT -> GHC.Types.GT
                            1#
                            -> case ww1 of wild { GHC.Types.I# x ->
                               case ww3 of wild1 { GHC.Types.I# y ->
                               case GHC.Prim.<# x y of lwild2 {
                                 DEFAULT -> GHC.Types.GT 1# -> GHC.Types.LT } } } }
                       1# -> GHC.Types.LT }
                 } in
                 case GHC.Prim.==# ww ww2 of lwild {
                   DEFAULT -> $j
                   1#
                   -> case ww1 of wild { GHC.Types.I# x ->
                      case ww3 of wild1 { GHC.Types.I# y ->
                      case GHC.Prim.==# x y of lwild1 {
                        DEFAULT -> $j 1# -> GHC.Types.EQ } } } }) -}
ac264ea09e7678fb36177fc5614b771a
  $w$ccompare1 ::
    Algorithm.Dijkstra.Graph
    -> GHC.Prim.Double#
    -> Algorithm.Dijkstra.Graph
    -> GHC.Prim.Double#
    -> GHC.Types.Ordering
  {- Arity: 4, Strictness: <S,U><S,U><S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Algorithm.Dijkstra.Graph)
                   (ww1 :: GHC.Prim.Double#)
                   (ww2 :: Algorithm.Dijkstra.Graph)
                   (ww3 :: GHC.Prim.Double#) ->
                 let {
                   $j :: GHC.Types.Ordering <join 0>
                   = case GHC.Prim.==## ww1 ww3 of lwild {
                       DEFAULT
                       -> case GHC.Prim.<## ww1 ww3 of lwild1 {
                            DEFAULT -> GHC.Types.GT 1# -> GHC.Types.LT }
                       1#
                       -> case Algorithm.Dijkstra.$fOrdGraph_$ccompare ww ww2 of wild {
                            DEFAULT -> GHC.Types.GT GHC.Types.LT -> GHC.Types.LT } }
                 } in
                 case Algorithm.Dijkstra.$fEqGraph_$c== ww ww2 of wild {
                   GHC.Types.False -> $j
                   GHC.Types.True
                   -> case GHC.Prim.==## ww1 ww3 of lwild {
                        DEFAULT -> $j 1# -> GHC.Types.EQ } }) -}
489878eeca7e3d88f31740dcabdcbee5
  $w$cshow ::
    GHC.Prim.Int#
    -> Algorithm.Dijkstra.Node
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><L,1*U(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Algorithm.Dijkstra.Node) ->
                 GHC.Show.$wshowSignedInt
                   6#
                   ww
                   (GHC.CString.unpackAppendCString#
                      Algorithm.Dijkstra.$fShowOD2
                      (case ww1 of ww2 { GHC.Types.I# ww3 ->
                       case GHC.Show.$wshowSignedInt
                              6#
                              ww3
                              (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                       GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))) -}
1ccb62f9e80ec2213b5920d871d5182c
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Algorithm.Dijkstra.Graph -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [0] -}
e8cf240c433168aaf7d84b92b0c03c9b
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Cost
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Algorithm.Dijkstra.Graph)
                   (ww2 :: Algorithm.Dijkstra.Cost) ->
                 let {
                   f2 :: GHC.Base.String -> GHC.Base.String
                   = Algorithm.Dijkstra.$w$cshowsPrec 11# ww1
                 } in
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case ww2 of ww3 { GHC.Types.D# ww4 ->
                     GHC.Float.$w$sshowSignedFloat
                       GHC.Float.$fShowDouble2
                       Algorithm.Dijkstra.$fShowLink3
                       ww4 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        Algorithm.Dijkstra.$fShowLink2
                        (f2 (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           Algorithm.Dijkstra.$fShowLink2
                           (f2
                              (GHC.Types.:
                                 @ GHC.Types.Char
                                 GHC.Show.showSpace1
                                 (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }) -}
dd6cebe096fdf34680761b1384b95524
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> Algorithm.Dijkstra.Node
    -> Algorithm.Dijkstra.Node
    -> GHC.Base.String
    -> (# GHC.Types.Char, [GHC.Types.Char] #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,U><L,1*U(U)><L,1*U(U)><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: Algorithm.Dijkstra.Node)
                   (ww2 :: Algorithm.Dijkstra.Node)
                   (w :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 6# of lwild {
                   DEFAULT
                   -> case ww1 of ww3 { GHC.Types.I# ww4 ->
                      GHC.Show.$wshowSignedInt
                        6#
                        ww4
                        (GHC.CString.unpackAppendCString#
                           Algorithm.Dijkstra.$fShowOD2
                           (case ww2 of ww5 { GHC.Types.I# ww6 ->
                            case GHC.Show.$wshowSignedInt 6# ww6 w of ww7 { (#,#) ww8 ww9 ->
                            GHC.Types.: @ GHC.Types.Char ww8 ww9 } })) }
                   1#
                   -> (# GHC.Show.$fShow(,)4,
                         case ww1 of ww3 { GHC.Types.I# ww4 ->
                         case GHC.Show.$wshowSignedInt
                                6#
                                ww4
                                (GHC.CString.unpackAppendCString#
                                   Algorithm.Dijkstra.$fShowOD2
                                   (case ww2 of ww5 { GHC.Types.I# ww6 ->
                                    case GHC.Show.$wshowSignedInt
                                           6#
                                           ww6
                                           (GHC.Types.:
                                              @ GHC.Types.Char
                                              GHC.Show.$fShow(,)2
                                              w) of ww7 { (#,#) ww8 ww9 ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      ww8
                                      ww9 } })) of ww5 { (#,#) ww6 ww7 ->
                         GHC.Types.: @ GHC.Types.Char ww6 ww7 } } #) }) -}
867ff128e74c62e806071172032d5feb
  $w$sgo1 ::
    (a1 -> a1 -> a1)
    -> Algorithm.Dijkstra.Node
    -> Algorithm.Dijkstra.Node
    -> a1
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a1
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
8dc5343ba3cf9b55c228c080e0fdfbf1
  $w$sgo13 ::
    Algorithm.Dijkstra.Node
    -> Algorithm.Dijkstra.Node
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a1
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a1
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U)><S,1*U>, Inline: [0] -}
b50bf413155df4338427b17982bcfac9
  $w$sgo3 ::
    Algorithm.Dijkstra.Node
    -> GHC.Prim.Int#
    -> Data.Set.Internal.Set Algorithm.Dijkstra.Node
    -> Data.Set.Internal.Set Algorithm.Dijkstra.Node
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
c8e81530a8c9c10f63d2e79e76af701d
  $w$sgo8 ::
    Algorithm.Dijkstra.Node
    -> Algorithm.Dijkstra.Node
    -> a1
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a1
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a1
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
52a226a6953087657d17bed8ef38be5e
  $wgo ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Cost
    -> [Algorithm.Dijkstra.Link]
    -> (# Algorithm.Dijkstra.Graph, Algorithm.Dijkstra.Cost #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>, Inline: [0] -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  $wgo1 ::
    Algorithm.Dijkstra.Node
    -> Algorithm.Dijkstra.Node
    -> [Algorithm.Dijkstra.OD]
    -> (# Algorithm.Dijkstra.Node, Algorithm.Dijkstra.Node #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>, Inline: [0] -}
f94fffaaa7b075b86f3fe21eed7b3fb8
  $wgo3 ::
    GHC.Prim.Int#
    -> Data.Set.Internal.Set GHC.Types.Int
    -> [GHC.Types.Int]
    -> Data.Set.Internal.Set GHC.Types.Int
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
127ea946f96895695458a3e0d1bab6fa
  $winsertLink ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Cost
    -> Algorithm.Dijkstra.Network
    -> Algorithm.Dijkstra.Network
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: Algorithm.Dijkstra.Graph)
                   (ww1 :: Algorithm.Dijkstra.Cost)
                   (w :: Algorithm.Dijkstra.Network) ->
                 case Algorithm.Dijkstra.compose
                        ww of ww2 { Algorithm.Dijkstra.:->: ww3 ww4 ->
                 case Algorithm.Dijkstra.$wpoly_go1
                        @ Algorithm.Dijkstra.Link
                        ww3
                        ww4
                        w of wild {
                   GHC.Base.Nothing
                   -> Algorithm.Dijkstra.$w$sgo8
                        @ Algorithm.Dijkstra.Link
                        ww3
                        ww4
                        (Algorithm.Dijkstra.Link ww ww1)
                        w
                   GHC.Base.Just ds -> w } }) -}
f86e25fb8be6e9928c948c7246938ebf
  $wisNextOD ::
    Algorithm.Dijkstra.Node
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Algorithm.Dijkstra.Node
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(U)><S,U><S,U><L,1*U(U)>, Inline: [0],
     Unfolding: (\ (ww :: Algorithm.Dijkstra.Node)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (ww3 :: Algorithm.Dijkstra.Node) ->
                 case GHC.Prim.==# ww1 ww2 of lwild {
                   DEFAULT -> GHC.Types.False 1# -> GHC.Classes.neInt ww ww3 }) -}
2a9d27a897a4648254625fbc7b69fb2a
  $wpoly_go1 ::
    Algorithm.Dijkstra.Node
    -> Algorithm.Dijkstra.Node
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a
    -> GHC.Base.Maybe a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*U(U)><L,U(U)><S,1*U>,
     Inline: [0] -}
0d52f0874e1064af5d23223a65472a5e
  $wpoly_go13 ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Cost
    -> Data.Map.Internal.Map k Algorithm.Dijkstra.Link
    -> (# Algorithm.Dijkstra.Graph, Algorithm.Dijkstra.Cost #)
  {- Arity: 3, Strictness: <L,U><L,U(U)><S,1*U>, Inline: [0] -}
6f415cbc30c2d721898f73091de1f838
  $wpoly_go8 ::
    GHC.Prim.Int#
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a
    -> [(Algorithm.Dijkstra.OD, a)]
    -> Data.Map.Internal.Map Algorithm.Dijkstra.OD a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
879bce0669e96a9ae057c3d979418aa2
  type Cost = GHC.Types.Double
1ccb62f9e80ec2213b5920d871d5182c
  data Graph
    = Edge Algorithm.Dijkstra.OD
    | Graph (Data.Vector.Vector Algorithm.Dijkstra.OD)
52a226a6953087657d17bed8ef38be5e
  data Link = Link Algorithm.Dijkstra.Graph Algorithm.Dijkstra.Cost
a6bcbf80007f3c19a85112711f3a7977
  type Network =
    Data.Map.Internal.Map Algorithm.Dijkstra.OD Algorithm.Dijkstra.Link
e8a8981963e5dd591c4eb7ed977f9be6
  type Node = GHC.Types.Int
7b8c1f1f9f732562b7e7ac5bbd42ab33
  data OD = Algorithm.Dijkstra.Node :->: Algorithm.Dijkstra.Node
263703a15f3881d04dd09b20547ab2e4
  type Path = Algorithm.Dijkstra.Network
1ccb62f9e80ec2213b5920d871d5182c
  compose :: Algorithm.Dijkstra.Graph -> Algorithm.Dijkstra.OD
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Algorithm.Dijkstra.Graph) ->
                 case ds of wild {
                   Algorithm.Dijkstra.Edge od -> od
                   Algorithm.Dijkstra.Graph v
                   -> case v of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      case GHC.Prim.>=# 0# ipv1 of lwild {
                        DEFAULT
                        -> case GHC.Prim.indexArray#
                                  @ Algorithm.Dijkstra.OD
                                  ipv2
                                  ipv of ds3 { Unit# ipv3 ->
                           case ipv3 of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                           letrec {
                             $wfoldr1M_loop1 :: GHC.Types.SPEC
                                                -> Algorithm.Dijkstra.Node
                                                -> Algorithm.Dijkstra.Node
                                                -> GHC.Prim.Int#
                                                -> (# Algorithm.Dijkstra.Node,
                                                      Algorithm.Dijkstra.Node #)
                               {- Arity: 4, Strictness: <S,1*U><L,U><L,U(U)><S,U>, Inline: [0] -}
                             = \ (w :: GHC.Types.SPEC)
                                 (ww3 :: Algorithm.Dijkstra.Node)
                                 (ww4 :: Algorithm.Dijkstra.Node)
                                 (ww5 :: GHC.Prim.Int#) ->
                               case w of ds5 { DEFAULT ->
                               case GHC.Prim.>=# ww5 ipv1 of lwild1 {
                                 DEFAULT
                                 -> case GHC.Prim.indexArray#
                                           @ Algorithm.Dijkstra.OD
                                           ipv2
                                           (GHC.Prim.+# ipv ww5) of ds1 { Unit# ipv4 ->
                                    case ipv4 of ww6 { Algorithm.Dijkstra.:->: ww7 ww8 ->
                                    case $wfoldr1M_loop1
                                           GHC.Types.SPEC
                                           ww7
                                           ww8
                                           (GHC.Prim.+# ww5 1#) of ww9 { (#,#) ww10 ww11 ->
                                    case ww4 of wild1 { GHC.Types.I# x ->
                                    case ww10 of wild2 { GHC.Types.I# y ->
                                    case GHC.Prim.==# x y of lwild2 {
                                      DEFAULT
                                      -> case Algorithm.Dijkstra.compose2
                                         ret_ty (# Algorithm.Dijkstra.Node,
                                                   Algorithm.Dijkstra.Node #)
                                         of {}
                                      1# -> (# ww3, ww11 #) } } } } } }
                                 1# -> (# ww3, ww4 #) } }
                           } in
                           case $wfoldr1M_loop1
                                  GHC.Types.SPEC
                                  ww1
                                  ww2
                                  1# of ww3 { (#,#) ww4 ww5 ->
                           Algorithm.Dijkstra.:->: ww4 ww5 } } }
                        1#
                        -> Algorithm.Dijkstra.compose1
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0]
                                <Algorithm.Dijkstra.OD>_R) } } }) -}
12aa281128f1ecaa6f67190aaa1bc282
  compose1 :: Data.Vector.Fusion.Util.Id Algorithm.Dijkstra.OD
  {- Strictness: x -}
7b8c1f1f9f732562b7e7ac5bbd42ab33
  compose2 :: Algorithm.Dijkstra.OD
  {- Strictness: x -}
67a479d0a07fdd80942b079c688ec013
  insertLink ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Network -> Algorithm.Dijkstra.Network
  {- Arity: 2, Strictness: <S(SL),1*U(U,U)><S,U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.Link)
                   (w1 :: Algorithm.Dijkstra.Network) ->
                 case w of ww { Algorithm.Dijkstra.Link ww1 ww2 ->
                 Algorithm.Dijkstra.$winsertLink ww1 ww2 w1 }) -}
87e957cec9b489077d7298541ab0f999
  inverseNetwork ::
    Algorithm.Dijkstra.Network -> Algorithm.Dijkstra.Network
  {- Arity: 1,
     Unfolding: (Algorithm.Dijkstra.inverseNetwork_go13
                   (Data.Map.Internal.Tip
                      @ Algorithm.Dijkstra.OD
                      @ Algorithm.Dijkstra.Link)) -}
18182d9f982990547a708f2fd926cc4b
  inverseNetwork_go13 ::
    Data.Map.Internal.Map Algorithm.Dijkstra.OD Algorithm.Dijkstra.Link
    -> Data.Map.Internal.Map
         Algorithm.Dijkstra.OD Algorithm.Dijkstra.Link
    -> Data.Map.Internal.Map
         Algorithm.Dijkstra.OD Algorithm.Dijkstra.Link
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
7c65504a57a22d15ba04f0a1d3b12255
  invertOD :: Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Algorithm.Dijkstra.OD) ->
                 case ds of wild { Algorithm.Dijkstra.:->: n1 n2 ->
                 Algorithm.Dijkstra.:->: n2 n1 }) -}
afce4545eeb67c805b5a5a656159aecf
  isNextGraph ::
    Algorithm.Dijkstra.Graph
    -> Algorithm.Dijkstra.Graph -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
b973bc8f62d28b351c58f9580d126033
  isNextLink ::
    Algorithm.Dijkstra.Link
    -> Algorithm.Dijkstra.Link -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S(SL),1*U(1*U,A)><S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Algorithm.Dijkstra.Link)
                   (ds1 :: Algorithm.Dijkstra.Link) ->
                 case ds of wild { Algorithm.Dijkstra.Link g1 ds2 ->
                 case ds1 of wild1 { Algorithm.Dijkstra.Link g2 ds3 ->
                 Algorithm.Dijkstra.isNextGraph g1 g2 } }) -}
e1265ef30ab5fbd08b5c6ba10f8d1c69
  isNextOD ::
    Algorithm.Dijkstra.OD -> Algorithm.Dijkstra.OD -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LS(S)),1*U(1*U(U),1*U(U))><S(S(S)L),1*U(1*U(U),1*U(U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.Dijkstra.OD) (w1 :: Algorithm.Dijkstra.OD) ->
                 case w of ww { Algorithm.Dijkstra.:->: ww1 ww2 ->
                 case ww2 of ww3 { GHC.Types.I# ww4 ->
                 case w1 of ww5 { Algorithm.Dijkstra.:->: ww6 ww7 ->
                 case ww6 of ww8 { GHC.Types.I# ww9 ->
                 Algorithm.Dijkstra.$wisNextOD ww1 ww4 ww9 ww7 } } } }) -}
6e3c6e4c102fca2a6daa9600168e88ad
  networkFromList ::
    [(Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Cost)]
    -> Algorithm.Dijkstra.Network
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (odcs :: [(Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Cost)]) ->
                 Algorithm.Dijkstra.$sfromList1
                   @ Algorithm.Dijkstra.Link
                   (GHC.Base.build
                      @ (Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Link)
                      (\ @ b1
                         (c :: (Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Link)
                               -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ (Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Cost)
                         @ b1
                         (GHC.Base.mapFB
                            @ (Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Link)
                            @ b1
                            @ (Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Cost)
                            c
                            Algorithm.Dijkstra.networkFromList1)
                         n
                         odcs))) -}
1479e7e03f39265516f96c8139c88794
  networkFromList1 ::
    (Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Cost)
    -> (Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Link)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: (Algorithm.Dijkstra.OD, Algorithm.Dijkstra.Cost)) ->
                 case ds of wild { (,) od c ->
                 (od, Algorithm.Dijkstra.Link (Algorithm.Dijkstra.Edge od) c) }) -}
c0ad004bc2201eaae4125613bd3c165d
  nodeSet ::
    Algorithm.Dijkstra.Graph
    -> Data.Set.Internal.Set Algorithm.Dijkstra.Node
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Algorithm.Dijkstra.Graph) ->
                 case ds of wild {
                   Algorithm.Dijkstra.Edge ds1
                   -> case ds1 of wild1 { Algorithm.Dijkstra.:->: n1 n2 ->
                      Algorithm.Dijkstra.$sfromList
                        (GHC.Types.:
                           @ (GHC.Exts.Item [Algorithm.Dijkstra.Node])
                           n1 `cast` (Sub (Sym (GHC.Exts.D:R:Item[][0] <GHC.Types.Int>_N)))
                           (GHC.Types.:
                              @ (GHC.Exts.Item [Algorithm.Dijkstra.Node])
                              n2 `cast` (Sub (Sym (GHC.Exts.D:R:Item[][0] <GHC.Types.Int>_N)))
                              (GHC.Types.[] @ (GHC.Exts.Item [Algorithm.Dijkstra.Node]))))
                          `cast`
                        ([Sub (GHC.Exts.D:R:Item[][0] <GHC.Types.Int>_N)])_R }
                   Algorithm.Dijkstra.Graph v
                   -> case v of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                      case GHC.Prim.<# 0# ipv1 of lwild {
                        DEFAULT
                        -> case Algorithm.Dijkstra.nodeSet1 ipv1
                           ret_ty (Data.Set.Internal.Set Algorithm.Dijkstra.Node)
                           of {}
                        1#
                        -> case GHC.Prim.indexArray#
                                  @ Algorithm.Dijkstra.OD
                                  ipv2
                                  ipv of ds3 { Unit# ipv3 ->
                           case ipv3 of wild1 { Algorithm.Dijkstra.:->: n1 ds1 ->
                           let {
                             z :: Data.Set.Internal.Set Algorithm.Dijkstra.Node
                             = Algorithm.Dijkstra.$sfromList
                                 (GHC.Types.:
                                    @ (GHC.Exts.Item
                                         (Data.Set.Internal.Set Algorithm.Dijkstra.Node))
                                    n1
                                      `cast`
                                    (Sub (Sym (Data.Set.Internal.D:R:ItemSet[0] <GHC.Types.Int>_N)))
                                    (GHC.Types.[]
                                       @ (GHC.Exts.Item
                                            (Data.Set.Internal.Set Algorithm.Dijkstra.Node))))
                                   `cast`
                                 ([Sub (Data.Set.Internal.D:R:ItemSet[0] <GHC.Types.Int>_N)])_R
                           } in
                           letrec {
                             $wfoldrM_loop :: GHC.Types.SPEC
                                              -> GHC.Prim.Int#
                                              -> Data.Vector.Fusion.Util.Id
                                                   (Data.Set.Internal.Set Algorithm.Dijkstra.Node)
                               {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                             = \ (w :: GHC.Types.SPEC) (ww :: GHC.Prim.Int#) ->
                               case w of ds5 { DEFAULT ->
                               case GHC.Prim.>=# ww ipv1 of lwild1 {
                                 DEFAULT
                                 -> case GHC.Prim.indexArray#
                                           @ Algorithm.Dijkstra.OD
                                           ipv2
                                           (GHC.Prim.+# ipv ww) of ds2 { Unit# ipv4 ->
                                    case ipv4 of wild2 { Algorithm.Dijkstra.:->: ds4 n2 ->
                                    case n2 of ww1 { GHC.Types.I# ww2 ->
                                    (Algorithm.Dijkstra.$w$sgo3
                                       ww1
                                       ww2
                                       ($wfoldrM_loop GHC.Types.SPEC (GHC.Prim.+# ww 1#))
                                         `cast`
                                       (Data.Vector.Fusion.Util.N:Id[0]
                                            <Data.Set.Internal.Set Algorithm.Dijkstra.Node>_R))
                                      `cast`
                                    (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                              <Data.Set.Internal.Set
                                                 Algorithm.Dijkstra.Node>_R)) } } }
                                 1#
                                 -> z `cast`
                                    (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                              <Data.Set.Internal.Set
                                                 Algorithm.Dijkstra.Node>_R)) } }
                           } in
                           ($wfoldrM_loop GHC.Types.SPEC 0#)
                             `cast`
                           (Data.Vector.Fusion.Util.N:Id[0]
                                <Data.Set.Internal.Set Algorithm.Dijkstra.Node>_R) } } } } }) -}
f2d670542c4c4a7944c619b0fa85bb03
  nodeSet1 :: GHC.Prim.Int# -> Algorithm.Dijkstra.OD
  {- Arity: 1, Strictness: <B,U>x -}
9d835bca6c8be8649cc0bba4919253cc
  shortestPath ::
    Algorithm.Dijkstra.Network -> Algorithm.Dijkstra.Path
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (n_ :: Algorithm.Dijkstra.Network) ->
                 Algorithm.Dijkstra.shortestPath_go
                   n_
                   (Data.Map.Internal.Tip
                      @ Algorithm.Dijkstra.OD
                      @ Algorithm.Dijkstra.Link)) -}
0296029e02972224558ba8c2f0106108
  shortestPath_go ::
    Algorithm.Dijkstra.Network
    -> Algorithm.Dijkstra.Path -> Algorithm.Dijkstra.Path
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
instance [incoherent] GHC.Classes.Eq [Algorithm.Dijkstra.Graph]
  = Algorithm.Dijkstra.$fEqGraph
instance [incoherent] GHC.Classes.Eq [Algorithm.Dijkstra.Link]
  = Algorithm.Dijkstra.$fEqLink
instance [incoherent] GHC.Classes.Eq [Algorithm.Dijkstra.OD]
  = Algorithm.Dijkstra.$fEqOD
instance [incoherent] GHC.Classes.Ord [Algorithm.Dijkstra.Graph]
  = Algorithm.Dijkstra.$fOrdGraph
instance [incoherent] GHC.Classes.Ord [Algorithm.Dijkstra.Link]
  = Algorithm.Dijkstra.$fOrdLink
instance [incoherent] GHC.Classes.Ord [Algorithm.Dijkstra.OD]
  = Algorithm.Dijkstra.$fOrdOD
instance [incoherent] GHC.Base.Semigroup [Algorithm.Dijkstra.Graph]
  = Algorithm.Dijkstra.$fSemigroupGraph
instance [incoherent] GHC.Base.Semigroup [Algorithm.Dijkstra.Link]
  = Algorithm.Dijkstra.$fSemigroupLink
instance [incoherent] GHC.Base.Semigroup [Algorithm.Dijkstra.OD]
  = Algorithm.Dijkstra.$fSemigroupOD
instance [incoherent] GHC.Show.Show [Algorithm.Dijkstra.Graph]
  = Algorithm.Dijkstra.$fShowGraph
instance [incoherent] GHC.Show.Show [Algorithm.Dijkstra.Link]
  = Algorithm.Dijkstra.$fShowLink
instance [incoherent] GHC.Show.Show [Algorithm.Dijkstra.OD]
  = Algorithm.Dijkstra.$fShowOD
"SPEC/Algorithm.Dijkstra fromList @ Int" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                     GHC.Types.Int)
  Data.Set.Internal.fromList @ GHC.Types.Int $dOrd
  = Algorithm.Dijkstra.$sfromList
"SPEC/Algorithm.Dijkstra fromList @ OD _" forall @ a
                                                 ($dOrd :: GHC.Classes.Ord Algorithm.Dijkstra.OD)
  Data.Map.Strict.Internal.fromList @ Algorithm.Dijkstra.OD @ a $dOrd
  = Algorithm.Dijkstra.$sfromList1 @ a
"SPEC/Algorithm.Dijkstra intersection @ Node" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                          Algorithm.Dijkstra.Node)
  Data.Set.Internal.intersection @ GHC.Types.Int $dOrd
  = Algorithm.Dijkstra.$sintersection
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

