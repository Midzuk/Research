
==================== FINAL INTERFACE ====================
2018-09-16 08:12:24.783697 UTC

interface research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf:Algorithm.FrankWolfe 8043
  interface hash: dc7ac9d9dbcd0e9ab917e0fb4366f8f6
  ABI hash: 0c27e7342bfb2b12e4883f8dc5af8082
  export-list hash: cdf3bed8d4cbb408859f8eab2c3c6aa7
  orphan hash: e5be077bcf48d5097ecd8d874c378125
  flag hash: 9334a1581bfa150bc1ee4f5539106a10
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Algorithm.FrankWolfe.allOrNothing
  Algorithm.FrankWolfe.bpr
  Algorithm.FrankWolfe.diffLinkFlow
  Algorithm.FrankWolfe.frankWolfe
  Algorithm.FrankWolfe.makeLinkParameter
  Algorithm.FrankWolfe.makeNetwork
  Algorithm.FrankWolfe.sumTime
  Algorithm.FrankWolfe.Alpha
  Algorithm.FrankWolfe.Beta
  Algorithm.FrankWolfe.Capacity
  Algorithm.FrankWolfe.Flow
  Algorithm.FrankWolfe.LinkFlow
  Algorithm.FrankWolfe.LinkParameter
  Algorithm.FrankWolfe.Time
  Algorithm.FrankWolfe.Tolerance
  Algorithm.FrankWolfe.Trip
module dependencies: Algorithm.Search Link
package dependencies: array-0.5.2.0 base-4.11.1.0
                      containers-0.5.11.0 deepseq-1.4.3.0 ghc-prim-0.5.2.0
                      integer-gmp-1.0.2.0 primitive-0.6.3.0 transformers-0.5.5.0
                      vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Set.Internal
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array vector-0.12.0.1:Data.Vector
import  -/  base-4.11.1.0:Data.Foldable 6cf3e918f22d03c0870804f05cd183d1
import  -/  base-4.11.1.0:Debug.Trace a039f196c8a0dd416a8318b57f69c6b6
import  -/  base-4.11.1.0:GHC.Base b7dd14d8fe8d606dde5678ea6b0575e9
import  -/  base-4.11.1.0:GHC.Float 99ddb84df6cc12bd84829dd8cd755ac2
import  -/  base-4.11.1.0:GHC.Num 5de8df0185e7e8d8ec29b3c61e2c8606
import  -/  base-4.11.1.0:GHC.Real 032ed0a1053f878238d78e95e75f2edf
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  containers-0.5.11.0:Data.Map.Internal a2314ee57e16ff1fe3af08500b455e81
import  -/  containers-0.5.11.0:Data.Map.Strict ea9cec0dc7e4353594a3f7d520e82c83
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 9061dd54223c7e14ff6837ade55c2970
import  -/  containers-0.5.11.0:Data.Set eb0fbc743d474b13246bc4dbf4a83977
import  -/  ghc-prim-0.5.2.0:GHC.Classes f7d67fd97d5a20e9252c9597d1aa387b
import  -/  Algorithm.Search 32e402e997ae1d1ea2fff537ab8c9376
  exports: 25f2569e2c7bb0040bdcd8d74f40f40f
  searchMin 9e8320205788984e72c1bf2471da90be
import  -/  Link bf2ee027d71c5616cddc4285e321450e
  exports: 7b06ee901c1aa94d440f125411866824
  Edge 9c7caf56fe5390354c16ff30f481fcd9
  Graph 1ab9b38ca676f40a4ec3ae2e2295da9b
  Link 64c8547577d67524846a05ac0d306c1f
  Network 38f73b02ca8f4013f8fcd90b00943140
  OD 2011e700b73151b039f3e95bd1da7580
  shortestPath 2963057b6d3ce67bc6f760b56c63ada2
import  -/  vector-0.12.0.1:Data.Vector 136e29dd913b307387c1c07459bacd27
52ae6da3619754119ccfb7ea6d1d8c46
  $sunionWith ::
    (a -> a -> a)
    -> Data.Map.Internal.Map Link.OD a
    -> Data.Map.Internal.Map Link.OD a
    -> Data.Map.Internal.Map Link.OD a
  {- Arity: 3, Strictness: <L,C(C1(U))><S,1*U><S,1*U>, Inline: [~] -}
a4ebd20d814f6a13d09d1fd809f99759
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Algorithm.FrankWolfe.$trModule3
                   Algorithm.FrankWolfe.$trModule1) -}
c7f1ca60afa4bc6abd3cca9541b9161a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.FrankWolfe.$trModule2) -}
5b1ff6aed451dbe77aee54559278fe21
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Algorithm.FrankWolfe"#) -}
0c839025ef818bd39a3527627a5d360f
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Algorithm.FrankWolfe.$trModule4) -}
307194fc0de504256444eb37e5f2b22c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("research-0.1.0.0-j7VdR2I2YJJFJBbRfx0Cf"#) -}
a5d3c788b925e7362816d1b4f754e7d3
  $w$sgo1 ::
    (a1 -> a1 -> a1)
    -> Link.Node
    -> Link.Node
    -> a1
    -> Data.Map.Internal.Map Link.OD a1
    -> Data.Map.Internal.Map Link.OD a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
618df0ee067d1c5fe2eb85e477181f0a
  $w$sgo13 ::
    Link.Node
    -> Link.Node
    -> Data.Map.Internal.Map Link.OD a1
    -> (# Data.Map.Internal.Map Link.OD a1, GHC.Base.Maybe a1,
          Data.Map.Internal.Map Link.OD a1 #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U(U)><S,1*U>, Inline: [0] -}
310ca635b6f8017dfeb1569fa20eeb5d
  $w$sgo2 ::
    (a1 -> a1 -> a1)
    -> Link.Node
    -> Link.Node
    -> a1
    -> Data.Map.Internal.Map Link.OD a1
    -> Data.Map.Internal.Map Link.OD a1
  {- Arity: 5,
     Strictness: <L,1*C1(C1(U))><L,U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
46e1845ecd66cd9efb0996a6adabd858
  $w$sgo8 ::
    Link.Node
    -> Link.Node
    -> a1
    -> Data.Map.Internal.Map Link.OD a1
    -> Data.Map.Internal.Map Link.OD a1
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><S,1*U><S,1*U>,
     Inline: [0] -}
44b9afa8b8b8bd70a74af017785fc8fe
  $wfrankWolfe ::
    GHC.Prim.Double#
    -> Algorithm.FrankWolfe.Trip
    -> Algorithm.FrankWolfe.LinkParameter
    -> Data.Map.Internal.Map Link.OD Algorithm.Search.X
  {- Arity: 3, Strictness: <S,U><S,U><L,U>, Inline: [0] -}
327bc49ac4aeb420147e1b8c8892e4ae
  $wpoly_go1 ::
    GHC.Prim.Int# -> Link.Node -> Data.Map.Internal.Map Link.OD a -> a
  {- Arity: 3, Strictness: <S,U><L,U(U)><S,1*U>, Inline: [0] -}
b87f1f35b559d8375cd56a7e037fd87c
  $wpoly_go13 ::
    GHC.Prim.Double#
    -> Data.Map.Internal.Map k Algorithm.FrankWolfe.Flow
    -> GHC.Prim.Double#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: [0] -}
3a53e4e64464d0a3eb28fa83db46fdad
  $wsumTime ::
    Algorithm.FrankWolfe.LinkParameter
    -> Algorithm.FrankWolfe.LinkFlow -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: Algorithm.FrankWolfe.LinkParameter)
                   (w1 :: Algorithm.FrankWolfe.LinkFlow) ->
                 letrec {
                   $wgo13 :: GHC.Prim.Double#
                             -> Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Time
                             -> GHC.Prim.Double#
                     {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [0] -}
                   = \ (ww :: GHC.Prim.Double#)
                       (w2 :: Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Time) ->
                     case w2 of wild {
                       Data.Map.Internal.Bin dt kx x l r
                       -> case kx of ww1 { Link.:->: ww2 ww3 ->
                          case $wgo13 ww r of ww4 { DEFAULT ->
                          case ww2 of ww5 { GHC.Types.I# ww6 ->
                          case Algorithm.FrankWolfe.$wpoly_go1
                                 @ (Algorithm.FrankWolfe.Time, Algorithm.FrankWolfe.Capacity,
                                    Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                                 ww6
                                 ww3
                                 w of wild1 { (,,,) t c a b ->
                          case t of wild2 { GHC.Types.D# x1 ->
                          case x of wild3 { GHC.Types.D# y ->
                          case a of wild4 { GHC.Types.D# x2 ->
                          case b of wild5 { GHC.Types.D# x3 ->
                          case GHC.Prim./## x2 (GHC.Prim.+## x3 1.0##) of wild6 { DEFAULT ->
                          case c of wild7 { GHC.Types.D# y1 ->
                          case GHC.Prim./## y y1 of wild8 { DEFAULT ->
                          $wgo13
                            (GHC.Prim.+##
                               ww4
                               (GHC.Prim.*##
                                  (GHC.Prim.*## x1 y)
                                  (GHC.Prim.+##
                                     1.0##
                                     (GHC.Prim.*## wild6 (GHC.Prim.**## wild8 x3)))))
                            l } } } } } } } } } } }
                       Data.Map.Internal.Tip -> ww }
                 } in
                 $wgo13 0.0## w1) -}
082f88928724a4ad6b3507583c3bd7c3
  type Alpha = GHC.Types.Double
d3bc5c26163417f847a90b85a60b6910
  type Beta = GHC.Types.Double
c3ac83b627a7e68d84cef2ae3890928b
  type Capacity = GHC.Types.Double
3c36da93e88aa464be7e990702bdb2dd
  type Flow = GHC.Types.Double
5276784f6f6386d279e4e69692733641
  type LinkFlow = Algorithm.FrankWolfe.Trip
88e4a489c72bffbb4eb7eebe24eefe18
  type LinkParameter =
    Data.Map.Internal.Map
      Link.OD
      (Algorithm.FrankWolfe.Time, Algorithm.FrankWolfe.Capacity,
       Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
37df44864aeb84adccdb4f7750b932a5
  type Time = GHC.Types.Double
161b3e00c159df95e4cfadbdb8471bb5
  type Tolerance = GHC.Types.Double
1d9df55826e0ddb7eceb528baf77814a
  type Trip = Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Flow
766379f1aa5b6ef3896c91a4dae9fc3b
  allOrNothing ::
    Algorithm.FrankWolfe.Trip
    -> Link.Network -> Algorithm.FrankWolfe.LinkFlow
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: (\ (t :: Algorithm.FrankWolfe.Trip)
                   (n :: Link.Network) ->
                 let {
                   p :: Link.Path
                   = Link.shortestPath_go
                       n
                       (Data.Map.Internal.Tip @ Link.OD @ Link.Link)
                 } in
                 letrec {
                   go :: Algorithm.FrankWolfe.Trip
                         -> Algorithm.FrankWolfe.LinkFlow -> Algorithm.FrankWolfe.LinkFlow
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: Algorithm.FrankWolfe.Trip)
                       (lf :: Algorithm.FrankWolfe.LinkFlow) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt ds1 ds2 ds3 ds4
                       -> case Data.Map.Internal.minViewSure
                                 @ Link.OD
                                 @ Algorithm.FrankWolfe.Flow
                                 ds1
                                 ds2
                                 ds3
                                 ds4 of wild1 { Data.Map.Internal.MinView km xm t1 ->
                          case km of ww { Link.:->: ww1 ww2 ->
                          case ww1 of ww3 { GHC.Types.I# ww4 ->
                          case Algorithm.FrankWolfe.$wpoly_go1
                                 @ Link.Link
                                 ww4
                                 ww2
                                 p of wild2 { Link.Link ds7 ds8 ->
                          case ds7 of wild3 {
                            Link.Edge od
                            -> case od of ww5 { Link.:->: ww6 ww7 ->
                               go
                                 t1
                                 (Algorithm.FrankWolfe.$w$sgo1
                                    @ GHC.Types.Double
                                    GHC.Float.plusDouble
                                    ww6
                                    ww7
                                    xm
                                    lf) }
                            Link.Graph s
                            -> case s of v2 { Data.Vector.Vector ipv ipv1 ipv2 ->
                               letrec {
                                 $wfoldrM_loop :: GHC.Types.SPEC
                                                  -> GHC.Prim.Int#
                                                  -> Data.Vector.Fusion.Util.Id
                                                       (Data.Map.Internal.Map
                                                          Link.OD Algorithm.FrankWolfe.Flow)
                                   {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [0] -}
                                 = \ (w :: GHC.Types.SPEC) (ww5 :: GHC.Prim.Int#) ->
                                   case w of ds5 { DEFAULT ->
                                   case GHC.Prim.>=# ww5 ipv1 of lwild {
                                     DEFAULT
                                     -> case GHC.Prim.indexArray#
                                               @ Link.OD
                                               ipv2
                                               (GHC.Prim.+# ipv ww5) of ds9 { Unit# ipv3 ->
                                        case ipv3 of ww6 { Link.:->: ww7 ww8 ->
                                        (Algorithm.FrankWolfe.$w$sgo1
                                           @ GHC.Types.Double
                                           GHC.Float.plusDouble
                                           ww7
                                           ww8
                                           xm
                                           ($wfoldrM_loop GHC.Types.SPEC (GHC.Prim.+# ww5 1#))
                                             `cast`
                                           (Data.Vector.Fusion.Util.N:Id[0]
                                                <Data.Map.Internal.Map
                                                   Link.OD Algorithm.FrankWolfe.Flow>_R))
                                          `cast`
                                        (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                  <Data.Map.Internal.Map
                                                     Link.OD Algorithm.FrankWolfe.Flow>_R)) } }
                                     1#
                                     -> lf
                                          `cast`
                                        (Sym (Data.Vector.Fusion.Util.N:Id[0]
                                                  <Data.Map.Internal.Map
                                                     Link.OD Algorithm.FrankWolfe.Flow>_R)) } }
                               } in
                               go
                                 t1
                                 ($wfoldrM_loop GHC.Types.SPEC 0#)
                                   `cast`
                                 (Data.Vector.Fusion.Util.N:Id[0]
                                      <Data.Map.Internal.Map
                                         Link.OD Algorithm.FrankWolfe.Flow>_R) } } } } } }
                       Data.Map.Internal.Tip -> lf }
                 } in
                 go
                   t
                   (Data.Map.Internal.Tip @ Link.OD @ Algorithm.FrankWolfe.Flow)) -}
16c4170efb601081caeb3dd6e5ad6d0f
  bpr ::
    Algorithm.FrankWolfe.LinkParameter
    -> Algorithm.FrankWolfe.LinkFlow -> Link.Network
  {- Arity: 2, Strictness: <S,U><S,1*U>,
     Unfolding: (\ (lp :: Algorithm.FrankWolfe.LinkParameter)
                   (_lf :: Algorithm.FrankWolfe.LinkFlow) ->
                 letrec {
                   go :: Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Capacity
                         -> Data.Map.Internal.Map Link.OD Link.Link
                         -> Data.Map.Internal.Map Link.OD Link.Link
                     <join 2> {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
                   = \ (ds :: Data.Map.Internal.Map
                                Link.OD Algorithm.FrankWolfe.Capacity)
                       (n :: Data.Map.Internal.Map Link.OD Link.Link) ->
                     case ds of wild {
                       Data.Map.Internal.Bin dt ds1 ds2 ds3 ds4
                       -> case Data.Map.Internal.minViewSure
                                 @ Link.OD
                                 @ Algorithm.FrankWolfe.Capacity
                                 ds1
                                 ds2
                                 ds3
                                 ds4 of wild1 { Data.Map.Internal.MinView km xm t ->
                          case km of ww { Link.:->: ww1 ww2 ->
                          go
                            t
                            (Algorithm.FrankWolfe.$w$sgo8
                               @ Link.Link
                               ww1
                               ww2
                               (Link.Link
                                  (Link.Edge ww)
                                  (case ww1 of ww3 { GHC.Types.I# ww4 ->
                                   case Algorithm.FrankWolfe.$wpoly_go1
                                          @ (Algorithm.FrankWolfe.Time,
                                             Algorithm.FrankWolfe.Capacity,
                                             Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                                          ww4
                                          ww2
                                          lp of wild2 { (,,,) t1 c a b ->
                                   case t1 of wild3 { GHC.Types.D# x ->
                                   case a of wild4 { GHC.Types.D# x1 ->
                                   case xm of wild5 { GHC.Types.D# x2 ->
                                   case c of wild6 { GHC.Types.D# y ->
                                   case GHC.Prim./## x2 y of wild7 { DEFAULT ->
                                   case b of wild8 { GHC.Types.D# y1 ->
                                   GHC.Types.D#
                                     (GHC.Prim.*##
                                        x
                                        (GHC.Prim.+##
                                           1.0##
                                           (GHC.Prim.*##
                                              x1
                                              (GHC.Prim.**## wild7 y1)))) } } } } } } } }))
                               n) } }
                       Data.Map.Internal.Tip -> n }
                 } in
                 go
                   _lf
                   (Data.Map.Strict.Internal.mapWithKey
                      @ Link.OD
                      @ (Link.Cost, Algorithm.FrankWolfe.Capacity,
                         Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                      @ Link.Link
                      Algorithm.FrankWolfe.bpr1
                      lp)) -}
501a946d8dd274cb855fbabadbff2743
  bpr1 ::
    Link.OD
    -> (Link.Cost, Algorithm.FrankWolfe.Capacity,
        Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
    -> Link.Link
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U(U,A,A,A)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (od :: Link.OD)
                   (ds :: (Link.Cost, Algorithm.FrankWolfe.Capacity,
                           Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)) ->
                 case ds of wild { (,,,) t c a b -> Link.Link (Link.Edge od) t }) -}
33130b4b6728fc086d32e6adffa98b0c
  diffLinkFlow ::
    Algorithm.FrankWolfe.LinkFlow
    -> Algorithm.FrankWolfe.LinkFlow -> Algorithm.FrankWolfe.LinkFlow
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (lf1 :: Algorithm.FrankWolfe.LinkFlow)
                   (lf2 :: Algorithm.FrankWolfe.LinkFlow) ->
                 Algorithm.FrankWolfe.$sunionWith
                   @ GHC.Types.Double
                   GHC.Float.plusDouble
                   lf1
                   (Algorithm.FrankWolfe.diffLinkFlow_go8 lf2)) -}
a46ca300a26a362d8f924a50c65cd2cc
  diffLinkFlow_go8 ::
    Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Flow
    -> Data.Map.Internal.Map Link.OD Algorithm.FrankWolfe.Flow
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
38422d642f4bbfa18591700ebd068f22
  frankWolfe ::
    Algorithm.FrankWolfe.Tolerance
    -> Algorithm.FrankWolfe.Trip
    -> Algorithm.FrankWolfe.LinkParameter
    -> Algorithm.FrankWolfe.LinkFlow
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Algorithm.FrankWolfe.Tolerance)
                   (w1 :: Algorithm.FrankWolfe.Trip)
                   (w2 :: Algorithm.FrankWolfe.LinkParameter) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 Algorithm.FrankWolfe.$wfrankWolfe ww1 w1 w2 }) -}
3af75475f714034757815f5a4d77e80c
  makeLinkParameter ::
    Algorithm.FrankWolfe.Capacity
    -> Algorithm.FrankWolfe.Alpha
    -> Algorithm.FrankWolfe.Beta
    -> Link.Network
    -> Algorithm.FrankWolfe.LinkParameter
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,U><L,U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ (c :: Algorithm.FrankWolfe.Capacity)
                   (a :: Algorithm.FrankWolfe.Alpha)
                   (b :: Algorithm.FrankWolfe.Beta)
                   (eta :: Data.Map.Internal.Map Link.OD Link.Link) ->
                 Data.Map.Strict.Internal.mapWithKey
                   @ Link.OD
                   @ Link.Link
                   @ (Link.Cost, Algorithm.FrankWolfe.Capacity,
                      Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                   (\ (od :: Link.OD) (ds :: Link.Link)[OneShot] ->
                    case ds of wild { Link.Link ds1 t -> (t, c, a, b) })
                   eta) -}
7f65af4ecab0202c39310a88b6e586e6
  makeNetwork :: Algorithm.FrankWolfe.LinkParameter -> Link.Network
  {- Arity: 1, HasNoCafRefs,
     Unfolding: (Data.Map.Strict.Internal.mapWithKey
                   @ Link.OD
                   @ (Link.Cost, Algorithm.FrankWolfe.Capacity,
                      Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                   @ Link.Link
                   Algorithm.FrankWolfe.bpr1) -}
198d83f4e5f55f8d3a046b434bcc8318
  sumTime ::
    Algorithm.FrankWolfe.LinkParameter
    -> Algorithm.FrankWolfe.LinkFlow -> Algorithm.FrankWolfe.Time
  {- Arity: 2, Strictness: <L,U><S,1*U>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Algorithm.FrankWolfe.LinkParameter)
                   (w1 :: Algorithm.FrankWolfe.LinkFlow) ->
                 case Algorithm.FrankWolfe.$wsumTime w w1 of ww { DEFAULT ->
                 GHC.Types.D# ww }) -}
"SPEC/Algorithm.FrankWolfe unionWith @ OD _" [orphan] forall @ a
                                                             ($dOrd :: GHC.Classes.Ord Link.OD)
  Data.Map.Strict.Internal.unionWith @ Link.OD @ a $dOrd
  = Algorithm.FrankWolfe.$sunionWith @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

