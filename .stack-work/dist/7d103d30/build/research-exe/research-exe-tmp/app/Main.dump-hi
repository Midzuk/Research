
==================== FINAL INTERFACE ====================
2018-09-16 16:06:16.0417057 UTC

interface main:Main 8043
  interface hash: 39d7719accb5c711e7b973efecef1a3d
  ABI hash: 9f89ce7874e1f16514e62ac2da78ec5b
  export-list hash: fece99da8940d135a0e703e148227368
  orphan hash: 1b23a449aeece51c0732c7f17d0f7891
  flag hash: 75904ea5558d0492837681a665558862
  opt_hash: 14e536840aca4e889cad654e6f9b79c1
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.linkParameter
  Main.main
  Main.network
  Main.trip
module dependencies:
package dependencies: Only-0.1 Win32-2.6.1.0 array-0.5.2.0
                      attoparsec-0.13.2.2 base-4.11.1.0 binary-0.8.5.1
                      bytestring-0.10.8.2 cassava-0.5.1.0 containers-0.5.11.0
                      deepseq-1.4.3.0 directory-1.3.1.5 filepath-1.4.2 ghc-prim-0.5.2.0
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.1
                      primitive-0.6.3.0 research-0.1.0.0 scientific-0.3.6.2 text-1.2.3.0
                      text-short-0.1.2 time-1.8.0.2 transformers-0.5.5.0
                      unordered-containers-0.2.9.0 vector-0.12.0.1
orphans: vector-0.12.0.1:Data.Vector.Unboxed
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.0:Data.Text.Lazy
         text-1.2.3.0:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.0:Data.Text.Show time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         vector-0.12.0.1:Data.Vector.Fusion.Bundle
         transformers-0.5.5.0:Control.Monad.Trans.Error
         base-4.11.1.0:GHC.Float base-4.11.1.0:GHC.Base
family instance modules: Only-0.1:Data.Tuple.Only
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.11.1.0:Control.Applicative base-4.11.1.0:Data.Complex
                         base-4.11.1.0:Data.Functor.Compose base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         primitive-0.6.3.0:Data.Primitive.ByteArray text-1.2.3.0:Data.Text
                         text-1.2.3.0:Data.Text.Lazy
                         text-short-0.1.2:Data.Text.Short.Internal
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         vector-0.12.0.1:Data.Vector vector-0.12.0.1:Data.Vector.Primitive
                         vector-0.12.0.1:Data.Vector.Unboxed
                         vector-0.12.0.1:Data.Vector.Unboxed.Base
import  -/  base-4.11.1.0:Prelude aca391812f777207b15d62bb5b9feb63
import  -/  base-4.11.1.0:System.IO 7331ec6891ba7763ad75720258619382
import  -/  base-4.11.1.0:System.IO.Unsafe 521a48f7ad7d15d4404602d81dbc65d6
import  -/  containers-0.5.11.0:Data.Map.Internal a2314ee57e16ff1fe3af08500b455e81
import  -/  containers-0.5.11.0:Data.Map.Strict ea9cec0dc7e4353594a3f7d520e82c83
import  -/  containers-0.5.11.0:Data.Map.Strict.Internal 9061dd54223c7e14ff6837ade55c2970
import  -/  containers-0.5.11.0:Data.Set eb0fbc743d474b13246bc4dbf4a83977
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  research-0.1.0.0:Algorithm.FrankWolfe 0c27e7342bfb2b12e4883f8dc5af8082
import  -/  research-0.1.0.0:Algorithm.Search 32e402e997ae1d1ea2fff537ab8c9376
import  -/  research-0.1.0.0:Csv.LinkCsv b2bfdb9bc4e567509dd797faf42a33a6
import  -/  research-0.1.0.0:Link bf2ee027d71c5616cddc4285e321450e
ce413ed19e0fa1f823b2cea0c2d46c51
  $sunion ::
    Data.Map.Internal.Map Link.OD a
    -> Data.Map.Internal.Map Link.OD a
    -> Data.Map.Internal.Map Link.OD a
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
515e92b0b1e3991a76d75e67307e60e6
  $w$sgo1 ::
    Link.OD
    -> Link.Node
    -> Link.Node
    -> a1
    -> Data.Map.Internal.Map Link.OD a1
    -> Data.Map.Internal.Map Link.OD a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
1ca52f581fdb688be05bd32e967c6d7e
  $w$sgo13 ::
    Link.OD
    -> Link.Node
    -> Link.Node
    -> a1
    -> Data.Map.Internal.Map Link.OD a1
    -> Data.Map.Internal.Map Link.OD a1
  {- Arity: 5, Strictness: <L,U><L,1*U(U)><L,U(U)><L,U><S,1*U>,
     Inline: [0] -}
8a0018ab258660bab5e1c39ce00a49e4
  $wpoly_go13 ::
    Link.OD
    -> Data.Map.Internal.Map Link.OD a
    -> (# Data.Map.Internal.Map Link.OD a,
          Data.Map.Internal.Map Link.OD a #)
  {- Arity: 2, Strictness: <L,1*U(U(U),U(U))><S,1*U>, Inline: [0] -}
285f3d1fce1c1b1557ca91683a013fa5
  linkParameter :: Algorithm.FrankWolfe.LinkParameter
  {- Unfolding: (Data.Map.Strict.Internal.mapWithKey
                   @ Link.OD
                   @ Link.Link
                   @ (Link.Cost, Algorithm.FrankWolfe.Capacity,
                      Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
                   Main.linkParameter1
                   Main.network) -}
2016201027f045b49a5d7f266b229c9e
  linkParameter1 ::
    Link.OD
    -> Link.Link
    -> (Link.Cost, Algorithm.FrankWolfe.Capacity,
        Algorithm.FrankWolfe.Alpha, Algorithm.FrankWolfe.Beta)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A><S,1*U(A,U)>m,
     Unfolding: (\ (od :: Link.OD) (ds :: Link.Link)[OneShot] ->
                 case ds of wild { Link.Link ds1 t ->
                 (t, Main.linkParameter_c, Main.linkParameter_a,
                  Main.linkParameter_b) }) -}
6c3c69e56f414ed390481fd4b9918473
  linkParameter_a :: Algorithm.FrankWolfe.Alpha
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 10.0##) -}
d547245a92bcd045499171e03b8afc4f
  linkParameter_b :: Algorithm.FrankWolfe.Beta
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 2.0##) -}
18bd8b12843e1ce84e16b01cd688da16
  linkParameter_c :: Algorithm.FrankWolfe.Capacity
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 1.0##) -}
a91b291039bb863f100acf5af52fbd31
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
ca91994dd8eade920c4bb7d01bddfba5
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Csv.LinkCsv.decodeLinkCsv1
                        Main.main3
                        s of ds1 { (#,#) ipv ipv1 ->
                 GHC.IO.Handle.Text.hPutStr2
                   GHC.IO.Handle.FD.stdout
                   (case ipv1 of ww { Data.Vector.Vector ww1 ww2 ww3 ->
                    case (Csv.LinkCsv.$wmakeLinkCsv ww1 ww2 ww3)
                           `cast`
                         (Data.Vector.Fusion.Util.N:Id[0]
                              <Data.Vector.Vector
                                 (Link.Link,
                                  (Csv.LinkCsv.Highway, Csv.LinkCsv.Bridge,
                                   Csv.LinkCsv.Width))>_R) of v2 { Data.Vector.Vector ipv2 ipv3 ipv4 ->
                    letrec {
                      $wgo :: GHC.Prim.Int# -> [(Link.Link, Csv.LinkCsv.LinkCond)]
                        {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                      = \ (ww4 :: GHC.Prim.Int#) ->
                        case GHC.Prim.>=# ww4 ipv3 of lwild {
                          DEFAULT
                          -> case GHC.Prim.indexArray#
                                    @ (Link.Link, Csv.LinkCsv.LinkCond)
                                    ipv4
                                    (GHC.Prim.+# ipv2 ww4) of ds3 { Unit# ipv5 ->
                             GHC.Types.:
                               @ (Link.Link, Csv.LinkCsv.LinkCond)
                               ipv5
                               ($wgo (GHC.Prim.+# ww4 1#)) }
                          1# -> GHC.Types.[] @ (Link.Link, Csv.LinkCsv.LinkCond) }
                    } in
                    GHC.Show.showList__
                      @ (Link.Link,
                         (Csv.LinkCsv.Highway, Csv.LinkCsv.Bridge, Csv.LinkCsv.Width))
                      Main.main2
                      ($wgo 0#)
                      (GHC.Types.[] @ GHC.Types.Char) } })
                   GHC.Types.True
                   ipv }) -}
3f92cb2c841c5a70b0f193bb8f99c489
  main2 ::
    (Link.Link,
     (Csv.LinkCsv.Highway, Csv.LinkCsv.Bridge, Csv.LinkCsv.Width))
    -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2,
     Strictness: <S,1*U(1*U(1*U,1*U(U)),1*U(1*U,1*U,1*U))><L,U>m2,
     Unfolding: (\ (w3 :: (Link.Link,
                           (Csv.LinkCsv.Highway, Csv.LinkCsv.Bridge, Csv.LinkCsv.Width)))
                   (w4 :: GHC.Base.String)[OneShot] ->
                 case w3 of ww { (,) ww1 ww2 ->
                 GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)4
                   (case ww1 of ww4 { Link.Link ww3 ww5 ->
                    Link.$w$cshowsPrec1
                      0#
                      ww3
                      ww5
                      (GHC.Types.:
                         @ GHC.Types.Char
                         GHC.Show.showList__1
                         (GHC.Show.$fShow(,)_$sgo1
                            (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w4)
                            (\ (w5 :: GHC.Base.String)[OneShot] ->
                             case ww2 of ww6 { (,,) ww7 ww8 ww9 ->
                             GHC.Types.:
                               @ GHC.Types.Char
                               GHC.Show.$fShow(,)4
                               (let {
                                  karg :: GHC.Base.String
                                  = GHC.Show.$fShow(,,)_$sgo2
                                      (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 w5)
                                      (GHC.Show.$fShowMaybe_$cshowsPrec
                                         @ Data.Text.Internal.Text
                                         Data.Text.Show.$fShowText
                                         GHC.Show.$fShow(,)1
                                         ww8)
                                      (GHC.Types.:
                                         @ GHC.Show.ShowS
                                         (GHC.Show.$fShowMaybe_$cshowsPrec
                                            @ Data.Text.Internal.Text
                                            Data.Text.Show.$fShowText
                                            GHC.Show.$fShow(,)1
                                            ww9)
                                         (GHC.Types.[] @ GHC.Show.ShowS))
                                } in
                                case ww7 of wild {
                                  GHC.Base.Nothing
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe4
                                       (GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 karg)
                                  GHC.Base.Just b1
                                  -> GHC.Base.++
                                       @ GHC.Types.Char
                                       GHC.Show.$fShowMaybe1
                                       (case Data.Text.Show.$w$cshowsPrec
                                               b1
                                               (GHC.Types.:
                                                  @ GHC.Types.Char
                                                  GHC.Show.showList__1
                                                  karg) of ww10 { (#,#) ww11 ww12 ->
                                        GHC.Types.: @ GHC.Types.Char ww11 ww12 }) }) })
                            (GHC.Types.[] @ GHC.Show.ShowS))) }) }) -}
3e721d49ce300867e93c6fe27f0cedde
  main3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.main4) -}
b3a14dfa7d551bd6cb164bcbeba273bc
  main4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("output_links.csv"#) -}
b1a33fa00459f7d1e5022b868f2dde18
  main5 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
a8df605a41a567c3236fa35f2f9e15d7
  network :: Link.Network
  {- Unfolding: (Main.$sunion
                   @ Link.Link
                   Main.network_n1
                   (Link.inverseNetwork_go13
                      (Data.Map.Internal.Tip @ Link.OD @ Link.Link)
                      Main.network_n1)) -}
d4d2868e4c57c82d43c3856ccf8dffa4
  network1 :: [(Link.OD, Link.Link)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Link.OD, Link.Link)
                   Main.network26
                   Main.network2) -}
2044179b97fb4d1fccb45cc9286c16e7
  network10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
737f6e12f37c5ae438555fd7dcc1eb7b
  network11 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 3#) -}
ce2fd3071f163c8c298fbf04410e1cd8
  network12 :: (Link.OD, Link.Link)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.network_od1, Main.network13)) -}
94aaa7787e834b1192625082014c7919
  network13 :: Link.Link
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.Link Main.network15 Main.network14) -}
86853329682109c8d7bcfb7aa6b71781
  network14 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 5.0##) -}
3d2138b2ce0fbd72cb0a6fcf62c43a6c
  network15 :: Link.Graph
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Link.Edge Main.network_od1) -}
a4793fa22513c89d11564a93b887265a
  network16 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
c5dc310e57469841eedb84ac441ea0b7
  network17 :: (Link.OD, Link.Link)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.network_od2, Main.network18)) -}
ac70ffeacf1ad5e13f6eedbda1a6ae18
  network18 :: Link.Link
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.Link Main.network19 Main.network14) -}
85901f0d778eea7b4b20760855bd4698
  network19 :: Link.Graph
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Link.Edge Main.network_od2) -}
8161eef4a0a0a5857a71e8cded0aaf32
  network2 :: [(Link.OD, Link.Link)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Link.OD, Link.Link)
                   Main.network21
                   Main.network3) -}
d0cb64847ded8f1ded5ef32afc1f41eb
  network20 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
e4856e2a698a84067e4c3d42b3df6dbd
  network21 :: (Link.OD, Link.Link)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.network25, Main.network22)) -}
71da0fc7f6449f8bff502884b492289f
  network22 :: Link.Link
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.Link Main.network24 Main.network23) -}
8e3c25f8c5e1fa77917c0f9856bfdd79
  network23 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 4.0##) -}
206a2b6393464d38438f42ee98f3f56f
  network24 :: Link.Graph
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Link.Edge Main.network25) -}
ea8a0f577c8be12712526429014dc49a
  network25 :: Link.OD
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.:->: Main.network20 Main.network11) -}
3a8d3aea3523827e204dbd984bb33bc5
  network26 :: (Link.OD, Link.Link)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.network_od3, Main.network27)) -}
207af40f7cf1584c8f7ffacad2e2d4dd
  network27 :: Link.Link
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.Link Main.network29 Main.network28) -}
fb30a8c762546cb77b5a096420d8e77b
  network28 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 3.0##) -}
68220e6e98fc416fee5fd57cfe7da252
  network29 :: Link.Graph
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Link.Edge Main.network_od3) -}
90589bb1e5c1f8d7e7ea08c871373b4e
  network3 :: [(Link.OD, Link.Link)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Link.OD, Link.Link)
                   Main.network17
                   Main.network4) -}
9e26b456ebd11dc44958c61646d39642
  network4 :: [(Link.OD, Link.Link)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Link.OD, Link.Link)
                   Main.network12
                   Main.network5) -}
9eaa3fc8ad16fed25a174c096c79321b
  network5 :: [(Link.OD, Link.Link)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Link.OD, Link.Link)
                   Main.network6
                   (GHC.Types.[] @ (Link.OD, Link.Link))) -}
a5a9ad26a05c89a4dfca68d6d7366458
  network6 :: (Link.OD, Link.Link)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.network_od, Main.network7)) -}
ab94919324c196848a2293038d974517
  network7 :: Link.Link
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.Link Main.network9 Main.network8) -}
2d50ed6df713d5799b2914a1d226782d
  network8 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 7.0##) -}
6ab3d4509e80c4a164e82cf9f0e0419d
  network9 :: Link.Graph
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (Link.Edge Main.network_od) -}
8f07740efb99815ea2d12ed4eb031edc
  network_n1 :: Link.Network
  {- Unfolding: (Link.$sfromList1 @ Link.Link Main.network1) -}
5484f659669334abfa3bde4773748908
  network_od :: Link.OD
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.:->: Main.network11 Main.network10) -}
570981eec30d9c3535cb8c55c6fca6ed
  network_od1 :: Link.OD
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.:->: Main.network16 Main.network11) -}
dcb697daeb1dff2ea77abf774b1e5130
  network_od2 :: Link.OD
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.:->: Main.network20 Main.network10) -}
fc84099819de4169a7dba8f861e24cbb
  network_od3 :: Link.OD
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Link.:->: Main.network20 Main.network16) -}
c6263e488df401c1852c08171a7ca43a
  trip :: Algorithm.FrankWolfe.Trip
  {- Unfolding: (Link.$sfromList1 @ GHC.Types.Double Main.trip1) -}
b5134220a94675eca74bb3ee52013113
  trip1 :: [(Link.OD, Algorithm.FrankWolfe.Flow)]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Link.OD, Algorithm.FrankWolfe.Flow)
                   Main.trip2
                   (GHC.Types.[] @ (Link.OD, Algorithm.FrankWolfe.Flow))) -}
13929c10979ebe25133767119e1af38f
  trip2 :: (Link.OD, GHC.Types.Double)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.network25, Main.network14)) -}
"SPEC/Main union @ OD _" [orphan] forall @ a
                                         ($dOrd :: GHC.Classes.Ord Link.OD)
  Data.Map.Internal.union @ Link.OD @ a $dOrd = Main.$sunion @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

